/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: int/http/hall/api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */

import { pb_1 } from "../../../../main/core/NpmExport";

/*
此处请修改为Creator NpmExport路径
请注意路径的层级
 */

export namespace ApiProto {
    /** 
      /////////////////////////
       user
       **/
    export enum GENDER {
        GENDER_UNKNOWN = 0,
        FEMALE = 1,
        MALE = 2,
    }

    /** 
      登录认证类型
       **/
    export enum IdentityType {
        AT_PHONE_NO = 0,
        AT_FB_ID = 1,
        AT_ACCOUNT_NO = 2,
        AT_AID = 3,
        AT_FB_EMAIL = 4,
    }
    export enum NewbieType {
        /** 
          默认 老用户
           **/
        NB_DEFAULT = 0,

        /** 
          新增游客账户
           **/
        NB_ANONYMOUS = 1,

        /** 
          游客升级正式账户
           **/
        NB_UPGRADE = 2,

        /** 
          直接注册正式账户
           **/
        NB_REGISTER = 3,
    }
    export enum ResetPwdType {
        /** 
          修改密码
           **/
        MODIFY_PWD = 0,

        /** 
          找回密码
           **/
        RETRIEVE_PWD = 1,
    }

    /** 
      ----------------------------提现-----------------------------
       提现账号类型
       **/
    export enum WithdrawAccountType {
        UNKNOWN = 0,

        /** 
          银行卡
           **/
        BANKCARD = 201,

        /** 
          电话卡
           **/
        PhoneCard = 202,

        /** 
          momo pay
           **/
        MOMO = 203,

        /** 
          zalo pay
           **/
        ZALO = 204,

        /** 
          one pay
           **/
        ONEPAY = 205,

        /** 
          Ngan luong
           **/
        NganLuong = 206,

        /** 
          PIX
           **/
        PIX = 207,

        /** 
          UPI
           **/
        UPI = 208,

        /** 
          电子钱包(虚拟类型)
           **/
        EWallet = 209,

        /** 
          电子钱包(dana)
           **/
        EWalletDana = 210,

        /** 
          电子钱包(ovo)
           **/
        EWalletOVO = 211,

        /** 
          电子钱包(gopay)
           **/
        EWalletGopay = 212,
    }

    /** 
      PIX账号类型
       **/
    export enum PixAccountType {
        PIX_UNKNOWN = 0,

        /** 
          手机号
           **/
        PIX_PHONE = 1,

        /** 
          邮箱
           **/
        PIX_EMAIL = 2,

        /** 
          EVP
           **/
        PIX_EVP = 3,

        /** 
          CPF
           **/
        PIX_CPF = 4,

        /** 
          CNPJ
           **/
        PIX_CNPJ = 5,
    }

    /** 
      提现状态
       **/
    export enum WithdrawStatus {
        /** 
          审核中
           **/
        WS_REVIEWING = 0,

        /** 
          审核不通过冻结金额
           **/
        WS_REVIEW_FAIL_UNREFUND = 1,

        /** 
          审核不通过返还金额
           **/
        WS_REVIEW_FAIL_REFUND = 2,

        /** 
          出款中
           **/
        WS_IN_PAYMENT = 3,

        /** 
          出款失败返还金额
           **/
        WS_PAYMENT_FAIL_REFUND = 4,

        /** 
          出款成功
           **/
        WS_PAYMENT_SUCCESS = 5,
    }

    /** 
      /////////////////////////
       **/
    export enum MailContactType {
        /** 
          默认，不使用
           **/
        MCT_DEFAULT = 0,

        /** 
          通用联系方式
           **/
        MCT_COMMON = 3,

        /** 
          facebook
           **/
        MCT_FB = 4,

        /** 
          zalo
           **/
        MCT_ZALO = 5,

        /** 
          whatsapp
           **/
        MCT_WHATS = 6,

        /** 
          Telegram
           **/
        MCT_TELEGRAM = 7,
    }

    /** 
      act/activity_center/receive_records/
       **/
    export enum TransType {
        TRANS_TYPE_ASSIGN = 0,
        TRANS_TYPE_RECEIVE = 1,
    }
    export enum CardType {
        CARD_TYPE_UNSPECIFIED = 0,
        CARD_TYPE_NORMAL = 1,
        CARD_TYPE_BRONZE = 2,
        CARD_TYPE_SILVER = 3,
        CARD_TYPE_GOLD = 4,
        CARD_TYPE_PLATINUM = 5,
        CARD_TYPE_DIAMOND = 6,
        CARD_TYPE_BLACK = 7,
    }
    export enum WeeklyCardBonusType {
        /** 
          即时奖励
           **/
        WEEKLY_CARD_BONUS_TYPE_IMMEDIATE_BONUS = 0,

        /** 
          每日免费奖励
           **/
        WEEKLY_CARD_BONUS_TYPE_FREE_BONUS = 1,

        /** 
          每日奖励
           **/
        WEEKLY_CARD_BONUS_TYPE_DAILY_BONUS = 2,
    }
    export enum WeeklyCardTagType {
        WEEKLY_CARD_TAG_TYPE_UNSPECIFIED = 0,
        WEEKLY_CARD_TAG_TYPE_SALE = 1,
        WEEKLY_CARD_TAG_TYPE_RECOMMEND = 2,
        WEEKLY_CARD_TAG_TYPE_POPULAR = 3,
    }

    /** 
      充值列表
       pay/record/list
       **/
    export enum PayStatus {
        DEFAULT = 0,
        PROCESSING = 1,
        DONE = 2,
        FAIL = 3,
    }

    /** 
      promoter/commission_conf/ 佣金等级配置
       **/
    export enum MedalLevel {
        ML_UNKNOWN = 0,

        /** 
          1 << 5
           **/
        ML_BRONZE = 32,

        /** 
          1 << 6
           **/
        ML_SILVER = 64,

        /** 
          1 << 7
           **/
        ML_GOLD = 128,

        /** 
          1 << 8
           **/
        ML_DIAMOND = 256,

        /** 
          1 << 9
           **/
        ML_KING = 512,
    }
    export enum MedalSubLevel {
        MSL_UNKNOWN = 0,

        /** 
          1 << 0
           **/
        MSL_I = 1,

        /** 
          1 << 1
           **/
        MSL_II = 2,

        /** 
          1 << 2
           **/
        MSL_III = 4,

        /** 
          1 << 3
           **/
        MSL_IV = 8,

        /** 
          1 << 4
           **/
        MSL_V = 16,
    }

    /** 
      通用请求头
       **/
    export class ReqHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      timestamp?: number;
                      user_id?: number;
                      auth_token?: string;
                      brand_code?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
                if ("brand_code" in data && data.brand_code != undefined) {
                    this.brand_code = data.brand_code;
                }
            }
        }

        /** 
          当前时间截
           **/
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }

        /** 
          当前时间截
           **/
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          当前登录用户id
           **/
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }

        /** 
          当前登录用户id
           **/
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          授权凭证
           **/
        get auth_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          授权凭证
           **/
        set auth_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          品牌号
           **/
        get brand_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          品牌号
           **/
        set brand_code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            timestamp?: number;
            user_id?: number;
            auth_token?: string;
            brand_code?: string;
        }): ReqHeader {
            const message = new ReqHeader({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.auth_token != null) {
                message.auth_token = data.auth_token;
            }
            if (data.brand_code != null) {
                message.brand_code = data.brand_code;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                user_id?: number;
                auth_token?: string;
                brand_code?: string;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.auth_token != null) {
                data.auth_token = this.auth_token;
            }
            if (this.brand_code != null) {
                data.brand_code = this.brand_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0) writer.writeInt64(1, this.timestamp);
            if (this.user_id != 0) writer.writeInt64(2, this.user_id);
            if (this.auth_token.length) writer.writeString(3, this.auth_token);
            if (this.brand_code.length) writer.writeString(4, this.brand_code);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqHeader {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ReqHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readInt64();
                        break;
                    case 2:
                        message.user_id = reader.readInt64();
                        break;
                    case 3:
                        message.auth_token = reader.readString();
                        break;
                    case 4:
                        message.brand_code = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReqHeader {
            return ReqHeader.deserialize(bytes);
        }
    }

    /** 
      通用应答头
       **/
    export class RespHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      code?: number;
                      trace_id?: string;
                      msg?: string;
                      timestamp?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("trace_id" in data && data.trace_id != undefined) {
                    this.trace_id = data.trace_id;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }

        /** 
          各模块接口定义的业务异常码
           **/
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }

        /** 
          各模块接口定义的业务异常码
           **/
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          本次请求唯一事务id，用于问题追踪定位
           **/
        get trace_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          本次请求唯一事务id，用于问题追踪定位
           **/
        set trace_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          错误信息
           **/
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          错误信息
           **/
        set msg(value: string) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          当前时间截
           **/
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }

        /** 
          当前时间截
           **/
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            code?: number;
            trace_id?: string;
            msg?: string;
            timestamp?: number;
        }): RespHeader {
            const message = new RespHeader({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.trace_id != null) {
                message.trace_id = data.trace_id;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                trace_id?: string;
                msg?: string;
                timestamp?: number;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.trace_id != null) {
                data.trace_id = this.trace_id;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0) writer.writeInt32(1, this.code);
            if (this.trace_id.length) writer.writeString(2, this.trace_id);
            if (this.msg.length) writer.writeString(3, this.msg);
            if (this.timestamp != 0) writer.writeInt64(4, this.timestamp);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespHeader {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RespHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.trace_id = reader.readString();
                        break;
                    case 3:
                        message.msg = reader.readString();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RespHeader {
            return RespHeader.deserialize(bytes);
        }
    }

    /** 
      分页参数
       **/
    export class PaginationCriteria extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      page_no?: number;
                      page_size?: number;
                      return_total?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("return_total" in data && data.return_total != undefined) {
                    this.return_total = data.return_total;
                }
            }
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get return_total() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set return_total(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_no?: number;
            page_size?: number;
            return_total?: boolean;
        }): PaginationCriteria {
            const message = new PaginationCriteria({});
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.return_total != null) {
                message.return_total = data.return_total;
            }
            return message;
        }
        toObject() {
            const data: {
                page_no?: number;
                page_size?: number;
                return_total?: boolean;
            } = {};
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.return_total != null) {
                data.return_total = this.return_total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_no != 0) writer.writeInt32(1, this.page_no);
            if (this.page_size != 0) writer.writeInt32(2, this.page_size);
            if (this.return_total != false) writer.writeBool(3, this.return_total);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginationCriteria {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PaginationCriteria();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_no = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.return_total = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaginationCriteria {
            return PaginationCriteria.deserialize(bytes);
        }
    }
    export class UserInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      user_id?: number;
                      brand_code?: string;
                      chn?: string;
                      username?: string;
                      phone?: string;
                      avatar?: number;
                      gender?: GENDER;
                      credit?: number;
                      safe_box?: number;
                      level?: number;
                      is_upgraded?: boolean;
                      available_avatar?: number[];
                      account_no?: string;
                      lan?: string;
                      fb_name?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [12],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("brand_code" in data && data.brand_code != undefined) {
                    this.brand_code = data.brand_code;
                }
                if ("chn" in data && data.chn != undefined) {
                    this.chn = data.chn;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("credit" in data && data.credit != undefined) {
                    this.credit = data.credit;
                }
                if ("safe_box" in data && data.safe_box != undefined) {
                    this.safe_box = data.safe_box;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("is_upgraded" in data && data.is_upgraded != undefined) {
                    this.is_upgraded = data.is_upgraded;
                }
                if ("available_avatar" in data && data.available_avatar != undefined) {
                    this.available_avatar = data.available_avatar;
                }
                if ("account_no" in data && data.account_no != undefined) {
                    this.account_no = data.account_no;
                }
                if ("lan" in data && data.lan != undefined) {
                    this.lan = data.lan;
                }
                if ("fb_name" in data && data.fb_name != undefined) {
                    this.fb_name = data.fb_name;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get brand_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set brand_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get chn() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set chn(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 7, GENDER.GENDER_UNKNOWN) as GENDER;
        }
        set gender(value: GENDER) {
            pb_1.Message.setField(this, 7, value);
        }
        get credit() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set credit(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get safe_box() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set safe_box(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get is_upgraded() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set is_upgraded(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get available_avatar() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
        }
        set available_avatar(value: number[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get account_no() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set account_no(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get lan() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set lan(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get fb_name() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set fb_name(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            user_id?: number;
            brand_code?: string;
            chn?: string;
            username?: string;
            phone?: string;
            avatar?: number;
            gender?: GENDER;
            credit?: number;
            safe_box?: number;
            level?: number;
            is_upgraded?: boolean;
            available_avatar?: number[];
            account_no?: string;
            lan?: string;
            fb_name?: string;
        }): UserInfo {
            const message = new UserInfo({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.brand_code != null) {
                message.brand_code = data.brand_code;
            }
            if (data.chn != null) {
                message.chn = data.chn;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.credit != null) {
                message.credit = data.credit;
            }
            if (data.safe_box != null) {
                message.safe_box = data.safe_box;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.is_upgraded != null) {
                message.is_upgraded = data.is_upgraded;
            }
            if (data.available_avatar != null) {
                message.available_avatar = data.available_avatar;
            }
            if (data.account_no != null) {
                message.account_no = data.account_no;
            }
            if (data.lan != null) {
                message.lan = data.lan;
            }
            if (data.fb_name != null) {
                message.fb_name = data.fb_name;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                brand_code?: string;
                chn?: string;
                username?: string;
                phone?: string;
                avatar?: number;
                gender?: GENDER;
                credit?: number;
                safe_box?: number;
                level?: number;
                is_upgraded?: boolean;
                available_avatar?: number[];
                account_no?: string;
                lan?: string;
                fb_name?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.brand_code != null) {
                data.brand_code = this.brand_code;
            }
            if (this.chn != null) {
                data.chn = this.chn;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.credit != null) {
                data.credit = this.credit;
            }
            if (this.safe_box != null) {
                data.safe_box = this.safe_box;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.is_upgraded != null) {
                data.is_upgraded = this.is_upgraded;
            }
            if (this.available_avatar != null) {
                data.available_avatar = this.available_avatar;
            }
            if (this.account_no != null) {
                data.account_no = this.account_no;
            }
            if (this.lan != null) {
                data.lan = this.lan;
            }
            if (this.fb_name != null) {
                data.fb_name = this.fb_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0) writer.writeInt64(1, this.user_id);
            if (this.brand_code.length) writer.writeString(2, this.brand_code);
            if (this.chn.length) writer.writeString(3, this.chn);
            if (this.username.length) writer.writeString(4, this.username);
            if (this.phone.length) writer.writeString(5, this.phone);
            if (this.avatar != 0) writer.writeInt32(6, this.avatar);
            if (this.gender != GENDER.GENDER_UNKNOWN) writer.writeEnum(7, this.gender);
            if (this.credit != 0) writer.writeInt64(8, this.credit);
            if (this.safe_box != 0) writer.writeInt64(9, this.safe_box);
            if (this.level != 0) writer.writeInt32(10, this.level);
            if (this.is_upgraded != false) writer.writeBool(11, this.is_upgraded);
            if (this.available_avatar.length) writer.writePackedInt32(12, this.available_avatar);
            if (this.account_no.length) writer.writeString(13, this.account_no);
            if (this.lan.length) writer.writeString(14, this.lan);
            if (this.fb_name.length) writer.writeString(15, this.fb_name);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt64();
                        break;
                    case 2:
                        message.brand_code = reader.readString();
                        break;
                    case 3:
                        message.chn = reader.readString();
                        break;
                    case 4:
                        message.username = reader.readString();
                        break;
                    case 5:
                        message.phone = reader.readString();
                        break;
                    case 6:
                        message.avatar = reader.readInt32();
                        break;
                    case 7:
                        message.gender = reader.readEnum();
                        break;
                    case 8:
                        message.credit = reader.readInt64();
                        break;
                    case 9:
                        message.safe_box = reader.readInt64();
                        break;
                    case 10:
                        message.level = reader.readInt32();
                        break;
                    case 11:
                        message.is_upgraded = reader.readBool();
                        break;
                    case 12:
                        message.available_avatar = reader.readPackedInt32();
                        break;
                    case 13:
                        message.account_no = reader.readString();
                        break;
                    case 14:
                        message.lan = reader.readString();
                        break;
                    case 15:
                        message.fb_name = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfo {
            return UserInfo.deserialize(bytes);
        }
    }

    /** 
      获取用户信息
       /user/get_user_info/
       **/
    export class UserInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      auto_login?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("auto_login" in data && data.auto_login != undefined) {
                    this.auto_login = data.auto_login;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auto_login() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set auto_login(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            auto_login?: boolean;
        }): UserInfoReq {
            const message = new UserInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.auto_login != null) {
                message.auto_login = data.auto_login;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                auto_login?: boolean;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.auto_login != null) {
                data.auto_login = this.auto_login;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.auto_login != false) writer.writeBool(2, this.auto_login);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.auto_login = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfoReq {
            return UserInfoReq.deserialize(bytes);
        }
    }
    export class UserInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: UserInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, UserInfo, 2) as UserInfo;
        }
        set data(value: UserInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof UserInfo.prototype.toObject>;
        }): UserInfoResp {
            const message = new UserInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = UserInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof UserInfo.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = UserInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfoResp {
            return UserInfoResp.deserialize(bytes);
        }
    }

    /** 
      修改用户信息
       /user/modify_user_info/
       **/
    export class ModifyUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      gender?: GENDER;
                      avatar?: number;
                      username?: string;
                      lan?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("lan" in data && data.lan != undefined) {
                    this.lan = data.lan;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 2, GENDER.GENDER_UNKNOWN) as GENDER;
        }
        set gender(value: GENDER) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lan() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lan(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            gender?: GENDER;
            avatar?: number;
            username?: string;
            lan?: string;
        }): ModifyUserReq {
            const message = new ModifyUserReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.lan != null) {
                message.lan = data.lan;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                gender?: GENDER;
                avatar?: number;
                username?: string;
                lan?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.lan != null) {
                data.lan = this.lan;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.gender != GENDER.GENDER_UNKNOWN) writer.writeEnum(2, this.gender);
            if (this.avatar != 0) writer.writeInt32(3, this.avatar);
            if (this.username.length) writer.writeString(4, this.username);
            if (this.lan.length) writer.writeString(5, this.lan);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyUserReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ModifyUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.gender = reader.readEnum();
                        break;
                    case 3:
                        message.avatar = reader.readInt32();
                        break;
                    case 4:
                        message.username = reader.readString();
                        break;
                    case 5:
                        message.lan = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyUserReq {
            return ModifyUserReq.deserialize(bytes);
        }
    }
    export class ModifyUserResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): ModifyUserResp {
            const message = new ModifyUserResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyUserResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ModifyUserResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyUserResp {
            return ModifyUserResp.deserialize(bytes);
        }
    }

    /** 
      获取用户余额
       /user/get_balance/
       **/
    export class UserBalance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      credit?: number;
                      safe_box?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credit" in data && data.credit != undefined) {
                    this.credit = data.credit;
                }
                if ("safe_box" in data && data.safe_box != undefined) {
                    this.safe_box = data.safe_box;
                }
            }
        }
        get credit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set credit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get safe_box() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set safe_box(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { credit?: number; safe_box?: number }): UserBalance {
            const message = new UserBalance({});
            if (data.credit != null) {
                message.credit = data.credit;
            }
            if (data.safe_box != null) {
                message.safe_box = data.safe_box;
            }
            return message;
        }
        toObject() {
            const data: {
                credit?: number;
                safe_box?: number;
            } = {};
            if (this.credit != null) {
                data.credit = this.credit;
            }
            if (this.safe_box != null) {
                data.safe_box = this.safe_box;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credit != 0) writer.writeInt64(1, this.credit);
            if (this.safe_box != 0) writer.writeInt64(2, this.safe_box);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserBalance {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserBalance();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credit = reader.readInt64();
                        break;
                    case 2:
                        message.safe_box = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserBalance {
            return UserBalance.deserialize(bytes);
        }
    }
    export class GetBalanceReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): GetBalanceReq {
            const message = new GetBalanceReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBalanceReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetBalanceReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBalanceReq {
            return GetBalanceReq.deserialize(bytes);
        }
    }
    export class GetBalanceResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: UserBalance;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, UserBalance, 2) as UserBalance;
        }
        set data(value: UserBalance) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof UserBalance.prototype.toObject>;
        }): GetBalanceResp {
            const message = new GetBalanceResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = UserBalance.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof UserBalance.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBalanceResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetBalanceResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = UserBalance.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBalanceResp {
            return GetBalanceResp.deserialize(bytes);
        }
    }
    export class Cert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      password?: string;
                      vcode?: string;
                      fb_token?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("vcode" in data && data.vcode != undefined) {
                    this.vcode = data.vcode;
                }
                if ("fb_token" in data && data.fb_token != undefined) {
                    this.fb_token = data.fb_token;
                }
            }
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get vcode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set vcode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fb_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set fb_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: { password?: string; vcode?: string; fb_token?: string }): Cert {
            const message = new Cert({});
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.vcode != null) {
                message.vcode = data.vcode;
            }
            if (data.fb_token != null) {
                message.fb_token = data.fb_token;
            }
            return message;
        }
        toObject() {
            const data: {
                password?: string;
                vcode?: string;
                fb_token?: string;
            } = {};
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.vcode != null) {
                data.vcode = this.vcode;
            }
            if (this.fb_token != null) {
                data.fb_token = this.fb_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.password.length) writer.writeString(1, this.password);
            if (this.vcode.length) writer.writeString(2, this.vcode);
            if (this.fb_token.length) writer.writeString(3, this.fb_token);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cert {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Cert();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.password = reader.readString();
                        break;
                    case 2:
                        message.vcode = reader.readString();
                        break;
                    case 3:
                        message.fb_token = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Cert {
            return Cert.deserialize(bytes);
        }
    }
    export class IdentityInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      type?: IdentityType;
                      identity?: string;
                      cert?: Cert;
                      extra_info?: IdentityInfo.ExtraInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("identity" in data && data.identity != undefined) {
                    this.identity = data.identity;
                }
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
                if ("extra_info" in data && data.extra_info != undefined) {
                    this.extra_info = data.extra_info;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                1,
                IdentityType.AT_PHONE_NO
            ) as IdentityType;
        }
        set type(value: IdentityType) {
            pb_1.Message.setField(this, 1, value);
        }
        get identity() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set identity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cert() {
            return pb_1.Message.getWrapperField(this, Cert, 3) as Cert;
        }
        set cert(value: Cert) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_cert() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get extra_info() {
            return pb_1.Message.getWrapperField(
                this,
                IdentityInfo.ExtraInfo,
                4
            ) as IdentityInfo.ExtraInfo;
        }
        set extra_info(value: IdentityInfo.ExtraInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_extra_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            type?: IdentityType;
            identity?: string;
            cert?: ReturnType<typeof Cert.prototype.toObject>;
            extra_info?: ReturnType<typeof IdentityInfo.ExtraInfo.prototype.toObject>;
        }): IdentityInfo {
            const message = new IdentityInfo({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.identity != null) {
                message.identity = data.identity;
            }
            if (data.cert != null) {
                message.cert = Cert.fromObject(data.cert);
            }
            if (data.extra_info != null) {
                message.extra_info = IdentityInfo.ExtraInfo.fromObject(data.extra_info);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: IdentityType;
                identity?: string;
                cert?: ReturnType<typeof Cert.prototype.toObject>;
                extra_info?: ReturnType<typeof IdentityInfo.ExtraInfo.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.identity != null) {
                data.identity = this.identity;
            }
            if (this.cert != null) {
                data.cert = this.cert.toObject();
            }
            if (this.extra_info != null) {
                data.extra_info = this.extra_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != IdentityType.AT_PHONE_NO) writer.writeEnum(1, this.type);
            if (this.identity.length) writer.writeString(2, this.identity);
            if (this.has_cert) writer.writeMessage(3, this.cert, () => this.cert.serialize(writer));
            if (this.has_extra_info)
                writer.writeMessage(4, this.extra_info, () => this.extra_info.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentityInfo {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new IdentityInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.identity = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(
                            message.cert,
                            () => (message.cert = Cert.deserialize(reader))
                        );
                        break;
                    case 4:
                        reader.readMessage(
                            message.extra_info,
                            () => (message.extra_info = IdentityInfo.ExtraInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentityInfo {
            return IdentityInfo.deserialize(bytes);
        }
    }
    export namespace IdentityInfo {
        export class ExtraInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          fb_email?: string;
                          fb_appid?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("fb_email" in data && data.fb_email != undefined) {
                        this.fb_email = data.fb_email;
                    }
                    if ("fb_appid" in data && data.fb_appid != undefined) {
                        this.fb_appid = data.fb_appid;
                    }
                }
            }
            get fb_email() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set fb_email(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get fb_appid() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set fb_appid(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { fb_email?: string; fb_appid?: string }): ExtraInfo {
                const message = new ExtraInfo({});
                if (data.fb_email != null) {
                    message.fb_email = data.fb_email;
                }
                if (data.fb_appid != null) {
                    message.fb_appid = data.fb_appid;
                }
                return message;
            }
            toObject() {
                const data: {
                    fb_email?: string;
                    fb_appid?: string;
                } = {};
                if (this.fb_email != null) {
                    data.fb_email = this.fb_email;
                }
                if (this.fb_appid != null) {
                    data.fb_appid = this.fb_appid;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.fb_email.length) writer.writeString(1, this.fb_email);
                if (this.fb_appid.length) writer.writeString(2, this.fb_appid);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtraInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ExtraInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.fb_email = reader.readString();
                            break;
                        case 2:
                            message.fb_appid = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ExtraInfo {
                return ExtraInfo.deserialize(bytes);
            }
        }
    }
    export class LoginInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      user_id?: number;
                      token?: string;
                      newbie_type?: NewbieType;
                      newbie_award?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("newbie_type" in data && data.newbie_type != undefined) {
                    this.newbie_type = data.newbie_type;
                }
                if ("newbie_award" in data && data.newbie_award != undefined) {
                    this.newbie_award = data.newbie_award;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          新增或者升级
           **/
        get newbie_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, NewbieType.NB_DEFAULT) as NewbieType;
        }

        /** 
          新增或者升级
           **/
        set newbie_type(value: NewbieType) {
            pb_1.Message.setField(this, 4, value);
        }
        get newbie_award() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set newbie_award(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            user_id?: number;
            token?: string;
            newbie_type?: NewbieType;
            newbie_award?: number;
        }): LoginInfo {
            const message = new LoginInfo({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.newbie_type != null) {
                message.newbie_type = data.newbie_type;
            }
            if (data.newbie_award != null) {
                message.newbie_award = data.newbie_award;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                token?: string;
                newbie_type?: NewbieType;
                newbie_award?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.newbie_type != null) {
                data.newbie_type = this.newbie_type;
            }
            if (this.newbie_award != null) {
                data.newbie_award = this.newbie_award;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0) writer.writeInt64(1, this.user_id);
            if (this.token.length) writer.writeString(2, this.token);
            if (this.newbie_type != NewbieType.NB_DEFAULT) writer.writeEnum(4, this.newbie_type);
            if (this.newbie_award != 0) writer.writeInt64(5, this.newbie_award);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginInfo {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LoginInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt64();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.newbie_type = reader.readEnum();
                        break;
                    case 5:
                        message.newbie_award = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginInfo {
            return LoginInfo.deserialize(bytes);
        }
    }

    /** 
      登录
       user/login/
       **/
    export class LoginReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      identity_info?: IdentityInfo;
                      refer_id?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("identity_info" in data && data.identity_info != undefined) {
                    this.identity_info = data.identity_info;
                }
                if ("refer_id" in data && data.refer_id != undefined) {
                    this.refer_id = data.refer_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get identity_info() {
            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;
        }
        set identity_info(value: IdentityInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_identity_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get refer_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set refer_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
            refer_id?: number;
        }): LoginReq {
            const message = new LoginReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.identity_info != null) {
                message.identity_info = IdentityInfo.fromObject(data.identity_info);
            }
            if (data.refer_id != null) {
                message.refer_id = data.refer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
                refer_id?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.identity_info != null) {
                data.identity_info = this.identity_info.toObject();
            }
            if (this.refer_id != null) {
                data.refer_id = this.refer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_identity_info)
                writer.writeMessage(2, this.identity_info, () =>
                    this.identity_info.serialize(writer)
                );
            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LoginReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.identity_info,
                            () => (message.identity_info = IdentityInfo.deserialize(reader))
                        );
                        break;
                    case 3:
                        message.refer_id = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginReq {
            return LoginReq.deserialize(bytes);
        }
    }
    export class LoginResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: LoginInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, LoginInfo, 2) as LoginInfo;
        }
        set data(value: LoginInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof LoginInfo.prototype.toObject>;
        }): LoginResp {
            const message = new LoginResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = LoginInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof LoginInfo.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LoginResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = LoginInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResp {
            return LoginResp.deserialize(bytes);
        }
    }

    /** 
      注册用户
       user/register/
       **/
    export class RegisterReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      identity_info?: IdentityInfo;
                      refer_id?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("identity_info" in data && data.identity_info != undefined) {
                    this.identity_info = data.identity_info;
                }
                if ("refer_id" in data && data.refer_id != undefined) {
                    this.refer_id = data.refer_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get identity_info() {
            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;
        }
        set identity_info(value: IdentityInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_identity_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get refer_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set refer_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
            refer_id?: number;
        }): RegisterReq {
            const message = new RegisterReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.identity_info != null) {
                message.identity_info = IdentityInfo.fromObject(data.identity_info);
            }
            if (data.refer_id != null) {
                message.refer_id = data.refer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
                refer_id?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.identity_info != null) {
                data.identity_info = this.identity_info.toObject();
            }
            if (this.refer_id != null) {
                data.refer_id = this.refer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_identity_info)
                writer.writeMessage(2, this.identity_info, () =>
                    this.identity_info.serialize(writer)
                );
            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RegisterReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.identity_info,
                            () => (message.identity_info = IdentityInfo.deserialize(reader))
                        );
                        break;
                    case 3:
                        message.refer_id = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterReq {
            return RegisterReq.deserialize(bytes);
        }
    }
    export class RegisterResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: LoginInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, LoginInfo, 2) as LoginInfo;
        }
        set data(value: LoginInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof LoginInfo.prototype.toObject>;
        }): RegisterResp {
            const message = new RegisterResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = LoginInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof LoginInfo.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RegisterResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = LoginInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResp {
            return RegisterResp.deserialize(bytes);
        }
    }

    /** 
      账号绑定升级
       user/bind_identity/
       **/
    export class BindIdentityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      identity_info?: IdentityInfo;
                      refer_id?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("identity_info" in data && data.identity_info != undefined) {
                    this.identity_info = data.identity_info;
                }
                if ("refer_id" in data && data.refer_id != undefined) {
                    this.refer_id = data.refer_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get identity_info() {
            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;
        }
        set identity_info(value: IdentityInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_identity_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get refer_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set refer_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
            refer_id?: number;
        }): BindIdentityReq {
            const message = new BindIdentityReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.identity_info != null) {
                message.identity_info = IdentityInfo.fromObject(data.identity_info);
            }
            if (data.refer_id != null) {
                message.refer_id = data.refer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;
                refer_id?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.identity_info != null) {
                data.identity_info = this.identity_info.toObject();
            }
            if (this.refer_id != null) {
                data.refer_id = this.refer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_identity_info)
                writer.writeMessage(2, this.identity_info, () =>
                    this.identity_info.serialize(writer)
                );
            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindIdentityReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new BindIdentityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.identity_info,
                            () => (message.identity_info = IdentityInfo.deserialize(reader))
                        );
                        break;
                    case 3:
                        message.refer_id = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BindIdentityReq {
            return BindIdentityReq.deserialize(bytes);
        }
    }
    export class BindIdentityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): BindIdentityResp {
            const message = new BindIdentityResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindIdentityResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new BindIdentityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BindIdentityResp {
            return BindIdentityResp.deserialize(bytes);
        }
    }

    /** 
      检查账号和手机号是否绑定关系
       user/verify_bind_phone/
       **/
    export class VerifyBindPhoneReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      account_no?: string;
                      phone?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("account_no" in data && data.account_no != undefined) {
                    this.account_no = data.account_no;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get account_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account_no(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            account_no?: string;
            phone?: string;
        }): VerifyBindPhoneReq {
            const message = new VerifyBindPhoneReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.account_no != null) {
                message.account_no = data.account_no;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                account_no?: string;
                phone?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.account_no != null) {
                data.account_no = this.account_no;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.account_no.length) writer.writeString(2, this.account_no);
            if (this.phone.length) writer.writeString(3, this.phone);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyBindPhoneReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VerifyBindPhoneReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.account_no = reader.readString();
                        break;
                    case 3:
                        message.phone = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyBindPhoneReq {
            return VerifyBindPhoneReq.deserialize(bytes);
        }
    }
    export class VerifyBindPhoneResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): VerifyBindPhoneResp {
            const message = new VerifyBindPhoneResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyBindPhoneResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VerifyBindPhoneResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyBindPhoneResp {
            return VerifyBindPhoneResp.deserialize(bytes);
        }
    }

    /** 
      重置密码
       user/reset_password/
       **/
    export class ResetPassReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      type?: ResetPwdType;
                      cert?: Cert;
                      new_password?: string;
                      account_no?: string;
                      phone?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
                if ("new_password" in data && data.new_password != undefined) {
                    this.new_password = data.new_password;
                }
                if ("account_no" in data && data.account_no != undefined) {
                    this.account_no = data.account_no;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                ResetPwdType.MODIFY_PWD
            ) as ResetPwdType;
        }
        set type(value: ResetPwdType) {
            pb_1.Message.setField(this, 2, value);
        }
        get cert() {
            return pb_1.Message.getWrapperField(this, Cert, 3) as Cert;
        }
        set cert(value: Cert) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_cert() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get new_password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set new_password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          need field if not login
           **/
        get account_no() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }

        /** 
          need field if not login
           **/
        set account_no(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            type?: ResetPwdType;
            cert?: ReturnType<typeof Cert.prototype.toObject>;
            new_password?: string;
            account_no?: string;
            phone?: string;
        }): ResetPassReq {
            const message = new ResetPassReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.cert != null) {
                message.cert = Cert.fromObject(data.cert);
            }
            if (data.new_password != null) {
                message.new_password = data.new_password;
            }
            if (data.account_no != null) {
                message.account_no = data.account_no;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                type?: ResetPwdType;
                cert?: ReturnType<typeof Cert.prototype.toObject>;
                new_password?: string;
                account_no?: string;
                phone?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.cert != null) {
                data.cert = this.cert.toObject();
            }
            if (this.new_password != null) {
                data.new_password = this.new_password;
            }
            if (this.account_no != null) {
                data.account_no = this.account_no;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.type != ResetPwdType.MODIFY_PWD) writer.writeEnum(2, this.type);
            if (this.has_cert) writer.writeMessage(3, this.cert, () => this.cert.serialize(writer));
            if (this.new_password.length) writer.writeString(4, this.new_password);
            if (this.account_no.length) writer.writeString(5, this.account_no);
            if (this.phone.length) writer.writeString(6, this.phone);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPassReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ResetPassReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(
                            message.cert,
                            () => (message.cert = Cert.deserialize(reader))
                        );
                        break;
                    case 4:
                        message.new_password = reader.readString();
                        break;
                    case 5:
                        message.account_no = reader.readString();
                        break;
                    case 6:
                        message.phone = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPassReq {
            return ResetPassReq.deserialize(bytes);
        }
    }
    export class ResetPassResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): ResetPassResp {
            const message = new ResetPassResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPassResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ResetPassResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPassResp {
            return ResetPassResp.deserialize(bytes);
        }
    }

    /** 
      获取手机验证码
       user/get_sms_code/
       **/
    export class SmsCodeReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      phone?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            phone?: string;
        }): SmsCodeReq {
            const message = new SmsCodeReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                phone?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.phone.length) writer.writeString(2, this.phone);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmsCodeReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SmsCodeReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmsCodeReq {
            return SmsCodeReq.deserialize(bytes);
        }
    }
    export class SmsCodeResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): SmsCodeResp {
            const message = new SmsCodeResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmsCodeResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SmsCodeResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmsCodeResp {
            return SmsCodeResp.deserialize(bytes);
        }
    }

    /** 
      KYC
       印度版kyc
       **/
    export class InKycExtra extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      CPF_OR_CNPJ?: string;
                      CEP?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("CPF_OR_CNPJ" in data && data.CPF_OR_CNPJ != undefined) {
                    this.CPF_OR_CNPJ = data.CPF_OR_CNPJ;
                }
                if ("CEP" in data && data.CEP != undefined) {
                    this.CEP = data.CEP;
                }
            }
        }

        /** 
          长度12或者14
           **/
        get CPF_OR_CNPJ() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }

        /** 
          长度12或者14
           **/
        set CPF_OR_CNPJ(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          长度8
           **/
        get CEP() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          长度8
           **/
        set CEP(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { CPF_OR_CNPJ?: string; CEP?: string }): InKycExtra {
            const message = new InKycExtra({});
            if (data.CPF_OR_CNPJ != null) {
                message.CPF_OR_CNPJ = data.CPF_OR_CNPJ;
            }
            if (data.CEP != null) {
                message.CEP = data.CEP;
            }
            return message;
        }
        toObject() {
            const data: {
                CPF_OR_CNPJ?: string;
                CEP?: string;
            } = {};
            if (this.CPF_OR_CNPJ != null) {
                data.CPF_OR_CNPJ = this.CPF_OR_CNPJ;
            }
            if (this.CEP != null) {
                data.CEP = this.CEP;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.CPF_OR_CNPJ.length) writer.writeString(1, this.CPF_OR_CNPJ);
            if (this.CEP.length) writer.writeString(2, this.CEP);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InKycExtra {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new InKycExtra();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.CPF_OR_CNPJ = reader.readString();
                        break;
                    case 2:
                        message.CEP = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InKycExtra {
            return InKycExtra.deserialize(bytes);
        }
    }

    /** 
      巴西版kyc
       **/
    export class BrKycExtra extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      CPF_OR_CNPJ?: string;
                      CEP?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("CPF_OR_CNPJ" in data && data.CPF_OR_CNPJ != undefined) {
                    this.CPF_OR_CNPJ = data.CPF_OR_CNPJ;
                }
                if ("CEP" in data && data.CEP != undefined) {
                    this.CEP = data.CEP;
                }
            }
        }

        /** 
          长度12或者14
           **/
        get CPF_OR_CNPJ() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }

        /** 
          长度12或者14
           **/
        set CPF_OR_CNPJ(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          长度8
           **/
        get CEP() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          长度8
           **/
        set CEP(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { CPF_OR_CNPJ?: string; CEP?: string }): BrKycExtra {
            const message = new BrKycExtra({});
            if (data.CPF_OR_CNPJ != null) {
                message.CPF_OR_CNPJ = data.CPF_OR_CNPJ;
            }
            if (data.CEP != null) {
                message.CEP = data.CEP;
            }
            return message;
        }
        toObject() {
            const data: {
                CPF_OR_CNPJ?: string;
                CEP?: string;
            } = {};
            if (this.CPF_OR_CNPJ != null) {
                data.CPF_OR_CNPJ = this.CPF_OR_CNPJ;
            }
            if (this.CEP != null) {
                data.CEP = this.CEP;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.CPF_OR_CNPJ.length) writer.writeString(1, this.CPF_OR_CNPJ);
            if (this.CEP.length) writer.writeString(2, this.CEP);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BrKycExtra {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new BrKycExtra();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.CPF_OR_CNPJ = reader.readString();
                        break;
                    case 2:
                        message.CEP = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BrKycExtra {
            return BrKycExtra.deserialize(bytes);
        }
    }
    export class KycExtra extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(
            data?:
                | any[]
                | ({} & (
                      | {
                            in_kyc_extra?: InKycExtra;
                            br_kyc_extra?: never;
                        }
                      | {
                            in_kyc_extra?: never;
                            br_kyc_extra?: BrKycExtra;
                        }
                  ))
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("in_kyc_extra" in data && data.in_kyc_extra != undefined) {
                    this.in_kyc_extra = data.in_kyc_extra;
                }
                if ("br_kyc_extra" in data && data.br_kyc_extra != undefined) {
                    this.br_kyc_extra = data.br_kyc_extra;
                }
            }
        }
        get in_kyc_extra() {
            return pb_1.Message.getWrapperField(this, InKycExtra, 1) as InKycExtra;
        }
        set in_kyc_extra(value: InKycExtra) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_in_kyc_extra() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get br_kyc_extra() {
            return pb_1.Message.getWrapperField(this, BrKycExtra, 2) as BrKycExtra;
        }
        set br_kyc_extra(value: BrKycExtra) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_br_kyc_extra() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get extra_info() {
            const cases: {
                [index: number]: "none" | "in_kyc_extra" | "br_kyc_extra";
            } = {
                0: "none",
                1: "in_kyc_extra",
                2: "br_kyc_extra",
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            in_kyc_extra?: ReturnType<typeof InKycExtra.prototype.toObject>;
            br_kyc_extra?: ReturnType<typeof BrKycExtra.prototype.toObject>;
        }): KycExtra {
            const message = new KycExtra({});
            if (data.in_kyc_extra != null) {
                message.in_kyc_extra = InKycExtra.fromObject(data.in_kyc_extra);
            }
            if (data.br_kyc_extra != null) {
                message.br_kyc_extra = BrKycExtra.fromObject(data.br_kyc_extra);
            }
            return message;
        }
        toObject() {
            const data: {
                in_kyc_extra?: ReturnType<typeof InKycExtra.prototype.toObject>;
                br_kyc_extra?: ReturnType<typeof BrKycExtra.prototype.toObject>;
            } = {};
            if (this.in_kyc_extra != null) {
                data.in_kyc_extra = this.in_kyc_extra.toObject();
            }
            if (this.br_kyc_extra != null) {
                data.br_kyc_extra = this.br_kyc_extra.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_in_kyc_extra)
                writer.writeMessage(1, this.in_kyc_extra, () =>
                    this.in_kyc_extra.serialize(writer)
                );
            if (this.has_br_kyc_extra)
                writer.writeMessage(2, this.br_kyc_extra, () =>
                    this.br_kyc_extra.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KycExtra {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new KycExtra();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.in_kyc_extra,
                            () => (message.in_kyc_extra = InKycExtra.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.br_kyc_extra,
                            () => (message.br_kyc_extra = BrKycExtra.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KycExtra {
            return KycExtra.deserialize(bytes);
        }
    }

    /** 
      user/set_kyc/
       **/
    export class SetKycReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      name?: string;
                      phone?: string;
                      email?: string;
                      kyc_extra_info?: KycExtra;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("kyc_extra_info" in data && data.kyc_extra_info != undefined) {
                    this.kyc_extra_info = data.kyc_extra_info;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get kyc_extra_info() {
            return pb_1.Message.getWrapperField(this, KycExtra, 5) as KycExtra;
        }
        set kyc_extra_info(value: KycExtra) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_kyc_extra_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            name?: string;
            phone?: string;
            email?: string;
            kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;
        }): SetKycReq {
            const message = new SetKycReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.kyc_extra_info != null) {
                message.kyc_extra_info = KycExtra.fromObject(data.kyc_extra_info);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                name?: string;
                phone?: string;
                email?: string;
                kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.kyc_extra_info != null) {
                data.kyc_extra_info = this.kyc_extra_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.name.length) writer.writeString(2, this.name);
            if (this.phone.length) writer.writeString(3, this.phone);
            if (this.email.length) writer.writeString(4, this.email);
            if (this.has_kyc_extra_info)
                writer.writeMessage(5, this.kyc_extra_info, () =>
                    this.kyc_extra_info.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKycReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SetKycReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.phone = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(
                            message.kyc_extra_info,
                            () => (message.kyc_extra_info = KycExtra.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetKycReq {
            return SetKycReq.deserialize(bytes);
        }
    }
    export class SetKycResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): SetKycResp {
            const message = new SetKycResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKycResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SetKycResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetKycResp {
            return SetKycResp.deserialize(bytes);
        }
    }
    export class KycData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      name?: string;
                      phone?: string;
                      email?: string;
                      kyc_extra_info?: KycExtra;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("kyc_extra_info" in data && data.kyc_extra_info != undefined) {
                    this.kyc_extra_info = data.kyc_extra_info;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get kyc_extra_info() {
            return pb_1.Message.getWrapperField(this, KycExtra, 4) as KycExtra;
        }
        set kyc_extra_info(value: KycExtra) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_kyc_extra_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            name?: string;
            phone?: string;
            email?: string;
            kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;
        }): KycData {
            const message = new KycData({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.kyc_extra_info != null) {
                message.kyc_extra_info = KycExtra.fromObject(data.kyc_extra_info);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                phone?: string;
                email?: string;
                kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.kyc_extra_info != null) {
                data.kyc_extra_info = this.kyc_extra_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length) writer.writeString(1, this.name);
            if (this.phone.length) writer.writeString(2, this.phone);
            if (this.email.length) writer.writeString(3, this.email);
            if (this.has_kyc_extra_info)
                writer.writeMessage(4, this.kyc_extra_info, () =>
                    this.kyc_extra_info.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KycData {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new KycData();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(
                            message.kyc_extra_info,
                            () => (message.kyc_extra_info = KycExtra.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KycData {
            return KycData.deserialize(bytes);
        }
    }

    /** 
      user/get_kyc/
       **/
    export class GetKycReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): GetKycReq {
            const message = new GetKycReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKycReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetKycReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKycReq {
            return GetKycReq.deserialize(bytes);
        }
    }
    export class GetKycResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: KycData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, KycData, 2) as KycData;
        }
        set data(value: KycData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof KycData.prototype.toObject>;
        }): GetKycResp {
            const message = new GetKycResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = KycData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof KycData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKycResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetKycResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = KycData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKycResp {
            return GetKycResp.deserialize(bytes);
        }
    }

    /** 
      user/get_register_settings/
       **/
    export class GetRegisterSettingsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): GetRegisterSettingsReq {
            const message = new GetRegisterSettingsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegisterSettingsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetRegisterSettingsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegisterSettingsReq {
            return GetRegisterSettingsReq.deserialize(bytes);
        }
    }
    export class GetRegisterSettingsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: GetRegisterSettingsResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                GetRegisterSettingsResp.RespData,
                2
            ) as GetRegisterSettingsResp.RespData;
        }
        set data(value: GetRegisterSettingsResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof GetRegisterSettingsResp.RespData.prototype.toObject>;
        }): GetRegisterSettingsResp {
            const message = new GetRegisterSettingsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = GetRegisterSettingsResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof GetRegisterSettingsResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegisterSettingsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetRegisterSettingsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    GetRegisterSettingsResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegisterSettingsResp {
            return GetRegisterSettingsResp.deserialize(bytes);
        }
    }
    export namespace GetRegisterSettingsResp {
        export enum AccountNoType {
            ACCOUNT_NO_TYPE_UNSPECIFIED = 0,
            ACCOUNT_NO_TYPE_ACCOUNT_NO = 1,
            ACCOUNT_NO_TYPE_PHONE = 2,
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          promoter_is_enable?: boolean;
                          account_no_type?: GetRegisterSettingsResp.AccountNoType;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("promoter_is_enable" in data && data.promoter_is_enable != undefined) {
                        this.promoter_is_enable = data.promoter_is_enable;
                    }
                    if ("account_no_type" in data && data.account_no_type != undefined) {
                        this.account_no_type = data.account_no_type;
                    }
                }
            }
            get promoter_is_enable() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set promoter_is_enable(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get account_no_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    GetRegisterSettingsResp.AccountNoType.ACCOUNT_NO_TYPE_UNSPECIFIED
                ) as GetRegisterSettingsResp.AccountNoType;
            }
            set account_no_type(value: GetRegisterSettingsResp.AccountNoType) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                promoter_is_enable?: boolean;
                account_no_type?: GetRegisterSettingsResp.AccountNoType;
            }): RespData {
                const message = new RespData({});
                if (data.promoter_is_enable != null) {
                    message.promoter_is_enable = data.promoter_is_enable;
                }
                if (data.account_no_type != null) {
                    message.account_no_type = data.account_no_type;
                }
                return message;
            }
            toObject() {
                const data: {
                    promoter_is_enable?: boolean;
                    account_no_type?: GetRegisterSettingsResp.AccountNoType;
                } = {};
                if (this.promoter_is_enable != null) {
                    data.promoter_is_enable = this.promoter_is_enable;
                }
                if (this.account_no_type != null) {
                    data.account_no_type = this.account_no_type;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.promoter_is_enable != false) writer.writeBool(1, this.promoter_is_enable);
                if (
                    this.account_no_type !=
                    GetRegisterSettingsResp.AccountNoType.ACCOUNT_NO_TYPE_UNSPECIFIED
                )
                    writer.writeEnum(2, this.account_no_type);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.promoter_is_enable = reader.readBool();
                            break;
                        case 2:
                            message.account_no_type = reader.readEnum();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      ----------------------------游戏-----------------------------
       获取单个游戏信息
       game/info
       **/
    export class GameInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      game_id?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            game_id?: number;
        }): GameInfoReq {
            const message = new GameInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                game_id?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.game_id != 0) writer.writeInt32(2, this.game_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.game_id = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameInfoReq {
            return GameInfoReq.deserialize(bytes);
        }
    }
    export class GameInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: GameInfoResp.GameInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                GameInfoResp.GameInfo,
                2
            ) as GameInfoResp.GameInfo;
        }
        set data(value: GameInfoResp.GameInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof GameInfoResp.GameInfo.prototype.toObject>;
        }): GameInfoResp {
            const message = new GameInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = GameInfoResp.GameInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof GameInfoResp.GameInfo.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = GameInfoResp.GameInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameInfoResp {
            return GameInfoResp.deserialize(bytes);
        }
    }
    export namespace GameInfoResp {
        export class RoomInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: number;
                          base_amount?: number;
                          chips_amount?: number[];
                          bet_limit_amount?: number;
                          enter_limit_amount?: number;
                          red_limit_amount?: number[];
                          table_id?: number;
                          enter_limit_range?: number[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [3, 6, 8],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("base_amount" in data && data.base_amount != undefined) {
                        this.base_amount = data.base_amount;
                    }
                    if ("chips_amount" in data && data.chips_amount != undefined) {
                        this.chips_amount = data.chips_amount;
                    }
                    if ("bet_limit_amount" in data && data.bet_limit_amount != undefined) {
                        this.bet_limit_amount = data.bet_limit_amount;
                    }
                    if ("enter_limit_amount" in data && data.enter_limit_amount != undefined) {
                        this.enter_limit_amount = data.enter_limit_amount;
                    }
                    if ("red_limit_amount" in data && data.red_limit_amount != undefined) {
                        this.red_limit_amount = data.red_limit_amount;
                    }
                    if ("table_id" in data && data.table_id != undefined) {
                        this.table_id = data.table_id;
                    }
                    if ("enter_limit_range" in data && data.enter_limit_range != undefined) {
                        this.enter_limit_range = data.enter_limit_range;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              基础筹码
               **/
            get base_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              基础筹码
               **/
            set base_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get chips_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set chips_amount(value: number[]) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              下注余额门槛
               **/
            get bet_limit_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              下注余额门槛
               **/
            set bet_limit_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              进入房间门槛
               **/
            get enter_limit_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }

            /** 
              进入房间门槛
               **/
            set enter_limit_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              限红
               **/
            get red_limit_amount() {
                return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
            }

            /** 
              限红
               **/
            set red_limit_amount(value: number[]) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              固定桌子桌号
               **/
            get table_id() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }

            /** 
              固定桌子桌号
               **/
            set table_id(value: number) {
                pb_1.Message.setField(this, 7, value);
            }

            /** 
              进入房间的上下限
               **/
            get enter_limit_range() {
                return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
            }

            /** 
              进入房间的上下限
               **/
            set enter_limit_range(value: number[]) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                id?: number;
                base_amount?: number;
                chips_amount?: number[];
                bet_limit_amount?: number;
                enter_limit_amount?: number;
                red_limit_amount?: number[];
                table_id?: number;
                enter_limit_range?: number[];
            }): RoomInfo {
                const message = new RoomInfo({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.base_amount != null) {
                    message.base_amount = data.base_amount;
                }
                if (data.chips_amount != null) {
                    message.chips_amount = data.chips_amount;
                }
                if (data.bet_limit_amount != null) {
                    message.bet_limit_amount = data.bet_limit_amount;
                }
                if (data.enter_limit_amount != null) {
                    message.enter_limit_amount = data.enter_limit_amount;
                }
                if (data.red_limit_amount != null) {
                    message.red_limit_amount = data.red_limit_amount;
                }
                if (data.table_id != null) {
                    message.table_id = data.table_id;
                }
                if (data.enter_limit_range != null) {
                    message.enter_limit_range = data.enter_limit_range;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    base_amount?: number;
                    chips_amount?: number[];
                    bet_limit_amount?: number;
                    enter_limit_amount?: number;
                    red_limit_amount?: number[];
                    table_id?: number;
                    enter_limit_range?: number[];
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.base_amount != null) {
                    data.base_amount = this.base_amount;
                }
                if (this.chips_amount != null) {
                    data.chips_amount = this.chips_amount;
                }
                if (this.bet_limit_amount != null) {
                    data.bet_limit_amount = this.bet_limit_amount;
                }
                if (this.enter_limit_amount != null) {
                    data.enter_limit_amount = this.enter_limit_amount;
                }
                if (this.red_limit_amount != null) {
                    data.red_limit_amount = this.red_limit_amount;
                }
                if (this.table_id != null) {
                    data.table_id = this.table_id;
                }
                if (this.enter_limit_range != null) {
                    data.enter_limit_range = this.enter_limit_range;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0) writer.writeInt32(1, this.id);
                if (this.base_amount != 0) writer.writeInt64(2, this.base_amount);
                if (this.chips_amount.length) writer.writePackedInt64(3, this.chips_amount);
                if (this.bet_limit_amount != 0) writer.writeInt64(4, this.bet_limit_amount);
                if (this.enter_limit_amount != 0) writer.writeInt64(5, this.enter_limit_amount);
                if (this.red_limit_amount.length) writer.writePackedInt64(6, this.red_limit_amount);
                if (this.table_id != 0) writer.writeInt32(7, this.table_id);
                if (this.enter_limit_range.length)
                    writer.writePackedInt64(8, this.enter_limit_range);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RoomInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt32();
                            break;
                        case 2:
                            message.base_amount = reader.readInt64();
                            break;
                        case 3:
                            message.chips_amount = reader.readPackedInt64();
                            break;
                        case 4:
                            message.bet_limit_amount = reader.readInt64();
                            break;
                        case 5:
                            message.enter_limit_amount = reader.readInt64();
                            break;
                        case 6:
                            message.red_limit_amount = reader.readPackedInt64();
                            break;
                        case 7:
                            message.table_id = reader.readInt32();
                            break;
                        case 8:
                            message.enter_limit_range = reader.readPackedInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RoomInfo {
                return RoomInfo.deserialize(bytes);
            }
        }
        export class GameInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          use_h5?: boolean;
                          frame_url?: string;
                          h5_url?: string;
                          hover_button?: boolean;
                          browser_direction?: number;
                          room_index?: number;
                          last_game?: number;
                          rooms_info?: GameInfoResp.RoomInfo[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [8],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("use_h5" in data && data.use_h5 != undefined) {
                        this.use_h5 = data.use_h5;
                    }
                    if ("frame_url" in data && data.frame_url != undefined) {
                        this.frame_url = data.frame_url;
                    }
                    if ("h5_url" in data && data.h5_url != undefined) {
                        this.h5_url = data.h5_url;
                    }
                    if ("hover_button" in data && data.hover_button != undefined) {
                        this.hover_button = data.hover_button;
                    }
                    if ("browser_direction" in data && data.browser_direction != undefined) {
                        this.browser_direction = data.browser_direction;
                    }
                    if ("room_index" in data && data.room_index != undefined) {
                        this.room_index = data.room_index;
                    }
                    if ("last_game" in data && data.last_game != undefined) {
                        this.last_game = data.last_game;
                    }
                    if ("rooms_info" in data && data.rooms_info != undefined) {
                        this.rooms_info = data.rooms_info;
                    }
                }
            }
            get use_h5() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set use_h5(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get frame_url() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set frame_url(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get h5_url() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set h5_url(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get hover_button() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set hover_button(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get browser_direction() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set browser_direction(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get room_index() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set room_index(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get last_game() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set last_game(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get rooms_info() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    GameInfoResp.RoomInfo,
                    8
                ) as GameInfoResp.RoomInfo[];
            }
            set rooms_info(value: GameInfoResp.RoomInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 8, value);
            }
            static fromObject(data: {
                use_h5?: boolean;
                frame_url?: string;
                h5_url?: string;
                hover_button?: boolean;
                browser_direction?: number;
                room_index?: number;
                last_game?: number;
                rooms_info?: ReturnType<typeof GameInfoResp.RoomInfo.prototype.toObject>[];
            }): GameInfo {
                const message = new GameInfo({});
                if (data.use_h5 != null) {
                    message.use_h5 = data.use_h5;
                }
                if (data.frame_url != null) {
                    message.frame_url = data.frame_url;
                }
                if (data.h5_url != null) {
                    message.h5_url = data.h5_url;
                }
                if (data.hover_button != null) {
                    message.hover_button = data.hover_button;
                }
                if (data.browser_direction != null) {
                    message.browser_direction = data.browser_direction;
                }
                if (data.room_index != null) {
                    message.room_index = data.room_index;
                }
                if (data.last_game != null) {
                    message.last_game = data.last_game;
                }
                if (data.rooms_info != null) {
                    message.rooms_info = data.rooms_info.map((item) =>
                        GameInfoResp.RoomInfo.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    use_h5?: boolean;
                    frame_url?: string;
                    h5_url?: string;
                    hover_button?: boolean;
                    browser_direction?: number;
                    room_index?: number;
                    last_game?: number;
                    rooms_info?: ReturnType<typeof GameInfoResp.RoomInfo.prototype.toObject>[];
                } = {};
                if (this.use_h5 != null) {
                    data.use_h5 = this.use_h5;
                }
                if (this.frame_url != null) {
                    data.frame_url = this.frame_url;
                }
                if (this.h5_url != null) {
                    data.h5_url = this.h5_url;
                }
                if (this.hover_button != null) {
                    data.hover_button = this.hover_button;
                }
                if (this.browser_direction != null) {
                    data.browser_direction = this.browser_direction;
                }
                if (this.room_index != null) {
                    data.room_index = this.room_index;
                }
                if (this.last_game != null) {
                    data.last_game = this.last_game;
                }
                if (this.rooms_info != null) {
                    data.rooms_info = this.rooms_info.map((item: GameInfoResp.RoomInfo) =>
                        item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.use_h5 != false) writer.writeBool(1, this.use_h5);
                if (this.frame_url.length) writer.writeString(2, this.frame_url);
                if (this.h5_url.length) writer.writeString(3, this.h5_url);
                if (this.hover_button != false) writer.writeBool(4, this.hover_button);
                if (this.browser_direction != 0) writer.writeInt32(5, this.browser_direction);
                if (this.room_index != 0) writer.writeInt32(6, this.room_index);
                if (this.last_game != 0) writer.writeInt32(7, this.last_game);
                if (this.rooms_info.length)
                    writer.writeRepeatedMessage(8, this.rooms_info, (item: GameInfoResp.RoomInfo) =>
                        item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new GameInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.use_h5 = reader.readBool();
                            break;
                        case 2:
                            message.frame_url = reader.readString();
                            break;
                        case 3:
                            message.h5_url = reader.readString();
                            break;
                        case 4:
                            message.hover_button = reader.readBool();
                            break;
                        case 5:
                            message.browser_direction = reader.readInt32();
                            break;
                        case 6:
                            message.room_index = reader.readInt32();
                            break;
                        case 7:
                            message.last_game = reader.readInt32();
                            break;
                        case 8:
                            reader.readMessage(message.rooms_info, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    8,
                                    GameInfoResp.RoomInfo.deserialize(reader),
                                    GameInfoResp.RoomInfo
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GameInfo {
                return GameInfo.deserialize(bytes);
            }
        }
    }

    /** 
      兑换码
       act/exchange_code/
       error code: 200 兑换码已被兑换
       error code: 201 兑换码已过期
       error code: 202 剩余可兑换次数不足
       error code: 203 兑换次数已达上限
       error code: 204 兑换活动已关闭
       error code: 205 兑换太频繁
       error code: 206 兑换码不存在
       error code: 207 无效兑换码(其他品牌/渠道的)
       **/
    export class ExchangeCodeReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      code?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            code?: string;
        }): ExchangeCodeReq {
            const message = new ExchangeCodeReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                code?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.code.length) writer.writeString(2, this.code);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCodeReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ExchangeCodeReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeCodeReq {
            return ExchangeCodeReq.deserialize(bytes);
        }
    }
    export class ExchangeCodeResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: ExchangeCodeResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                ExchangeCodeResp.RespData,
                2
            ) as ExchangeCodeResp.RespData;
        }
        set data(value: ExchangeCodeResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof ExchangeCodeResp.RespData.prototype.toObject>;
        }): ExchangeCodeResp {
            const message = new ExchangeCodeResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = ExchangeCodeResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof ExchangeCodeResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCodeResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ExchangeCodeResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = ExchangeCodeResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeCodeResp {
            return ExchangeCodeResp.deserialize(bytes);
        }
    }
    export namespace ExchangeCodeResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          amount?: number;
                          title?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("title" in data && data.title != undefined) {
                        this.title = data.title;
                    }
                }
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get title() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set title(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { amount?: number; title?: string }): RespData {
                const message = new RespData({});
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.title != null) {
                    message.title = data.title;
                }
                return message;
            }
            toObject() {
                const data: {
                    amount?: number;
                    title?: string;
                } = {};
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.title != null) {
                    data.title = this.title;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.amount != 0) writer.writeInt64(1, this.amount);
                if (this.title.length) writer.writeString(2, this.title);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.amount = reader.readInt64();
                            break;
                        case 2:
                            message.title = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      获取提现配置
       withdraw/conf/
       **/
    export class WithdrawConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): WithdrawConfReq {
            const message = new WithdrawConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawConfReq {
            return WithdrawConfReq.deserialize(bytes);
        }
    }
    export class WithdrawConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawConfResp.Conf[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                WithdrawConfResp.Conf,
                2
            ) as WithdrawConfResp.Conf[];
        }
        set data(value: WithdrawConfResp.Conf[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawConfResp.Conf.prototype.toObject>[];
        }): WithdrawConfResp {
            const message = new WithdrawConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) => WithdrawConfResp.Conf.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawConfResp.Conf.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: WithdrawConfResp.Conf) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(2, this.data, (item: WithdrawConfResp.Conf) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                WithdrawConfResp.Conf.deserialize(reader),
                                WithdrawConfResp.Conf
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawConfResp {
            return WithdrawConfResp.deserialize(bytes);
        }
    }
    export namespace WithdrawConfResp {
        export class Bank extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          name?: string;
                          code?: string;
                          icon?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("icon" in data && data.icon != undefined) {
                        this.icon = data.icon;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get icon() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set icon(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: { name?: string; code?: string; icon?: number }): Bank {
                const message = new Bank({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.icon != null) {
                    message.icon = data.icon;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    code?: string;
                    icon?: number;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.icon != null) {
                    data.icon = this.icon;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length) writer.writeString(1, this.name);
                if (this.code.length) writer.writeString(2, this.code);
                if (this.icon != 0) writer.writeInt32(3, this.icon);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Bank();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.code = reader.readString();
                            break;
                        case 3:
                            message.icon = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Bank {
                return Bank.deserialize(bytes);
            }
        }
        export class EWallet extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          ewallet_type?: WithdrawAccountType;
                          ewallet_name?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ewallet_type" in data && data.ewallet_type != undefined) {
                        this.ewallet_type = data.ewallet_type;
                    }
                    if ("ewallet_name" in data && data.ewallet_name != undefined) {
                        this.ewallet_name = data.ewallet_name;
                    }
                }
            }

            /** 
              电子钱包类型
               **/
            get ewallet_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    1,
                    WithdrawAccountType.UNKNOWN
                ) as WithdrawAccountType;
            }

            /** 
              电子钱包类型
               **/
            set ewallet_type(value: WithdrawAccountType) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              电子钱包名称
               **/
            get ewallet_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }

            /** 
              电子钱包名称
               **/
            set ewallet_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                ewallet_type?: WithdrawAccountType;
                ewallet_name?: string;
            }): EWallet {
                const message = new EWallet({});
                if (data.ewallet_type != null) {
                    message.ewallet_type = data.ewallet_type;
                }
                if (data.ewallet_name != null) {
                    message.ewallet_name = data.ewallet_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    ewallet_type?: WithdrawAccountType;
                    ewallet_name?: string;
                } = {};
                if (this.ewallet_type != null) {
                    data.ewallet_type = this.ewallet_type;
                }
                if (this.ewallet_name != null) {
                    data.ewallet_name = this.ewallet_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.ewallet_type != WithdrawAccountType.UNKNOWN)
                    writer.writeEnum(1, this.ewallet_type);
                if (this.ewallet_name.length) writer.writeString(2, this.ewallet_name);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EWallet {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new EWallet();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ewallet_type = reader.readEnum();
                            break;
                        case 2:
                            message.ewallet_name = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): EWallet {
                return EWallet.deserialize(bytes);
            }
        }
        export class Conf extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          name?: string;
                          channel_id?: string;
                          withdraw_type?: WithdrawAccountType;
                          max_count?: number;
                          left_count?: number;
                          max_total?: number;
                          left_total?: number;
                          min_amount?: number;
                          max_amount?: number;
                          base?: number;
                          comment?: string;
                          remain_amount?: number;
                          need_bank_extra?: number;
                          banks?: WithdrawConfResp.Bank[];
                          withdraw_comment?: string;
                          channel_list_id?: string;
                          ewallets?: WithdrawConfResp.EWallet[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [14, 17],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("channel_id" in data && data.channel_id != undefined) {
                        this.channel_id = data.channel_id;
                    }
                    if ("withdraw_type" in data && data.withdraw_type != undefined) {
                        this.withdraw_type = data.withdraw_type;
                    }
                    if ("max_count" in data && data.max_count != undefined) {
                        this.max_count = data.max_count;
                    }
                    if ("left_count" in data && data.left_count != undefined) {
                        this.left_count = data.left_count;
                    }
                    if ("max_total" in data && data.max_total != undefined) {
                        this.max_total = data.max_total;
                    }
                    if ("left_total" in data && data.left_total != undefined) {
                        this.left_total = data.left_total;
                    }
                    if ("min_amount" in data && data.min_amount != undefined) {
                        this.min_amount = data.min_amount;
                    }
                    if ("max_amount" in data && data.max_amount != undefined) {
                        this.max_amount = data.max_amount;
                    }
                    if ("base" in data && data.base != undefined) {
                        this.base = data.base;
                    }
                    if ("comment" in data && data.comment != undefined) {
                        this.comment = data.comment;
                    }
                    if ("remain_amount" in data && data.remain_amount != undefined) {
                        this.remain_amount = data.remain_amount;
                    }
                    if ("need_bank_extra" in data && data.need_bank_extra != undefined) {
                        this.need_bank_extra = data.need_bank_extra;
                    }
                    if ("banks" in data && data.banks != undefined) {
                        this.banks = data.banks;
                    }
                    if ("withdraw_comment" in data && data.withdraw_comment != undefined) {
                        this.withdraw_comment = data.withdraw_comment;
                    }
                    if ("channel_list_id" in data && data.channel_list_id != undefined) {
                        this.channel_list_id = data.channel_list_id;
                    }
                    if ("ewallets" in data && data.ewallets != undefined) {
                        this.ewallets = data.ewallets;
                    }
                }
            }

            /** 
              通道名称
               **/
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }

            /** 
              通道名称
               **/
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              提现通道id
               **/
            get channel_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }

            /** 
              提现通道id
               **/
            set channel_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              渠道类型
               **/
            get withdraw_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    3,
                    WithdrawAccountType.UNKNOWN
                ) as WithdrawAccountType;
            }

            /** 
              渠道类型
               **/
            set withdraw_type(value: WithdrawAccountType) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              单日次数上限
               **/
            get max_count() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              单日次数上限
               **/
            set max_count(value: number) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              单日剩余可用次数
               **/
            get left_count() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }

            /** 
              单日剩余可用次数
               **/
            set left_count(value: number) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              单日最大金额
               **/
            get max_total() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }

            /** 
              单日最大金额
               **/
            set max_total(value: number) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              剩下可用金额
               **/
            get left_total() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }

            /** 
              剩下可用金额
               **/
            set left_total(value: number) {
                pb_1.Message.setField(this, 7, value);
            }

            /** 
              单笔最小金额
               **/
            get min_amount() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }

            /** 
              单笔最小金额
               **/
            set min_amount(value: number) {
                pb_1.Message.setField(this, 8, value);
            }

            /** 
              单笔最大金额
               **/
            get max_amount() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }

            /** 
              单笔最大金额
               **/
            set max_amount(value: number) {
                pb_1.Message.setField(this, 9, value);
            }

            /** 
              兑换倍数基数
               **/
            get base() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }

            /** 
              兑换倍数基数
               **/
            set base(value: number) {
                pb_1.Message.setField(this, 10, value);
            }

            /** 
              客户端提示
               **/
            get comment() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }

            /** 
              客户端提示
               **/
            set comment(value: string) {
                pb_1.Message.setField(this, 11, value);
            }

            /** 
              提现保留金额
               **/
            get remain_amount() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }

            /** 
              提现保留金额
               **/
            set remain_amount(value: number) {
                pb_1.Message.setField(this, 12, value);
            }

            /** 
              是否需要银行扩展信息: 0:默认值(不需要额外信息)，1：需要开户支行 2：需要银行账户
               **/
            get need_bank_extra() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }

            /** 
              是否需要银行扩展信息: 0:默认值(不需要额外信息)，1：需要开户支行 2：需要银行账户
               **/
            set need_bank_extra(value: number) {
                pb_1.Message.setField(this, 13, value);
            }

            /** 
              支持的银行列表
               **/
            get banks() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WithdrawConfResp.Bank,
                    14
                ) as WithdrawConfResp.Bank[];
            }

            /** 
              支持的银行列表
               **/
            set banks(value: WithdrawConfResp.Bank[]) {
                pb_1.Message.setRepeatedWrapperField(this, 14, value);
            }

            /** 
              可提现余额说明
               **/
            get withdraw_comment() {
                return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
            }

            /** 
              可提现余额说明
               **/
            set withdraw_comment(value: string) {
                pb_1.Message.setField(this, 15, value);
            }

            /** 
              提现通道列表id
               **/
            get channel_list_id() {
                return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
            }

            /** 
              提现通道列表id
               **/
            set channel_list_id(value: string) {
                pb_1.Message.setField(this, 16, value);
            }

            /** 
              可用的电子钱包
               **/
            get ewallets() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WithdrawConfResp.EWallet,
                    17
                ) as WithdrawConfResp.EWallet[];
            }

            /** 
              可用的电子钱包
               **/
            set ewallets(value: WithdrawConfResp.EWallet[]) {
                pb_1.Message.setRepeatedWrapperField(this, 17, value);
            }
            static fromObject(data: {
                name?: string;
                channel_id?: string;
                withdraw_type?: WithdrawAccountType;
                max_count?: number;
                left_count?: number;
                max_total?: number;
                left_total?: number;
                min_amount?: number;
                max_amount?: number;
                base?: number;
                comment?: string;
                remain_amount?: number;
                need_bank_extra?: number;
                banks?: ReturnType<typeof WithdrawConfResp.Bank.prototype.toObject>[];
                withdraw_comment?: string;
                channel_list_id?: string;
                ewallets?: ReturnType<typeof WithdrawConfResp.EWallet.prototype.toObject>[];
            }): Conf {
                const message = new Conf({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.channel_id != null) {
                    message.channel_id = data.channel_id;
                }
                if (data.withdraw_type != null) {
                    message.withdraw_type = data.withdraw_type;
                }
                if (data.max_count != null) {
                    message.max_count = data.max_count;
                }
                if (data.left_count != null) {
                    message.left_count = data.left_count;
                }
                if (data.max_total != null) {
                    message.max_total = data.max_total;
                }
                if (data.left_total != null) {
                    message.left_total = data.left_total;
                }
                if (data.min_amount != null) {
                    message.min_amount = data.min_amount;
                }
                if (data.max_amount != null) {
                    message.max_amount = data.max_amount;
                }
                if (data.base != null) {
                    message.base = data.base;
                }
                if (data.comment != null) {
                    message.comment = data.comment;
                }
                if (data.remain_amount != null) {
                    message.remain_amount = data.remain_amount;
                }
                if (data.need_bank_extra != null) {
                    message.need_bank_extra = data.need_bank_extra;
                }
                if (data.banks != null) {
                    message.banks = data.banks.map((item) =>
                        WithdrawConfResp.Bank.fromObject(item)
                    );
                }
                if (data.withdraw_comment != null) {
                    message.withdraw_comment = data.withdraw_comment;
                }
                if (data.channel_list_id != null) {
                    message.channel_list_id = data.channel_list_id;
                }
                if (data.ewallets != null) {
                    message.ewallets = data.ewallets.map((item) =>
                        WithdrawConfResp.EWallet.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    channel_id?: string;
                    withdraw_type?: WithdrawAccountType;
                    max_count?: number;
                    left_count?: number;
                    max_total?: number;
                    left_total?: number;
                    min_amount?: number;
                    max_amount?: number;
                    base?: number;
                    comment?: string;
                    remain_amount?: number;
                    need_bank_extra?: number;
                    banks?: ReturnType<typeof WithdrawConfResp.Bank.prototype.toObject>[];
                    withdraw_comment?: string;
                    channel_list_id?: string;
                    ewallets?: ReturnType<typeof WithdrawConfResp.EWallet.prototype.toObject>[];
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.channel_id != null) {
                    data.channel_id = this.channel_id;
                }
                if (this.withdraw_type != null) {
                    data.withdraw_type = this.withdraw_type;
                }
                if (this.max_count != null) {
                    data.max_count = this.max_count;
                }
                if (this.left_count != null) {
                    data.left_count = this.left_count;
                }
                if (this.max_total != null) {
                    data.max_total = this.max_total;
                }
                if (this.left_total != null) {
                    data.left_total = this.left_total;
                }
                if (this.min_amount != null) {
                    data.min_amount = this.min_amount;
                }
                if (this.max_amount != null) {
                    data.max_amount = this.max_amount;
                }
                if (this.base != null) {
                    data.base = this.base;
                }
                if (this.comment != null) {
                    data.comment = this.comment;
                }
                if (this.remain_amount != null) {
                    data.remain_amount = this.remain_amount;
                }
                if (this.need_bank_extra != null) {
                    data.need_bank_extra = this.need_bank_extra;
                }
                if (this.banks != null) {
                    data.banks = this.banks.map((item: WithdrawConfResp.Bank) => item.toObject());
                }
                if (this.withdraw_comment != null) {
                    data.withdraw_comment = this.withdraw_comment;
                }
                if (this.channel_list_id != null) {
                    data.channel_list_id = this.channel_list_id;
                }
                if (this.ewallets != null) {
                    data.ewallets = this.ewallets.map((item: WithdrawConfResp.EWallet) =>
                        item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length) writer.writeString(1, this.name);
                if (this.channel_id.length) writer.writeString(2, this.channel_id);
                if (this.withdraw_type != WithdrawAccountType.UNKNOWN)
                    writer.writeEnum(3, this.withdraw_type);
                if (this.max_count != 0) writer.writeInt32(4, this.max_count);
                if (this.left_count != 0) writer.writeInt32(5, this.left_count);
                if (this.max_total != 0) writer.writeInt64(6, this.max_total);
                if (this.left_total != 0) writer.writeInt64(7, this.left_total);
                if (this.min_amount != 0) writer.writeInt64(8, this.min_amount);
                if (this.max_amount != 0) writer.writeInt64(9, this.max_amount);
                if (this.base != 0) writer.writeInt64(10, this.base);
                if (this.comment.length) writer.writeString(11, this.comment);
                if (this.remain_amount != 0) writer.writeInt64(12, this.remain_amount);
                if (this.need_bank_extra != 0) writer.writeInt32(13, this.need_bank_extra);
                if (this.banks.length)
                    writer.writeRepeatedMessage(14, this.banks, (item: WithdrawConfResp.Bank) =>
                        item.serialize(writer)
                    );
                if (this.withdraw_comment.length) writer.writeString(15, this.withdraw_comment);
                if (this.channel_list_id.length) writer.writeString(16, this.channel_list_id);
                if (this.ewallets.length)
                    writer.writeRepeatedMessage(
                        17,
                        this.ewallets,
                        (item: WithdrawConfResp.EWallet) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Conf {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Conf();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.channel_id = reader.readString();
                            break;
                        case 3:
                            message.withdraw_type = reader.readEnum();
                            break;
                        case 4:
                            message.max_count = reader.readInt32();
                            break;
                        case 5:
                            message.left_count = reader.readInt32();
                            break;
                        case 6:
                            message.max_total = reader.readInt64();
                            break;
                        case 7:
                            message.left_total = reader.readInt64();
                            break;
                        case 8:
                            message.min_amount = reader.readInt64();
                            break;
                        case 9:
                            message.max_amount = reader.readInt64();
                            break;
                        case 10:
                            message.base = reader.readInt64();
                            break;
                        case 11:
                            message.comment = reader.readString();
                            break;
                        case 12:
                            message.remain_amount = reader.readInt64();
                            break;
                        case 13:
                            message.need_bank_extra = reader.readInt32();
                            break;
                        case 14:
                            reader.readMessage(message.banks, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    14,
                                    WithdrawConfResp.Bank.deserialize(reader),
                                    WithdrawConfResp.Bank
                                )
                            );
                            break;
                        case 15:
                            message.withdraw_comment = reader.readString();
                            break;
                        case 16:
                            message.channel_list_id = reader.readString();
                            break;
                        case 17:
                            reader.readMessage(message.ewallets, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    17,
                                    WithdrawConfResp.EWallet.deserialize(reader),
                                    WithdrawConfResp.EWallet
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Conf {
                return Conf.deserialize(bytes);
            }
        }
    }

    /** 
      PIX账号信息
       **/
    export class WithdrawAccountPix extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      pix_account_type?: PixAccountType;
                      pix_identity?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pix_account_type" in data && data.pix_account_type != undefined) {
                    this.pix_account_type = data.pix_account_type;
                }
                if ("pix_identity" in data && data.pix_identity != undefined) {
                    this.pix_identity = data.pix_identity;
                }
            }
        }

        /** 
          PIX账号类型
           **/
        get pix_account_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                1,
                PixAccountType.PIX_UNKNOWN
            ) as PixAccountType;
        }

        /** 
          PIX账号类型
           **/
        set pix_account_type(value: PixAccountType) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          PIX身份验证 CPF/CNPJ
           **/
        get pix_identity() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          PIX身份验证 CPF/CNPJ
           **/
        set pix_identity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pix_account_type?: PixAccountType;
            pix_identity?: string;
        }): WithdrawAccountPix {
            const message = new WithdrawAccountPix({});
            if (data.pix_account_type != null) {
                message.pix_account_type = data.pix_account_type;
            }
            if (data.pix_identity != null) {
                message.pix_identity = data.pix_identity;
            }
            return message;
        }
        toObject() {
            const data: {
                pix_account_type?: PixAccountType;
                pix_identity?: string;
            } = {};
            if (this.pix_account_type != null) {
                data.pix_account_type = this.pix_account_type;
            }
            if (this.pix_identity != null) {
                data.pix_identity = this.pix_identity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pix_account_type != PixAccountType.PIX_UNKNOWN)
                writer.writeEnum(1, this.pix_account_type);
            if (this.pix_identity.length) writer.writeString(2, this.pix_identity);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountPix {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountPix();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pix_account_type = reader.readEnum();
                        break;
                    case 2:
                        message.pix_identity = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountPix {
            return WithdrawAccountPix.deserialize(bytes);
        }
    }

    /** 
      银行账号信息
       **/
    export class WithdrawAccountBank extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      ifsc?: string;
                      bank_code?: string;
                      bank_branch?: string;
                      address?: string;
                      phone?: string;
                      email?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ifsc" in data && data.ifsc != undefined) {
                    this.ifsc = data.ifsc;
                }
                if ("bank_code" in data && data.bank_code != undefined) {
                    this.bank_code = data.bank_code;
                }
                if ("bank_branch" in data && data.bank_branch != undefined) {
                    this.bank_branch = data.bank_branch;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }

        /** 
          IFSC code
           **/
        get ifsc() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }

        /** 
          IFSC code
           **/
        set ifsc(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          银行代码
           **/
        get bank_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          银行代码
           **/
        set bank_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          银行支行
           **/
        get bank_branch() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          银行支行
           **/
        set bank_branch(value: string) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          用户地址
           **/
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          用户地址
           **/
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          用户手机号
           **/
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }

        /** 
          用户手机号
           **/
        set phone(value: string) {
            pb_1.Message.setField(this, 5, value);
        }

        /** 
          用户邮箱
           **/
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }

        /** 
          用户邮箱
           **/
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ifsc?: string;
            bank_code?: string;
            bank_branch?: string;
            address?: string;
            phone?: string;
            email?: string;
        }): WithdrawAccountBank {
            const message = new WithdrawAccountBank({});
            if (data.ifsc != null) {
                message.ifsc = data.ifsc;
            }
            if (data.bank_code != null) {
                message.bank_code = data.bank_code;
            }
            if (data.bank_branch != null) {
                message.bank_branch = data.bank_branch;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                ifsc?: string;
                bank_code?: string;
                bank_branch?: string;
                address?: string;
                phone?: string;
                email?: string;
            } = {};
            if (this.ifsc != null) {
                data.ifsc = this.ifsc;
            }
            if (this.bank_code != null) {
                data.bank_code = this.bank_code;
            }
            if (this.bank_branch != null) {
                data.bank_branch = this.bank_branch;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ifsc.length) writer.writeString(1, this.ifsc);
            if (this.bank_code.length) writer.writeString(2, this.bank_code);
            if (this.bank_branch.length) writer.writeString(3, this.bank_branch);
            if (this.address.length) writer.writeString(4, this.address);
            if (this.phone.length) writer.writeString(5, this.phone);
            if (this.email.length) writer.writeString(6, this.email);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountBank {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountBank();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ifsc = reader.readString();
                        break;
                    case 2:
                        message.bank_code = reader.readString();
                        break;
                    case 3:
                        message.bank_branch = reader.readString();
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.phone = reader.readString();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountBank {
            return WithdrawAccountBank.deserialize(bytes);
        }
    }

    /** 
      UPI账号信息
       **/
    export class WithdrawAccountUpi extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      address?: string;
                      phone?: string;
                      email?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }

        /** 
          用户地址
           **/
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }

        /** 
          用户地址
           **/
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          用户手机号
           **/
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          用户手机号
           **/
        set phone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          用户邮箱
           **/
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          用户邮箱
           **/
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            address?: string;
            phone?: string;
            email?: string;
        }): WithdrawAccountUpi {
            const message = new WithdrawAccountUpi({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                phone?: string;
                email?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length) writer.writeString(1, this.address);
            if (this.phone.length) writer.writeString(2, this.phone);
            if (this.email.length) writer.writeString(3, this.email);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountUpi {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountUpi();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.phone = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountUpi {
            return WithdrawAccountUpi.deserialize(bytes);
        }
    }

    /** 
      电子钱包账号信息
       **/
    export class WithdrawAccountEWallet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      ewallet_type?: WithdrawAccountType;
                      ewallet_name?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ewallet_type" in data && data.ewallet_type != undefined) {
                    this.ewallet_type = data.ewallet_type;
                }
                if ("ewallet_name" in data && data.ewallet_name != undefined) {
                    this.ewallet_name = data.ewallet_name;
                }
            }
        }

        /** 
          电子钱包类型
           **/
        get ewallet_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                1,
                WithdrawAccountType.UNKNOWN
            ) as WithdrawAccountType;
        }

        /** 
          电子钱包类型
           **/
        set ewallet_type(value: WithdrawAccountType) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          电子钱包名称
           **/
        get ewallet_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          电子钱包名称
           **/
        set ewallet_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ewallet_type?: WithdrawAccountType;
            ewallet_name?: string;
        }): WithdrawAccountEWallet {
            const message = new WithdrawAccountEWallet({});
            if (data.ewallet_type != null) {
                message.ewallet_type = data.ewallet_type;
            }
            if (data.ewallet_name != null) {
                message.ewallet_name = data.ewallet_name;
            }
            return message;
        }
        toObject() {
            const data: {
                ewallet_type?: WithdrawAccountType;
                ewallet_name?: string;
            } = {};
            if (this.ewallet_type != null) {
                data.ewallet_type = this.ewallet_type;
            }
            if (this.ewallet_name != null) {
                data.ewallet_name = this.ewallet_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ewallet_type != WithdrawAccountType.UNKNOWN)
                writer.writeEnum(1, this.ewallet_type);
            if (this.ewallet_name.length) writer.writeString(2, this.ewallet_name);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountEWallet {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountEWallet();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ewallet_type = reader.readEnum();
                        break;
                    case 2:
                        message.ewallet_name = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountEWallet {
            return WithdrawAccountEWallet.deserialize(bytes);
        }
    }

    /** 
      提现账号信息
       **/
    export class WithdrawAccount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      type?: WithdrawAccountType;
                      account_no?: string;
                      account_name?: string;
                      is_default?: boolean;
                      pix?: WithdrawAccountPix;
                      bank?: WithdrawAccountBank;
                      upi?: WithdrawAccountUpi;
                      ewallet?: WithdrawAccountEWallet;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("account_no" in data && data.account_no != undefined) {
                    this.account_no = data.account_no;
                }
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
                if ("is_default" in data && data.is_default != undefined) {
                    this.is_default = data.is_default;
                }
                if ("pix" in data && data.pix != undefined) {
                    this.pix = data.pix;
                }
                if ("bank" in data && data.bank != undefined) {
                    this.bank = data.bank;
                }
                if ("upi" in data && data.upi != undefined) {
                    this.upi = data.upi;
                }
                if ("ewallet" in data && data.ewallet != undefined) {
                    this.ewallet = data.ewallet;
                }
            }
        }

        /** 
          账号id
           **/
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }

        /** 
          账号id
           **/
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          账号类型
           **/
        get type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                WithdrawAccountType.UNKNOWN
            ) as WithdrawAccountType;
        }

        /** 
          账号类型
           **/
        set type(value: WithdrawAccountType) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          账号
           **/
        get account_no() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          账号
           **/
        set account_no(value: string) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          姓名
           **/
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          姓名
           **/
        set account_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          是否是默认账号
           **/
        get is_default() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }

        /** 
          是否是默认账号
           **/
        set is_default(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }

        /** 
          PIX账号信息
           **/
        get pix() {
            return pb_1.Message.getWrapperField(this, WithdrawAccountPix, 6) as WithdrawAccountPix;
        }

        /** 
          PIX账号信息
           **/
        set pix(value: WithdrawAccountPix) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_pix() {
            return pb_1.Message.getField(this, 6) != null;
        }

        /** 
          银行账号信息
           **/
        get bank() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawAccountBank,
                7
            ) as WithdrawAccountBank;
        }

        /** 
          银行账号信息
           **/
        set bank(value: WithdrawAccountBank) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_bank() {
            return pb_1.Message.getField(this, 7) != null;
        }

        /** 
          UPI账号信息
           **/
        get upi() {
            return pb_1.Message.getWrapperField(this, WithdrawAccountUpi, 8) as WithdrawAccountUpi;
        }

        /** 
          UPI账号信息
           **/
        set upi(value: WithdrawAccountUpi) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_upi() {
            return pb_1.Message.getField(this, 8) != null;
        }

        /** 
          电子钱包账号信息
           **/
        get ewallet() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawAccountEWallet,
                9
            ) as WithdrawAccountEWallet;
        }

        /** 
          电子钱包账号信息
           **/
        set ewallet(value: WithdrawAccountEWallet) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_ewallet() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            id?: string;
            type?: WithdrawAccountType;
            account_no?: string;
            account_name?: string;
            is_default?: boolean;
            pix?: ReturnType<typeof WithdrawAccountPix.prototype.toObject>;
            bank?: ReturnType<typeof WithdrawAccountBank.prototype.toObject>;
            upi?: ReturnType<typeof WithdrawAccountUpi.prototype.toObject>;
            ewallet?: ReturnType<typeof WithdrawAccountEWallet.prototype.toObject>;
        }): WithdrawAccount {
            const message = new WithdrawAccount({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.account_no != null) {
                message.account_no = data.account_no;
            }
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            if (data.is_default != null) {
                message.is_default = data.is_default;
            }
            if (data.pix != null) {
                message.pix = WithdrawAccountPix.fromObject(data.pix);
            }
            if (data.bank != null) {
                message.bank = WithdrawAccountBank.fromObject(data.bank);
            }
            if (data.upi != null) {
                message.upi = WithdrawAccountUpi.fromObject(data.upi);
            }
            if (data.ewallet != null) {
                message.ewallet = WithdrawAccountEWallet.fromObject(data.ewallet);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                type?: WithdrawAccountType;
                account_no?: string;
                account_name?: string;
                is_default?: boolean;
                pix?: ReturnType<typeof WithdrawAccountPix.prototype.toObject>;
                bank?: ReturnType<typeof WithdrawAccountBank.prototype.toObject>;
                upi?: ReturnType<typeof WithdrawAccountUpi.prototype.toObject>;
                ewallet?: ReturnType<typeof WithdrawAccountEWallet.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.account_no != null) {
                data.account_no = this.account_no;
            }
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            if (this.is_default != null) {
                data.is_default = this.is_default;
            }
            if (this.pix != null) {
                data.pix = this.pix.toObject();
            }
            if (this.bank != null) {
                data.bank = this.bank.toObject();
            }
            if (this.upi != null) {
                data.upi = this.upi.toObject();
            }
            if (this.ewallet != null) {
                data.ewallet = this.ewallet.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(2, this.type);
            if (this.account_no.length) writer.writeString(3, this.account_no);
            if (this.account_name.length) writer.writeString(4, this.account_name);
            if (this.is_default != false) writer.writeBool(5, this.is_default);
            if (this.has_pix) writer.writeMessage(6, this.pix, () => this.pix.serialize(writer));
            if (this.has_bank) writer.writeMessage(7, this.bank, () => this.bank.serialize(writer));
            if (this.has_upi) writer.writeMessage(8, this.upi, () => this.upi.serialize(writer));
            if (this.has_ewallet)
                writer.writeMessage(9, this.ewallet, () => this.ewallet.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccount {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccount();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.account_no = reader.readString();
                        break;
                    case 4:
                        message.account_name = reader.readString();
                        break;
                    case 5:
                        message.is_default = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(
                            message.pix,
                            () => (message.pix = WithdrawAccountPix.deserialize(reader))
                        );
                        break;
                    case 7:
                        reader.readMessage(
                            message.bank,
                            () => (message.bank = WithdrawAccountBank.deserialize(reader))
                        );
                        break;
                    case 8:
                        reader.readMessage(
                            message.upi,
                            () => (message.upi = WithdrawAccountUpi.deserialize(reader))
                        );
                        break;
                    case 9:
                        reader.readMessage(
                            message.ewallet,
                            () => (message.ewallet = WithdrawAccountEWallet.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccount {
            return WithdrawAccount.deserialize(bytes);
        }
    }

    /** 
      绑定提现帐号
       withdraw/bind_account/
       **/
    export class WithdrawBindAccountReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      account?: WithdrawAccount;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get account() {
            return pb_1.Message.getWrapperField(this, WithdrawAccount, 2) as WithdrawAccount;
        }
        set account(value: WithdrawAccount) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;
        }): WithdrawBindAccountReq {
            const message = new WithdrawBindAccountReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.account != null) {
                message.account = WithdrawAccount.fromObject(data.account);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_account)
                writer.writeMessage(2, this.account, () => this.account.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBindAccountReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.account,
                            () => (message.account = WithdrawAccount.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountReq {
            return WithdrawBindAccountReq.deserialize(bytes);
        }
    }
    export class WithdrawBindAccountResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): WithdrawBindAccountResp {
            const message = new WithdrawBindAccountResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBindAccountResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountResp {
            return WithdrawBindAccountResp.deserialize(bytes);
        }
    }

    /** 
      绑定提现帐号风险检测
       withdraw/bind_account_risk/
       **/
    export class WithdrawBindAccountRiskReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): WithdrawBindAccountRiskReq {
            const message = new WithdrawBindAccountRiskReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountRiskReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBindAccountRiskReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountRiskReq {
            return WithdrawBindAccountRiskReq.deserialize(bytes);
        }
    }
    export class WithdrawBindAccountRiskResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawBindAccountRiskResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawBindAccountRiskResp.RespData,
                2
            ) as WithdrawBindAccountRiskResp.RespData;
        }
        set data(value: WithdrawBindAccountRiskResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawBindAccountRiskResp.RespData.prototype.toObject>;
        }): WithdrawBindAccountRiskResp {
            const message = new WithdrawBindAccountRiskResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WithdrawBindAccountRiskResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawBindAccountRiskResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountRiskResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBindAccountRiskResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    WithdrawBindAccountRiskResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountRiskResp {
            return WithdrawBindAccountRiskResp.deserialize(bytes);
        }
    }
    export namespace WithdrawBindAccountRiskResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          is_risk?: boolean;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("is_risk" in data && data.is_risk != undefined) {
                        this.is_risk = data.is_risk;
                    }
                }
            }

            /** 
              是否有风险：true:有风险，false:无风险
               **/
            get is_risk() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }

            /** 
              是否有风险：true:有风险，false:无风险
               **/
            set is_risk(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: { is_risk?: boolean }): RespData {
                const message = new RespData({});
                if (data.is_risk != null) {
                    message.is_risk = data.is_risk;
                }
                return message;
            }
            toObject() {
                const data: {
                    is_risk?: boolean;
                } = {};
                if (this.is_risk != null) {
                    data.is_risk = this.is_risk;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.is_risk != false) writer.writeBool(1, this.is_risk);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.is_risk = reader.readBool();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      解绑提现账号
       withdraw/unbind_account/
       **/
    export class WithdrawUnbindAccountReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            id?: string;
        }): WithdrawUnbindAccountReq {
            const message = new WithdrawUnbindAccountReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.id.length) writer.writeString(2, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawUnbindAccountReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawUnbindAccountReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawUnbindAccountReq {
            return WithdrawUnbindAccountReq.deserialize(bytes);
        }
    }
    export class WithdrawUnbindAccountResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): WithdrawUnbindAccountResp {
            const message = new WithdrawUnbindAccountResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawUnbindAccountResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawUnbindAccountResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawUnbindAccountResp {
            return WithdrawUnbindAccountResp.deserialize(bytes);
        }
    }

    /** 
      提现账号列表
       withdraw/accounts/
       **/
    export class WithdrawAccountsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      type?: WithdrawAccountType;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                WithdrawAccountType.UNKNOWN
            ) as WithdrawAccountType;
        }
        set type(value: WithdrawAccountType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            type?: WithdrawAccountType;
        }): WithdrawAccountsReq {
            const message = new WithdrawAccountsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                type?: WithdrawAccountType;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(2, this.type);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountsReq {
            return WithdrawAccountsReq.deserialize(bytes);
        }
    }
    export class WithdrawAccountsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawAccount[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                WithdrawAccount,
                2
            ) as WithdrawAccount[];
        }
        set data(value: WithdrawAccount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawAccount.prototype.toObject>[];
        }): WithdrawAccountsResp {
            const message = new WithdrawAccountsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) => WithdrawAccount.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawAccount.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: WithdrawAccount) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(2, this.data, (item: WithdrawAccount) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawAccountsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                WithdrawAccount.deserialize(reader),
                                WithdrawAccount
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawAccountsResp {
            return WithdrawAccountsResp.deserialize(bytes);
        }
    }

    /** 
      设置默认提现账号
       withdraw/set_default_account/
       **/
    export class WithdrawSetDefaultAccountReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          账号id
           **/
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          账号id
           **/
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            id?: string;
        }): WithdrawSetDefaultAccountReq {
            const message = new WithdrawSetDefaultAccountReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.id.length) writer.writeString(2, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawSetDefaultAccountReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawSetDefaultAccountReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawSetDefaultAccountReq {
            return WithdrawSetDefaultAccountReq.deserialize(bytes);
        }
    }
    export class WithdrawSetDefaultAccountResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): WithdrawSetDefaultAccountResp {
            const message = new WithdrawSetDefaultAccountResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawSetDefaultAccountResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawSetDefaultAccountResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawSetDefaultAccountResp {
            return WithdrawSetDefaultAccountResp.deserialize(bytes);
        }
    }

    /** 
      创建提现订单
       withdraw/exchange/
       error code: 5015 请切换提现账号
       **/
    export class WithdrawExchangeReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      channel_id?: string;
                      amount?: number;
                      bind_id?: string;
                      validate_bind?: boolean;
                      channel_list_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("bind_id" in data && data.bind_id != undefined) {
                    this.bind_id = data.bind_id;
                }
                if ("validate_bind" in data && data.validate_bind != undefined) {
                    this.validate_bind = data.validate_bind;
                }
                if ("channel_list_id" in data && data.channel_list_id != undefined) {
                    this.channel_list_id = data.channel_list_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          兑换金额
           **/
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }

        /** 
          兑换金额
           **/
        set amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          账号 id ，如果不填，使用默认提现账号
           **/
        get bind_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          账号 id ，如果不填，使用默认提现账号
           **/
        set bind_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          是否检验提现账号有效，如果检测且无效时，抛出 5015
           **/
        get validate_bind() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }

        /** 
          是否检验提现账号有效，如果检测且无效时，抛出 5015
           **/
        set validate_bind(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }

        /** 
          提现通道列表id
           **/
        get channel_list_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }

        /** 
          提现通道列表id
           **/
        set channel_list_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            channel_id?: string;
            amount?: number;
            bind_id?: string;
            validate_bind?: boolean;
            channel_list_id?: string;
        }): WithdrawExchangeReq {
            const message = new WithdrawExchangeReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.bind_id != null) {
                message.bind_id = data.bind_id;
            }
            if (data.validate_bind != null) {
                message.validate_bind = data.validate_bind;
            }
            if (data.channel_list_id != null) {
                message.channel_list_id = data.channel_list_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                channel_id?: string;
                amount?: number;
                bind_id?: string;
                validate_bind?: boolean;
                channel_list_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.bind_id != null) {
                data.bind_id = this.bind_id;
            }
            if (this.validate_bind != null) {
                data.validate_bind = this.validate_bind;
            }
            if (this.channel_list_id != null) {
                data.channel_list_id = this.channel_list_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.channel_id.length) writer.writeString(2, this.channel_id);
            if (this.amount != 0) writer.writeInt64(3, this.amount);
            if (this.bind_id.length) writer.writeString(4, this.bind_id);
            if (this.validate_bind != false) writer.writeBool(5, this.validate_bind);
            if (this.channel_list_id.length) writer.writeString(6, this.channel_list_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawExchangeReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawExchangeReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    case 3:
                        message.amount = reader.readInt64();
                        break;
                    case 4:
                        message.bind_id = reader.readString();
                        break;
                    case 5:
                        message.validate_bind = reader.readBool();
                        break;
                    case 6:
                        message.channel_list_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawExchangeReq {
            return WithdrawExchangeReq.deserialize(bytes);
        }
    }
    export class WithdrawExchangeResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): WithdrawExchangeResp {
            const message = new WithdrawExchangeResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawExchangeResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawExchangeResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawExchangeResp {
            return WithdrawExchangeResp.deserialize(bytes);
        }
    }

    /** 
      获取提现记录
       withdraw/records/
       **/
    export class WithdrawRecordsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page?: PaginationCriteria;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;
        }
        set page(value: PaginationCriteria) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
        }): WithdrawRecordsReq {
            const message = new WithdrawRecordsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page != null) {
                message.page = PaginationCriteria.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_page) writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawRecordsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.page,
                            () => (message.page = PaginationCriteria.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsReq {
            return WithdrawRecordsReq.deserialize(bytes);
        }
    }
    export class WithdrawRecordsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawRecordsResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawRecordsResp.RespData,
                2
            ) as WithdrawRecordsResp.RespData;
        }
        set data(value: WithdrawRecordsResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawRecordsResp.RespData.prototype.toObject>;
        }): WithdrawRecordsResp {
            const message = new WithdrawRecordsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WithdrawRecordsResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawRecordsResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawRecordsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = WithdrawRecordsResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsResp {
            return WithdrawRecordsResp.deserialize(bytes);
        }
    }
    export namespace WithdrawRecordsResp {
        export class WithdrawRecord extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: number;
                          status?: WithdrawStatus;
                          amount?: number;
                          type?: WithdrawAccountType;
                          account_no?: string;
                          account_name?: string;
                          created_at?: number;
                          updated_at?: number;
                          type_name?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("account_no" in data && data.account_no != undefined) {
                        this.account_no = data.account_no;
                    }
                    if ("account_name" in data && data.account_name != undefined) {
                        this.account_name = data.account_name;
                    }
                    if ("created_at" in data && data.created_at != undefined) {
                        this.created_at = data.created_at;
                    }
                    if ("updated_at" in data && data.updated_at != undefined) {
                        this.updated_at = data.updated_at;
                    }
                    if ("type_name" in data && data.type_name != undefined) {
                        this.type_name = data.type_name;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              提现状态
               **/
            get status() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    WithdrawStatus.WS_REVIEWING
                ) as WithdrawStatus;
            }

            /** 
              提现状态
               **/
            set status(value: WithdrawStatus) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              提现金额
               **/
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              提现金额
               **/
            set amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              提现账号类型
               **/
            get type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    4,
                    WithdrawAccountType.UNKNOWN
                ) as WithdrawAccountType;
            }

            /** 
              提现账号类型
               **/
            set type(value: WithdrawAccountType) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              提现账号
               **/
            get account_no() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }

            /** 
              提现账号
               **/
            set account_no(value: string) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              提现账号姓名
               **/
            get account_name() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }

            /** 
              提现账号姓名
               **/
            set account_name(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get created_at() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set created_at(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get updated_at() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set updated_at(value: number) {
                pb_1.Message.setField(this, 8, value);
            }

            /** 
              提现账号类型名称
               **/
            get type_name() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }

            /** 
              提现账号类型名称
               **/
            set type_name(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data: {
                id?: number;
                status?: WithdrawStatus;
                amount?: number;
                type?: WithdrawAccountType;
                account_no?: string;
                account_name?: string;
                created_at?: number;
                updated_at?: number;
                type_name?: string;
            }): WithdrawRecord {
                const message = new WithdrawRecord({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.account_no != null) {
                    message.account_no = data.account_no;
                }
                if (data.account_name != null) {
                    message.account_name = data.account_name;
                }
                if (data.created_at != null) {
                    message.created_at = data.created_at;
                }
                if (data.updated_at != null) {
                    message.updated_at = data.updated_at;
                }
                if (data.type_name != null) {
                    message.type_name = data.type_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    status?: WithdrawStatus;
                    amount?: number;
                    type?: WithdrawAccountType;
                    account_no?: string;
                    account_name?: string;
                    created_at?: number;
                    updated_at?: number;
                    type_name?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.account_no != null) {
                    data.account_no = this.account_no;
                }
                if (this.account_name != null) {
                    data.account_name = this.account_name;
                }
                if (this.created_at != null) {
                    data.created_at = this.created_at;
                }
                if (this.updated_at != null) {
                    data.updated_at = this.updated_at;
                }
                if (this.type_name != null) {
                    data.type_name = this.type_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0) writer.writeInt64(1, this.id);
                if (this.status != WithdrawStatus.WS_REVIEWING) writer.writeEnum(2, this.status);
                if (this.amount != 0) writer.writeInt64(3, this.amount);
                if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(4, this.type);
                if (this.account_no.length) writer.writeString(5, this.account_no);
                if (this.account_name.length) writer.writeString(6, this.account_name);
                if (this.created_at != 0) writer.writeInt64(7, this.created_at);
                if (this.updated_at != 0) writer.writeInt64(8, this.updated_at);
                if (this.type_name.length) writer.writeString(9, this.type_name);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecord {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new WithdrawRecord();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            message.amount = reader.readInt64();
                            break;
                        case 4:
                            message.type = reader.readEnum();
                            break;
                        case 5:
                            message.account_no = reader.readString();
                            break;
                        case 6:
                            message.account_name = reader.readString();
                            break;
                        case 7:
                            message.created_at = reader.readInt64();
                            break;
                        case 8:
                            message.updated_at = reader.readInt64();
                            break;
                        case 9:
                            message.type_name = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WithdrawRecord {
                return WithdrawRecord.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          records?: WithdrawRecordsResp.WithdrawRecord[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WithdrawRecordsResp.WithdrawRecord,
                    2
                ) as WithdrawRecordsResp.WithdrawRecord[];
            }
            set records(value: WithdrawRecordsResp.WithdrawRecord[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                records?: ReturnType<
                    typeof WithdrawRecordsResp.WithdrawRecord.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        WithdrawRecordsResp.WithdrawRecord.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    records?: ReturnType<
                        typeof WithdrawRecordsResp.WithdrawRecord.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.records != null) {
                    data.records = this.records.map((item: WithdrawRecordsResp.WithdrawRecord) =>
                        item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.records,
                        (item: WithdrawRecordsResp.WithdrawRecord) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    WithdrawRecordsResp.WithdrawRecord.deserialize(reader),
                                    WithdrawRecordsResp.WithdrawRecord
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      获取提现记录
       withdraw/records_v2/
       **/
    export class WithdrawRecordsReqV2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page?: PaginationCriteria;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;
        }
        set page(value: PaginationCriteria) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
        }): WithdrawRecordsReqV2 {
            const message = new WithdrawRecordsReqV2({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page != null) {
                message.page = PaginationCriteria.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_page) writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsReqV2 {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawRecordsReqV2();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.page,
                            () => (message.page = PaginationCriteria.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsReqV2 {
            return WithdrawRecordsReqV2.deserialize(bytes);
        }
    }
    export class WithdrawRecordsRespV2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawRecordsRespV2.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawRecordsRespV2.RespData,
                2
            ) as WithdrawRecordsRespV2.RespData;
        }
        set data(value: WithdrawRecordsRespV2.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawRecordsRespV2.RespData.prototype.toObject>;
        }): WithdrawRecordsRespV2 {
            const message = new WithdrawRecordsRespV2({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WithdrawRecordsRespV2.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawRecordsRespV2.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsRespV2 {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawRecordsRespV2();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = WithdrawRecordsRespV2.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsRespV2 {
            return WithdrawRecordsRespV2.deserialize(bytes);
        }
    }
    export namespace WithdrawRecordsRespV2 {
        export class WithdrawRecord extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: number;
                          status?: WithdrawStatus;
                          amount?: number;
                          type?: WithdrawAccountType;
                          type_name?: string;
                          account?: WithdrawAccount;
                          created_at?: number;
                          updated_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("type_name" in data && data.type_name != undefined) {
                        this.type_name = data.type_name;
                    }
                    if ("account" in data && data.account != undefined) {
                        this.account = data.account;
                    }
                    if ("created_at" in data && data.created_at != undefined) {
                        this.created_at = data.created_at;
                    }
                    if ("updated_at" in data && data.updated_at != undefined) {
                        this.updated_at = data.updated_at;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              提现状态
               **/
            get status() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    WithdrawStatus.WS_REVIEWING
                ) as WithdrawStatus;
            }

            /** 
              提现状态
               **/
            set status(value: WithdrawStatus) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              提现金额
               **/
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              提现金额
               **/
            set amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              提现账号类型
               **/
            get type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    4,
                    WithdrawAccountType.UNKNOWN
                ) as WithdrawAccountType;
            }

            /** 
              提现账号类型
               **/
            set type(value: WithdrawAccountType) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              提现账号类型名称
               **/
            get type_name() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }

            /** 
              提现账号类型名称
               **/
            set type_name(value: string) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              提现账号信息
               **/
            get account() {
                return pb_1.Message.getWrapperField(this, WithdrawAccount, 6) as WithdrawAccount;
            }

            /** 
              提现账号信息
               **/
            set account(value: WithdrawAccount) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_account() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get created_at() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set created_at(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get updated_at() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set updated_at(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                id?: number;
                status?: WithdrawStatus;
                amount?: number;
                type?: WithdrawAccountType;
                type_name?: string;
                account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;
                created_at?: number;
                updated_at?: number;
            }): WithdrawRecord {
                const message = new WithdrawRecord({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.type_name != null) {
                    message.type_name = data.type_name;
                }
                if (data.account != null) {
                    message.account = WithdrawAccount.fromObject(data.account);
                }
                if (data.created_at != null) {
                    message.created_at = data.created_at;
                }
                if (data.updated_at != null) {
                    message.updated_at = data.updated_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    status?: WithdrawStatus;
                    amount?: number;
                    type?: WithdrawAccountType;
                    type_name?: string;
                    account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;
                    created_at?: number;
                    updated_at?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.type_name != null) {
                    data.type_name = this.type_name;
                }
                if (this.account != null) {
                    data.account = this.account.toObject();
                }
                if (this.created_at != null) {
                    data.created_at = this.created_at;
                }
                if (this.updated_at != null) {
                    data.updated_at = this.updated_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0) writer.writeInt64(1, this.id);
                if (this.status != WithdrawStatus.WS_REVIEWING) writer.writeEnum(2, this.status);
                if (this.amount != 0) writer.writeInt64(3, this.amount);
                if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(4, this.type);
                if (this.type_name.length) writer.writeString(5, this.type_name);
                if (this.has_account)
                    writer.writeMessage(6, this.account, () => this.account.serialize(writer));
                if (this.created_at != 0) writer.writeInt64(7, this.created_at);
                if (this.updated_at != 0) writer.writeInt64(8, this.updated_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecord {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new WithdrawRecord();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            message.amount = reader.readInt64();
                            break;
                        case 4:
                            message.type = reader.readEnum();
                            break;
                        case 5:
                            message.type_name = reader.readString();
                            break;
                        case 6:
                            reader.readMessage(
                                message.account,
                                () => (message.account = WithdrawAccount.deserialize(reader))
                            );
                            break;
                        case 7:
                            message.created_at = reader.readInt64();
                            break;
                        case 8:
                            message.updated_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WithdrawRecord {
                return WithdrawRecord.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          records?: WithdrawRecordsRespV2.WithdrawRecord[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WithdrawRecordsRespV2.WithdrawRecord,
                    2
                ) as WithdrawRecordsRespV2.WithdrawRecord[];
            }
            set records(value: WithdrawRecordsRespV2.WithdrawRecord[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                records?: ReturnType<
                    typeof WithdrawRecordsRespV2.WithdrawRecord.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        WithdrawRecordsRespV2.WithdrawRecord.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    records?: ReturnType<
                        typeof WithdrawRecordsRespV2.WithdrawRecord.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.records != null) {
                    data.records = this.records.map((item: WithdrawRecordsRespV2.WithdrawRecord) =>
                        item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.records,
                        (item: WithdrawRecordsRespV2.WithdrawRecord) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    WithdrawRecordsRespV2.WithdrawRecord.deserialize(reader),
                                    WithdrawRecordsRespV2.WithdrawRecord
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      获取提现所有可用银行
       withdraw/banks/
       **/
    export class WithdrawBanksReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): WithdrawBanksReq {
            const message = new WithdrawBanksReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBanksReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBanksReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBanksReq {
            return WithdrawBanksReq.deserialize(bytes);
        }
    }
    export class WithdrawBanksResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WithdrawBanksResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WithdrawBanksResp.RespData,
                2
            ) as WithdrawBanksResp.RespData;
        }
        set data(value: WithdrawBanksResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WithdrawBanksResp.RespData.prototype.toObject>;
        }): WithdrawBanksResp {
            const message = new WithdrawBanksResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WithdrawBanksResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WithdrawBanksResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBanksResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WithdrawBanksResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = WithdrawBanksResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBanksResp {
            return WithdrawBanksResp.deserialize(bytes);
        }
    }
    export namespace WithdrawBanksResp {
        export class Bank extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          code?: string;
                          name?: string;
                          icon?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("icon" in data && data.icon != undefined) {
                        this.icon = data.icon;
                    }
                }
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get icon() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set icon(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: { code?: string; name?: string; icon?: number }): Bank {
                const message = new Bank({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.icon != null) {
                    message.icon = data.icon;
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: string;
                    name?: string;
                    icon?: number;
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.icon != null) {
                    data.icon = this.icon;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code.length) writer.writeString(1, this.code);
                if (this.name.length) writer.writeString(2, this.name);
                if (this.icon != 0) writer.writeInt32(3, this.icon);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Bank();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readString();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.icon = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Bank {
                return Bank.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          banks?: WithdrawBanksResp.Bank[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("banks" in data && data.banks != undefined) {
                        this.banks = data.banks;
                    }
                }
            }
            get banks() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WithdrawBanksResp.Bank,
                    1
                ) as WithdrawBanksResp.Bank[];
            }
            set banks(value: WithdrawBanksResp.Bank[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                banks?: ReturnType<typeof WithdrawBanksResp.Bank.prototype.toObject>[];
            }): RespData {
                const message = new RespData({});
                if (data.banks != null) {
                    message.banks = data.banks.map((item) =>
                        WithdrawBanksResp.Bank.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    banks?: ReturnType<typeof WithdrawBanksResp.Bank.prototype.toObject>[];
                } = {};
                if (this.banks != null) {
                    data.banks = this.banks.map((item: WithdrawBanksResp.Bank) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.banks.length)
                    writer.writeRepeatedMessage(1, this.banks, (item: WithdrawBanksResp.Bank) =>
                        item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.banks, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    WithdrawBanksResp.Bank.deserialize(reader),
                                    WithdrawBanksResp.Bank
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      /////////////////////////
       存入保险箱
       safebox/put_in/
       error code: 501 账户余额不足
       **/
    export class SafeboxPutInReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      amount?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            amount?: number;
        }): SafeboxPutInReq {
            const message = new SafeboxPutInReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                amount?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.amount != 0) writer.writeUint64(2, this.amount);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxPutInReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SafeboxPutInReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.amount = reader.readUint64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SafeboxPutInReq {
            return SafeboxPutInReq.deserialize(bytes);
        }
    }
    export class SafeboxPutInResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: SafeboxPutInResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                SafeboxPutInResp.RespData,
                2
            ) as SafeboxPutInResp.RespData;
        }
        set data(value: SafeboxPutInResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof SafeboxPutInResp.RespData.prototype.toObject>;
        }): SafeboxPutInResp {
            const message = new SafeboxPutInResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = SafeboxPutInResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof SafeboxPutInResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxPutInResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SafeboxPutInResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = SafeboxPutInResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SafeboxPutInResp {
            return SafeboxPutInResp.deserialize(bytes);
        }
    }
    export namespace SafeboxPutInResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          credit?: number;
                          safe_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credit" in data && data.credit != undefined) {
                        this.credit = data.credit;
                    }
                    if ("safe_amount" in data && data.safe_amount != undefined) {
                        this.safe_amount = data.safe_amount;
                    }
                }
            }
            get credit() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set credit(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get safe_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set safe_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { credit?: number; safe_amount?: number }): RespData {
                const message = new RespData({});
                if (data.credit != null) {
                    message.credit = data.credit;
                }
                if (data.safe_amount != null) {
                    message.safe_amount = data.safe_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    credit?: number;
                    safe_amount?: number;
                } = {};
                if (this.credit != null) {
                    data.credit = this.credit;
                }
                if (this.safe_amount != null) {
                    data.safe_amount = this.safe_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credit != 0) writer.writeInt64(1, this.credit);
                if (this.safe_amount != 0) writer.writeInt64(2, this.safe_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credit = reader.readInt64();
                            break;
                        case 2:
                            message.safe_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      从保险箱取出
       safebox/take_out/
       error code: 501 保险箱余额不足
       **/
    export class SafeboxTakeOutReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      amount?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            amount?: number;
        }): SafeboxTakeOutReq {
            const message = new SafeboxTakeOutReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                amount?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.amount != 0) writer.writeUint64(2, this.amount);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxTakeOutReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SafeboxTakeOutReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.amount = reader.readUint64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SafeboxTakeOutReq {
            return SafeboxTakeOutReq.deserialize(bytes);
        }
    }
    export class SafeboxTakeOutResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: SafeboxTakeOutResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                SafeboxTakeOutResp.RespData,
                2
            ) as SafeboxTakeOutResp.RespData;
        }
        set data(value: SafeboxTakeOutResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof SafeboxTakeOutResp.RespData.prototype.toObject>;
        }): SafeboxTakeOutResp {
            const message = new SafeboxTakeOutResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = SafeboxTakeOutResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof SafeboxTakeOutResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxTakeOutResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SafeboxTakeOutResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = SafeboxTakeOutResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SafeboxTakeOutResp {
            return SafeboxTakeOutResp.deserialize(bytes);
        }
    }
    export namespace SafeboxTakeOutResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          credit?: number;
                          safe_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("credit" in data && data.credit != undefined) {
                        this.credit = data.credit;
                    }
                    if ("safe_amount" in data && data.safe_amount != undefined) {
                        this.safe_amount = data.safe_amount;
                    }
                }
            }
            get credit() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set credit(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get safe_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set safe_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { credit?: number; safe_amount?: number }): RespData {
                const message = new RespData({});
                if (data.credit != null) {
                    message.credit = data.credit;
                }
                if (data.safe_amount != null) {
                    message.safe_amount = data.safe_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    credit?: number;
                    safe_amount?: number;
                } = {};
                if (this.credit != null) {
                    data.credit = this.credit;
                }
                if (this.safe_amount != null) {
                    data.safe_amount = this.safe_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.credit != 0) writer.writeInt64(1, this.credit);
                if (this.safe_amount != 0) writer.writeInt64(2, this.safe_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.credit = reader.readInt64();
                            break;
                        case 2:
                            message.safe_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      mail/pull/
       **/
    export class MailPullReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      cursor_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("cursor_id" in data && data.cursor_id != undefined) {
                    this.cursor_id = data.cursor_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          本地缓存最后一封邮件mail_id
           **/
        get cursor_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          本地缓存最后一封邮件mail_id
           **/
        set cursor_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            cursor_id?: string;
        }): MailPullReq {
            const message = new MailPullReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.cursor_id != null) {
                message.cursor_id = data.cursor_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                cursor_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.cursor_id != null) {
                data.cursor_id = this.cursor_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.cursor_id.length) writer.writeString(2, this.cursor_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailPullReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailPullReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.cursor_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailPullReq {
            return MailPullReq.deserialize(bytes);
        }
    }
    export class MailPullResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: MailPullResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                MailPullResp.RespData,
                2
            ) as MailPullResp.RespData;
        }
        set data(value: MailPullResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof MailPullResp.RespData.prototype.toObject>;
        }): MailPullResp {
            const message = new MailPullResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = MailPullResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof MailPullResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailPullResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailPullResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = MailPullResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailPullResp {
            return MailPullResp.deserialize(bytes);
        }
    }
    export namespace MailPullResp {
        export class Mail extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          mail_id?: string;
                          title?: string;
                          text?: string;
                          picture?: string;
                          accepted?: boolean;
                          checked?: boolean;
                          expired_at?: number;
                          recv_time?: number;
                          now_ts?: number;
                          annex_type?: number;
                          annex_count?: string;
                          contact_type?: MailContactType;
                          contact_no?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("mail_id" in data && data.mail_id != undefined) {
                        this.mail_id = data.mail_id;
                    }
                    if ("title" in data && data.title != undefined) {
                        this.title = data.title;
                    }
                    if ("text" in data && data.text != undefined) {
                        this.text = data.text;
                    }
                    if ("picture" in data && data.picture != undefined) {
                        this.picture = data.picture;
                    }
                    if ("accepted" in data && data.accepted != undefined) {
                        this.accepted = data.accepted;
                    }
                    if ("checked" in data && data.checked != undefined) {
                        this.checked = data.checked;
                    }
                    if ("expired_at" in data && data.expired_at != undefined) {
                        this.expired_at = data.expired_at;
                    }
                    if ("recv_time" in data && data.recv_time != undefined) {
                        this.recv_time = data.recv_time;
                    }
                    if ("now_ts" in data && data.now_ts != undefined) {
                        this.now_ts = data.now_ts;
                    }
                    if ("annex_type" in data && data.annex_type != undefined) {
                        this.annex_type = data.annex_type;
                    }
                    if ("annex_count" in data && data.annex_count != undefined) {
                        this.annex_count = data.annex_count;
                    }
                    if ("contact_type" in data && data.contact_type != undefined) {
                        this.contact_type = data.contact_type;
                    }
                    if ("contact_no" in data && data.contact_no != undefined) {
                        this.contact_no = data.contact_no;
                    }
                }
            }
            get mail_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set mail_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get title() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set title(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get text() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set text(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get picture() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set picture(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get accepted() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set accepted(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get checked() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set checked(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get expired_at() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set expired_at(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get recv_time() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set recv_time(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get now_ts() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set now_ts(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get annex_type() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set annex_type(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get annex_count() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set annex_count(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get contact_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    12,
                    MailContactType.MCT_DEFAULT
                ) as MailContactType;
            }
            set contact_type(value: MailContactType) {
                pb_1.Message.setField(this, 12, value);
            }
            get contact_no() {
                return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
            }
            set contact_no(value: string) {
                pb_1.Message.setField(this, 13, value);
            }
            static fromObject(data: {
                mail_id?: string;
                title?: string;
                text?: string;
                picture?: string;
                accepted?: boolean;
                checked?: boolean;
                expired_at?: number;
                recv_time?: number;
                now_ts?: number;
                annex_type?: number;
                annex_count?: string;
                contact_type?: MailContactType;
                contact_no?: string;
            }): Mail {
                const message = new Mail({});
                if (data.mail_id != null) {
                    message.mail_id = data.mail_id;
                }
                if (data.title != null) {
                    message.title = data.title;
                }
                if (data.text != null) {
                    message.text = data.text;
                }
                if (data.picture != null) {
                    message.picture = data.picture;
                }
                if (data.accepted != null) {
                    message.accepted = data.accepted;
                }
                if (data.checked != null) {
                    message.checked = data.checked;
                }
                if (data.expired_at != null) {
                    message.expired_at = data.expired_at;
                }
                if (data.recv_time != null) {
                    message.recv_time = data.recv_time;
                }
                if (data.now_ts != null) {
                    message.now_ts = data.now_ts;
                }
                if (data.annex_type != null) {
                    message.annex_type = data.annex_type;
                }
                if (data.annex_count != null) {
                    message.annex_count = data.annex_count;
                }
                if (data.contact_type != null) {
                    message.contact_type = data.contact_type;
                }
                if (data.contact_no != null) {
                    message.contact_no = data.contact_no;
                }
                return message;
            }
            toObject() {
                const data: {
                    mail_id?: string;
                    title?: string;
                    text?: string;
                    picture?: string;
                    accepted?: boolean;
                    checked?: boolean;
                    expired_at?: number;
                    recv_time?: number;
                    now_ts?: number;
                    annex_type?: number;
                    annex_count?: string;
                    contact_type?: MailContactType;
                    contact_no?: string;
                } = {};
                if (this.mail_id != null) {
                    data.mail_id = this.mail_id;
                }
                if (this.title != null) {
                    data.title = this.title;
                }
                if (this.text != null) {
                    data.text = this.text;
                }
                if (this.picture != null) {
                    data.picture = this.picture;
                }
                if (this.accepted != null) {
                    data.accepted = this.accepted;
                }
                if (this.checked != null) {
                    data.checked = this.checked;
                }
                if (this.expired_at != null) {
                    data.expired_at = this.expired_at;
                }
                if (this.recv_time != null) {
                    data.recv_time = this.recv_time;
                }
                if (this.now_ts != null) {
                    data.now_ts = this.now_ts;
                }
                if (this.annex_type != null) {
                    data.annex_type = this.annex_type;
                }
                if (this.annex_count != null) {
                    data.annex_count = this.annex_count;
                }
                if (this.contact_type != null) {
                    data.contact_type = this.contact_type;
                }
                if (this.contact_no != null) {
                    data.contact_no = this.contact_no;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.mail_id.length) writer.writeString(1, this.mail_id);
                if (this.title.length) writer.writeString(2, this.title);
                if (this.text.length) writer.writeString(3, this.text);
                if (this.picture.length) writer.writeString(4, this.picture);
                if (this.accepted != false) writer.writeBool(5, this.accepted);
                if (this.checked != false) writer.writeBool(6, this.checked);
                if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);
                if (this.recv_time != 0) writer.writeInt64(8, this.recv_time);
                if (this.now_ts != 0) writer.writeInt64(9, this.now_ts);
                if (this.annex_type != 0) writer.writeInt32(10, this.annex_type);
                if (this.annex_count.length) writer.writeString(11, this.annex_count);
                if (this.contact_type != MailContactType.MCT_DEFAULT)
                    writer.writeEnum(12, this.contact_type);
                if (this.contact_no.length) writer.writeString(13, this.contact_no);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mail {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Mail();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.mail_id = reader.readString();
                            break;
                        case 2:
                            message.title = reader.readString();
                            break;
                        case 3:
                            message.text = reader.readString();
                            break;
                        case 4:
                            message.picture = reader.readString();
                            break;
                        case 5:
                            message.accepted = reader.readBool();
                            break;
                        case 6:
                            message.checked = reader.readBool();
                            break;
                        case 7:
                            message.expired_at = reader.readInt64();
                            break;
                        case 8:
                            message.recv_time = reader.readInt64();
                            break;
                        case 9:
                            message.now_ts = reader.readInt64();
                            break;
                        case 10:
                            message.annex_type = reader.readInt32();
                            break;
                        case 11:
                            message.annex_count = reader.readString();
                            break;
                        case 12:
                            message.contact_type = reader.readEnum();
                            break;
                        case 13:
                            message.contact_no = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Mail {
                return Mail.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          mails?: MailPullResp.Mail[];
                          del_mails?: string[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1, 2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("mails" in data && data.mails != undefined) {
                        this.mails = data.mails;
                    }
                    if ("del_mails" in data && data.del_mails != undefined) {
                        this.del_mails = data.del_mails;
                    }
                }
            }
            get mails() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    MailPullResp.Mail,
                    1
                ) as MailPullResp.Mail[];
            }
            set mails(value: MailPullResp.Mail[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get del_mails() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set del_mails(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                mails?: ReturnType<typeof MailPullResp.Mail.prototype.toObject>[];
                del_mails?: string[];
            }): RespData {
                const message = new RespData({});
                if (data.mails != null) {
                    message.mails = data.mails.map((item) => MailPullResp.Mail.fromObject(item));
                }
                if (data.del_mails != null) {
                    message.del_mails = data.del_mails;
                }
                return message;
            }
            toObject() {
                const data: {
                    mails?: ReturnType<typeof MailPullResp.Mail.prototype.toObject>[];
                    del_mails?: string[];
                } = {};
                if (this.mails != null) {
                    data.mails = this.mails.map((item: MailPullResp.Mail) => item.toObject());
                }
                if (this.del_mails != null) {
                    data.del_mails = this.del_mails;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.mails.length)
                    writer.writeRepeatedMessage(1, this.mails, (item: MailPullResp.Mail) =>
                        item.serialize(writer)
                    );
                if (this.del_mails.length) writer.writeRepeatedString(2, this.del_mails);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.mails, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    MailPullResp.Mail.deserialize(reader),
                                    MailPullResp.Mail
                                )
                            );
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      mail/accept/
       error code: 300 附件已领取
       error code: 300 邮件已过期
       **/
    export class MailAcceptReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      mail_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("mail_id" in data && data.mail_id != undefined) {
                    this.mail_id = data.mail_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get mail_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mail_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            mail_id?: string;
        }): MailAcceptReq {
            const message = new MailAcceptReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.mail_id != null) {
                message.mail_id = data.mail_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                mail_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.mail_id != null) {
                data.mail_id = this.mail_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.mail_id.length) writer.writeString(2, this.mail_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailAcceptReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailAcceptReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.mail_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailAcceptReq {
            return MailAcceptReq.deserialize(bytes);
        }
    }
    export class MailAcceptResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: MailAcceptResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                MailAcceptResp.RespData,
                2
            ) as MailAcceptResp.RespData;
        }
        set data(value: MailAcceptResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof MailAcceptResp.RespData.prototype.toObject>;
        }): MailAcceptResp {
            const message = new MailAcceptResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = MailAcceptResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof MailAcceptResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailAcceptResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailAcceptResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = MailAcceptResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailAcceptResp {
            return MailAcceptResp.deserialize(bytes);
        }
    }
    export namespace MailAcceptResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          annex_type?: number;
                          annex_count?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("annex_type" in data && data.annex_type != undefined) {
                        this.annex_type = data.annex_type;
                    }
                    if ("annex_count" in data && data.annex_count != undefined) {
                        this.annex_count = data.annex_count;
                    }
                }
            }

            /** 
              is props_id
               **/
            get annex_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              is props_id
               **/
            set annex_type(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get annex_count() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set annex_count(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { annex_type?: number; annex_count?: string }): RespData {
                const message = new RespData({});
                if (data.annex_type != null) {
                    message.annex_type = data.annex_type;
                }
                if (data.annex_count != null) {
                    message.annex_count = data.annex_count;
                }
                return message;
            }
            toObject() {
                const data: {
                    annex_type?: number;
                    annex_count?: string;
                } = {};
                if (this.annex_type != null) {
                    data.annex_type = this.annex_type;
                }
                if (this.annex_count != null) {
                    data.annex_count = this.annex_count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.annex_type != 0) writer.writeInt32(1, this.annex_type);
                if (this.annex_count.length) writer.writeString(2, this.annex_count);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.annex_type = reader.readInt32();
                            break;
                        case 2:
                            message.annex_count = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      mail/delete_all/
       **/
    export class MailDelAllReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): MailDelAllReq {
            const message = new MailDelAllReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDelAllReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailDelAllReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailDelAllReq {
            return MailDelAllReq.deserialize(bytes);
        }
    }
    export class MailDelAllResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): MailDelAllResp {
            const message = new MailDelAllResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDelAllResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailDelAllResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailDelAllResp {
            return MailDelAllResp.deserialize(bytes);
        }
    }

    /** 
      mail/check/
       **/
    export class MailCheckReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      mail_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("mail_id" in data && data.mail_id != undefined) {
                    this.mail_id = data.mail_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get mail_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mail_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            mail_id?: string;
        }): MailCheckReq {
            const message = new MailCheckReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.mail_id != null) {
                message.mail_id = data.mail_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                mail_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.mail_id != null) {
                data.mail_id = this.mail_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.mail_id.length) writer.writeString(2, this.mail_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailCheckReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailCheckReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.mail_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailCheckReq {
            return MailCheckReq.deserialize(bytes);
        }
    }
    export class MailCheckResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): MailCheckResp {
            const message = new MailCheckResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailCheckResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailCheckResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailCheckResp {
            return MailCheckResp.deserialize(bytes);
        }
    }

    /** 
      mail/delete/
       **/
    export class MailDeleteReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      mail_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("mail_id" in data && data.mail_id != undefined) {
                    this.mail_id = data.mail_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get mail_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mail_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            mail_id?: string;
        }): MailDeleteReq {
            const message = new MailDeleteReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.mail_id != null) {
                message.mail_id = data.mail_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                mail_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.mail_id != null) {
                data.mail_id = this.mail_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.mail_id.length) writer.writeString(2, this.mail_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDeleteReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailDeleteReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.mail_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailDeleteReq {
            return MailDeleteReq.deserialize(bytes);
        }
    }
    export class MailDeleteResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): MailDeleteResp {
            const message = new MailDeleteResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDeleteResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MailDeleteResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailDeleteResp {
            return MailDeleteResp.deserialize(bytes);
        }
    }

    /** 
      vip 配置
       act/vip_bonus/conf
       **/
    export class VipBonusConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): VipBonusConfReq {
            const message = new VipBonusConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusConfReq {
            return VipBonusConfReq.deserialize(bytes);
        }
    }
    export class VipBonusConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: VipBonusConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                VipBonusConfResp.RespData,
                2
            ) as VipBonusConfResp.RespData;
        }
        set data(value: VipBonusConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof VipBonusConfResp.RespData.prototype.toObject>;
        }): VipBonusConfResp {
            const message = new VipBonusConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = VipBonusConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof VipBonusConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = VipBonusConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusConfResp {
            return VipBonusConfResp.deserialize(bytes);
        }
    }
    export namespace VipBonusConfResp {
        export class PropsBonus extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          props_id?: number;
                          need_level?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("props_id" in data && data.props_id != undefined) {
                        this.props_id = data.props_id;
                    }
                    if ("need_level" in data && data.need_level != undefined) {
                        this.need_level = data.need_level;
                    }
                }
            }
            get props_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set props_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get need_level() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set need_level(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { props_id?: number; need_level?: number }): PropsBonus {
                const message = new PropsBonus({});
                if (data.props_id != null) {
                    message.props_id = data.props_id;
                }
                if (data.need_level != null) {
                    message.need_level = data.need_level;
                }
                return message;
            }
            toObject() {
                const data: {
                    props_id?: number;
                    need_level?: number;
                } = {};
                if (this.props_id != null) {
                    data.props_id = this.props_id;
                }
                if (this.need_level != null) {
                    data.need_level = this.need_level;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.props_id != 0) writer.writeInt32(1, this.props_id);
                if (this.need_level != 0) writer.writeInt32(2, this.need_level);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsBonus {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new PropsBonus();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.props_id = reader.readInt32();
                            break;
                        case 2:
                            message.need_level = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PropsBonus {
                return PropsBonus.deserialize(bytes);
            }
        }
        export class LevelBonusAmountCfg extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          reach_amount?: number;
                          up_award_count?: string;
                          feedback_award_count?: string;
                          free_award_count?: string;
                          birthday_award_count?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("reach_amount" in data && data.reach_amount != undefined) {
                        this.reach_amount = data.reach_amount;
                    }
                    if ("up_award_count" in data && data.up_award_count != undefined) {
                        this.up_award_count = data.up_award_count;
                    }
                    if ("feedback_award_count" in data && data.feedback_award_count != undefined) {
                        this.feedback_award_count = data.feedback_award_count;
                    }
                    if ("free_award_count" in data && data.free_award_count != undefined) {
                        this.free_award_count = data.free_award_count;
                    }
                    if ("birthday_award_count" in data && data.birthday_award_count != undefined) {
                        this.birthday_award_count = data.birthday_award_count;
                    }
                }
            }
            get reach_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set reach_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get up_award_count() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set up_award_count(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get feedback_award_count() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set feedback_award_count(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get free_award_count() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set free_award_count(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get birthday_award_count() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set birthday_award_count(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                reach_amount?: number;
                up_award_count?: string;
                feedback_award_count?: string;
                free_award_count?: string;
                birthday_award_count?: string;
            }): LevelBonusAmountCfg {
                const message = new LevelBonusAmountCfg({});
                if (data.reach_amount != null) {
                    message.reach_amount = data.reach_amount;
                }
                if (data.up_award_count != null) {
                    message.up_award_count = data.up_award_count;
                }
                if (data.feedback_award_count != null) {
                    message.feedback_award_count = data.feedback_award_count;
                }
                if (data.free_award_count != null) {
                    message.free_award_count = data.free_award_count;
                }
                if (data.birthday_award_count != null) {
                    message.birthday_award_count = data.birthday_award_count;
                }
                return message;
            }
            toObject() {
                const data: {
                    reach_amount?: number;
                    up_award_count?: string;
                    feedback_award_count?: string;
                    free_award_count?: string;
                    birthday_award_count?: string;
                } = {};
                if (this.reach_amount != null) {
                    data.reach_amount = this.reach_amount;
                }
                if (this.up_award_count != null) {
                    data.up_award_count = this.up_award_count;
                }
                if (this.feedback_award_count != null) {
                    data.feedback_award_count = this.feedback_award_count;
                }
                if (this.free_award_count != null) {
                    data.free_award_count = this.free_award_count;
                }
                if (this.birthday_award_count != null) {
                    data.birthday_award_count = this.birthday_award_count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.reach_amount != 0) writer.writeInt64(1, this.reach_amount);
                if (this.up_award_count.length) writer.writeString(2, this.up_award_count);
                if (this.feedback_award_count.length)
                    writer.writeString(3, this.feedback_award_count);
                if (this.free_award_count.length) writer.writeString(4, this.free_award_count);
                if (this.birthday_award_count.length)
                    writer.writeString(5, this.birthday_award_count);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelBonusAmountCfg {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new LevelBonusAmountCfg();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.reach_amount = reader.readInt64();
                            break;
                        case 2:
                            message.up_award_count = reader.readString();
                            break;
                        case 3:
                            message.feedback_award_count = reader.readString();
                            break;
                        case 4:
                            message.free_award_count = reader.readString();
                            break;
                        case 5:
                            message.birthday_award_count = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LevelBonusAmountCfg {
                return LevelBonusAmountCfg.deserialize(bytes);
            }
        }
        export class BonusDescription extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          bonus_type?: number;
                          title?: string;
                          distribute_description?: string;
                          tips_description?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("bonus_type" in data && data.bonus_type != undefined) {
                        this.bonus_type = data.bonus_type;
                    }
                    if ("title" in data && data.title != undefined) {
                        this.title = data.title;
                    }
                    if (
                        "distribute_description" in data &&
                        data.distribute_description != undefined
                    ) {
                        this.distribute_description = data.distribute_description;
                    }
                    if ("tips_description" in data && data.tips_description != undefined) {
                        this.tips_description = data.tips_description;
                    }
                }
            }
            get bonus_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set bonus_type(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get title() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set title(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get distribute_description() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set distribute_description(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get tips_description() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set tips_description(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                bonus_type?: number;
                title?: string;
                distribute_description?: string;
                tips_description?: string;
            }): BonusDescription {
                const message = new BonusDescription({});
                if (data.bonus_type != null) {
                    message.bonus_type = data.bonus_type;
                }
                if (data.title != null) {
                    message.title = data.title;
                }
                if (data.distribute_description != null) {
                    message.distribute_description = data.distribute_description;
                }
                if (data.tips_description != null) {
                    message.tips_description = data.tips_description;
                }
                return message;
            }
            toObject() {
                const data: {
                    bonus_type?: number;
                    title?: string;
                    distribute_description?: string;
                    tips_description?: string;
                } = {};
                if (this.bonus_type != null) {
                    data.bonus_type = this.bonus_type;
                }
                if (this.title != null) {
                    data.title = this.title;
                }
                if (this.distribute_description != null) {
                    data.distribute_description = this.distribute_description;
                }
                if (this.tips_description != null) {
                    data.tips_description = this.tips_description;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.bonus_type != 0) writer.writeInt32(1, this.bonus_type);
                if (this.title.length) writer.writeString(2, this.title);
                if (this.distribute_description.length)
                    writer.writeString(3, this.distribute_description);
                if (this.tips_description.length) writer.writeString(4, this.tips_description);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusDescription {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new BonusDescription();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.bonus_type = reader.readInt32();
                            break;
                        case 2:
                            message.title = reader.readString();
                            break;
                        case 3:
                            message.distribute_description = reader.readString();
                            break;
                        case 4:
                            message.tips_description = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BonusDescription {
                return BonusDescription.deserialize(bytes);
            }
        }
        export class LevelInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          level?: number;
                          amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set level(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { level?: number; amount?: number }): LevelInfo {
                const message = new LevelInfo({});
                if (data.level != null) {
                    message.level = data.level;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    level?: number;
                    amount?: number;
                } = {};
                if (this.level != null) {
                    data.level = this.level;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.level != 0) writer.writeInt32(1, this.level);
                if (this.amount != 0) writer.writeInt64(2, this.amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new LevelInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.level = reader.readInt32();
                            break;
                        case 2:
                            message.amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LevelInfo {
                return LevelInfo.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          props_bonus?: VipBonusConfResp.PropsBonus;
                          level_bonus_amount_cfgs?: VipBonusConfResp.LevelBonusAmountCfg[];
                          bonus_descriptions?: VipBonusConfResp.BonusDescription[];
                          current_level_info?: VipBonusConfResp.LevelInfo;
                          last_month_level?: number;
                          last_three_months_count?: string;
                          birthday?: string;
                          level_description?: string;
                          kind_tips?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2, 3],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("props_bonus" in data && data.props_bonus != undefined) {
                        this.props_bonus = data.props_bonus;
                    }
                    if (
                        "level_bonus_amount_cfgs" in data &&
                        data.level_bonus_amount_cfgs != undefined
                    ) {
                        this.level_bonus_amount_cfgs = data.level_bonus_amount_cfgs;
                    }
                    if ("bonus_descriptions" in data && data.bonus_descriptions != undefined) {
                        this.bonus_descriptions = data.bonus_descriptions;
                    }
                    if ("current_level_info" in data && data.current_level_info != undefined) {
                        this.current_level_info = data.current_level_info;
                    }
                    if ("last_month_level" in data && data.last_month_level != undefined) {
                        this.last_month_level = data.last_month_level;
                    }
                    if (
                        "last_three_months_count" in data &&
                        data.last_three_months_count != undefined
                    ) {
                        this.last_three_months_count = data.last_three_months_count;
                    }
                    if ("birthday" in data && data.birthday != undefined) {
                        this.birthday = data.birthday;
                    }
                    if ("level_description" in data && data.level_description != undefined) {
                        this.level_description = data.level_description;
                    }
                    if ("kind_tips" in data && data.kind_tips != undefined) {
                        this.kind_tips = data.kind_tips;
                    }
                }
            }
            get props_bonus() {
                return pb_1.Message.getWrapperField(
                    this,
                    VipBonusConfResp.PropsBonus,
                    1
                ) as VipBonusConfResp.PropsBonus;
            }
            set props_bonus(value: VipBonusConfResp.PropsBonus) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_props_bonus() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get level_bonus_amount_cfgs() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    VipBonusConfResp.LevelBonusAmountCfg,
                    2
                ) as VipBonusConfResp.LevelBonusAmountCfg[];
            }
            set level_bonus_amount_cfgs(value: VipBonusConfResp.LevelBonusAmountCfg[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get bonus_descriptions() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    VipBonusConfResp.BonusDescription,
                    3
                ) as VipBonusConfResp.BonusDescription[];
            }
            set bonus_descriptions(value: VipBonusConfResp.BonusDescription[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get current_level_info() {
                return pb_1.Message.getWrapperField(
                    this,
                    VipBonusConfResp.LevelInfo,
                    4
                ) as VipBonusConfResp.LevelInfo;
            }
            set current_level_info(value: VipBonusConfResp.LevelInfo) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_current_level_info() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get last_month_level() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set last_month_level(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get last_three_months_count() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set last_three_months_count(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get birthday() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set birthday(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get level_description() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set level_description(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get kind_tips() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set kind_tips(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data: {
                props_bonus?: ReturnType<typeof VipBonusConfResp.PropsBonus.prototype.toObject>;
                level_bonus_amount_cfgs?: ReturnType<
                    typeof VipBonusConfResp.LevelBonusAmountCfg.prototype.toObject
                >[];
                bonus_descriptions?: ReturnType<
                    typeof VipBonusConfResp.BonusDescription.prototype.toObject
                >[];
                current_level_info?: ReturnType<
                    typeof VipBonusConfResp.LevelInfo.prototype.toObject
                >;
                last_month_level?: number;
                last_three_months_count?: string;
                birthday?: string;
                level_description?: string;
                kind_tips?: string;
            }): RespData {
                const message = new RespData({});
                if (data.props_bonus != null) {
                    message.props_bonus = VipBonusConfResp.PropsBonus.fromObject(data.props_bonus);
                }
                if (data.level_bonus_amount_cfgs != null) {
                    message.level_bonus_amount_cfgs = data.level_bonus_amount_cfgs.map((item) =>
                        VipBonusConfResp.LevelBonusAmountCfg.fromObject(item)
                    );
                }
                if (data.bonus_descriptions != null) {
                    message.bonus_descriptions = data.bonus_descriptions.map((item) =>
                        VipBonusConfResp.BonusDescription.fromObject(item)
                    );
                }
                if (data.current_level_info != null) {
                    message.current_level_info = VipBonusConfResp.LevelInfo.fromObject(
                        data.current_level_info
                    );
                }
                if (data.last_month_level != null) {
                    message.last_month_level = data.last_month_level;
                }
                if (data.last_three_months_count != null) {
                    message.last_three_months_count = data.last_three_months_count;
                }
                if (data.birthday != null) {
                    message.birthday = data.birthday;
                }
                if (data.level_description != null) {
                    message.level_description = data.level_description;
                }
                if (data.kind_tips != null) {
                    message.kind_tips = data.kind_tips;
                }
                return message;
            }
            toObject() {
                const data: {
                    props_bonus?: ReturnType<typeof VipBonusConfResp.PropsBonus.prototype.toObject>;
                    level_bonus_amount_cfgs?: ReturnType<
                        typeof VipBonusConfResp.LevelBonusAmountCfg.prototype.toObject
                    >[];
                    bonus_descriptions?: ReturnType<
                        typeof VipBonusConfResp.BonusDescription.prototype.toObject
                    >[];
                    current_level_info?: ReturnType<
                        typeof VipBonusConfResp.LevelInfo.prototype.toObject
                    >;
                    last_month_level?: number;
                    last_three_months_count?: string;
                    birthday?: string;
                    level_description?: string;
                    kind_tips?: string;
                } = {};
                if (this.props_bonus != null) {
                    data.props_bonus = this.props_bonus.toObject();
                }
                if (this.level_bonus_amount_cfgs != null) {
                    data.level_bonus_amount_cfgs = this.level_bonus_amount_cfgs.map(
                        (item: VipBonusConfResp.LevelBonusAmountCfg) => item.toObject()
                    );
                }
                if (this.bonus_descriptions != null) {
                    data.bonus_descriptions = this.bonus_descriptions.map(
                        (item: VipBonusConfResp.BonusDescription) => item.toObject()
                    );
                }
                if (this.current_level_info != null) {
                    data.current_level_info = this.current_level_info.toObject();
                }
                if (this.last_month_level != null) {
                    data.last_month_level = this.last_month_level;
                }
                if (this.last_three_months_count != null) {
                    data.last_three_months_count = this.last_three_months_count;
                }
                if (this.birthday != null) {
                    data.birthday = this.birthday;
                }
                if (this.level_description != null) {
                    data.level_description = this.level_description;
                }
                if (this.kind_tips != null) {
                    data.kind_tips = this.kind_tips;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_props_bonus)
                    writer.writeMessage(1, this.props_bonus, () =>
                        this.props_bonus.serialize(writer)
                    );
                if (this.level_bonus_amount_cfgs.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.level_bonus_amount_cfgs,
                        (item: VipBonusConfResp.LevelBonusAmountCfg) => item.serialize(writer)
                    );
                if (this.bonus_descriptions.length)
                    writer.writeRepeatedMessage(
                        3,
                        this.bonus_descriptions,
                        (item: VipBonusConfResp.BonusDescription) => item.serialize(writer)
                    );
                if (this.has_current_level_info)
                    writer.writeMessage(4, this.current_level_info, () =>
                        this.current_level_info.serialize(writer)
                    );
                if (this.last_month_level != 0) writer.writeInt32(5, this.last_month_level);
                if (this.last_three_months_count.length)
                    writer.writeString(6, this.last_three_months_count);
                if (this.birthday.length) writer.writeString(7, this.birthday);
                if (this.level_description.length) writer.writeString(8, this.level_description);
                if (this.kind_tips.length) writer.writeString(9, this.kind_tips);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.props_bonus,
                                () =>
                                    (message.props_bonus =
                                        VipBonusConfResp.PropsBonus.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(message.level_bonus_amount_cfgs, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    VipBonusConfResp.LevelBonusAmountCfg.deserialize(reader),
                                    VipBonusConfResp.LevelBonusAmountCfg
                                )
                            );
                            break;
                        case 3:
                            reader.readMessage(message.bonus_descriptions, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    3,
                                    VipBonusConfResp.BonusDescription.deserialize(reader),
                                    VipBonusConfResp.BonusDescription
                                )
                            );
                            break;
                        case 4:
                            reader.readMessage(
                                message.current_level_info,
                                () =>
                                    (message.current_level_info =
                                        VipBonusConfResp.LevelInfo.deserialize(reader))
                            );
                            break;
                        case 5:
                            message.last_month_level = reader.readInt32();
                            break;
                        case 6:
                            message.last_three_months_count = reader.readString();
                            break;
                        case 7:
                            message.birthday = reader.readString();
                            break;
                        case 8:
                            message.level_description = reader.readString();
                            break;
                        case 9:
                            message.kind_tips = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      vip 生日设置
       act/vip_bonus/set_birthday
       **/
    export class VipBonusSetBirthdayReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      birthday?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("birthday" in data && data.birthday != undefined) {
                    this.birthday = data.birthday;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get birthday() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set birthday(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            birthday?: string;
        }): VipBonusSetBirthdayReq {
            const message = new VipBonusSetBirthdayReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.birthday != null) {
                message.birthday = data.birthday;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                birthday?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.birthday != null) {
                data.birthday = this.birthday;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.birthday.length) writer.writeString(2, this.birthday);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusSetBirthdayReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusSetBirthdayReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.birthday = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusSetBirthdayReq {
            return VipBonusSetBirthdayReq.deserialize(bytes);
        }
    }
    export class VipBonusSetBirthdayResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): VipBonusSetBirthdayResp {
            const message = new VipBonusSetBirthdayResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusSetBirthdayResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusSetBirthdayResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusSetBirthdayResp {
            return VipBonusSetBirthdayResp.deserialize(bytes);
        }
    }

    /** 
      vip 礼金发放记录
       act/vip_bonus/records
       **/
    export class VipBonusRecordsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      pc?: PaginationCriteria;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("pc" in data && data.pc != undefined) {
                    this.pc = data.pc;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pc() {
            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;
        }
        set pc(value: PaginationCriteria) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pc() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            pc?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
        }): VipBonusRecordsReq {
            const message = new VipBonusRecordsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.pc != null) {
                message.pc = PaginationCriteria.fromObject(data.pc);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                pc?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.pc != null) {
                data.pc = this.pc.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_pc) writer.writeMessage(2, this.pc, () => this.pc.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecordsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusRecordsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.pc,
                            () => (message.pc = PaginationCriteria.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusRecordsReq {
            return VipBonusRecordsReq.deserialize(bytes);
        }
    }
    export class VipBonusRecordsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: VipBonusRecordsResp.VipBonusRecords;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                VipBonusRecordsResp.VipBonusRecords,
                2
            ) as VipBonusRecordsResp.VipBonusRecords;
        }
        set data(value: VipBonusRecordsResp.VipBonusRecords) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof VipBonusRecordsResp.VipBonusRecords.prototype.toObject>;
        }): VipBonusRecordsResp {
            const message = new VipBonusRecordsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = VipBonusRecordsResp.VipBonusRecords.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof VipBonusRecordsResp.VipBonusRecords.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecordsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new VipBonusRecordsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    VipBonusRecordsResp.VipBonusRecords.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VipBonusRecordsResp {
            return VipBonusRecordsResp.deserialize(bytes);
        }
    }
    export namespace VipBonusRecordsResp {
        export class VipBonusRecords extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          records?: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[];
                          total?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                }
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord,
                    1
                ) as VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[];
            }
            set records(value: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set total(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                records?: ReturnType<
                    typeof VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.prototype.toObject
                >[];
                total?: number;
            }): VipBonusRecords {
                const message = new VipBonusRecords({});
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.fromObject(item)
                    );
                }
                if (data.total != null) {
                    message.total = data.total;
                }
                return message;
            }
            toObject() {
                const data: {
                    records?: ReturnType<
                        typeof VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.prototype.toObject
                    >[];
                    total?: number;
                } = {};
                if (this.records != null) {
                    data.records = this.records.map(
                        (item: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord) =>
                            item.toObject()
                    );
                }
                if (this.total != null) {
                    data.total = this.total;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.records,
                        (item: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord) =>
                            item.serialize(writer)
                    );
                if (this.total != 0) writer.writeInt32(2, this.total);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecords {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new VipBonusRecords();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.deserialize(
                                        reader
                                    ),
                                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord
                                )
                            );
                            break;
                        case 2:
                            message.total = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): VipBonusRecords {
                return VipBonusRecords.deserialize(bytes);
            }
        }
        export namespace VipBonusRecords {
            export class VipBonusRecord extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(
                    data?:
                        | any[]
                        | {
                              type?: number;
                              level?: number;
                              count?: string;
                              created_at?: number;
                          }
                ) {
                    super();
                    pb_1.Message.initialize(
                        this,
                        Array.isArray(data) ? data : [],
                        0,
                        -1,
                        [],
                        this.#one_of_decls
                    );
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("type" in data && data.type != undefined) {
                            this.type = data.type;
                        }
                        if ("level" in data && data.level != undefined) {
                            this.level = data.level;
                        }
                        if ("count" in data && data.count != undefined) {
                            this.count = data.count;
                        }
                        if ("created_at" in data && data.created_at != undefined) {
                            this.created_at = data.created_at;
                        }
                    }
                }
                get type() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set type(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get level() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set level(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get count() {
                    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
                }
                set count(value: string) {
                    pb_1.Message.setField(this, 3, value);
                }
                get created_at() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set created_at(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                static fromObject(data: {
                    type?: number;
                    level?: number;
                    count?: string;
                    created_at?: number;
                }): VipBonusRecord {
                    const message = new VipBonusRecord({});
                    if (data.type != null) {
                        message.type = data.type;
                    }
                    if (data.level != null) {
                        message.level = data.level;
                    }
                    if (data.count != null) {
                        message.count = data.count;
                    }
                    if (data.created_at != null) {
                        message.created_at = data.created_at;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        type?: number;
                        level?: number;
                        count?: string;
                        created_at?: number;
                    } = {};
                    if (this.type != null) {
                        data.type = this.type;
                    }
                    if (this.level != null) {
                        data.level = this.level;
                    }
                    if (this.count != null) {
                        data.count = this.count;
                    }
                    if (this.created_at != null) {
                        data.created_at = this.created_at;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.type != 0) writer.writeInt32(1, this.type);
                    if (this.level != 0) writer.writeInt32(2, this.level);
                    if (this.count.length) writer.writeString(3, this.count);
                    if (this.created_at != 0) writer.writeInt64(4, this.created_at);
                    if (!w) return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecord {
                    const reader =
                            bytes instanceof pb_1.BinaryReader
                                ? bytes
                                : new pb_1.BinaryReader(bytes),
                        message = new VipBonusRecord();
                    while (reader.nextField()) {
                        if (reader.isEndGroup()) break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.type = reader.readInt32();
                                break;
                            case 2:
                                message.level = reader.readInt32();
                                break;
                            case 3:
                                message.count = reader.readString();
                                break;
                            case 4:
                                message.created_at = reader.readInt64();
                                break;
                            default:
                                reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): VipBonusRecord {
                    return VipBonusRecord.deserialize(bytes);
                }
            }
        }
    }

    /** 
      公告/公告牌 msg/notice/pull/
       WARNING: 公告/公告牌，当 notice_type = 3 时，返回的是公告牌数据，否则返回的是活动+公告数据
       **/
    export class NoticePullReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      notice_type?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("notice_type" in data && data.notice_type != undefined) {
                    this.notice_type = data.notice_type;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get notice_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set notice_type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            notice_type?: number;
        }): NoticePullReq {
            const message = new NoticePullReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.notice_type != null) {
                message.notice_type = data.notice_type;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                notice_type?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.notice_type != null) {
                data.notice_type = this.notice_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.notice_type != 0) writer.writeInt32(2, this.notice_type);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoticePullReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NoticePullReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.notice_type = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoticePullReq {
            return NoticePullReq.deserialize(bytes);
        }
    }
    export class NoticePullResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: NoticePullResp.Notice[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                NoticePullResp.Notice,
                2
            ) as NoticePullResp.Notice[];
        }
        set data(value: NoticePullResp.Notice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof NoticePullResp.Notice.prototype.toObject>[];
        }): NoticePullResp {
            const message = new NoticePullResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) => NoticePullResp.Notice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof NoticePullResp.Notice.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: NoticePullResp.Notice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(2, this.data, (item: NoticePullResp.Notice) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoticePullResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NoticePullResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                NoticePullResp.Notice.deserialize(reader),
                                NoticePullResp.Notice
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoticePullResp {
            return NoticePullResp.deserialize(bytes);
        }
    }
    export namespace NoticePullResp {
        export class Notice extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: string;
                          notice_type?: number;
                          weight?: number;
                          display_type?: number;
                          jump_type?: number;
                          browser_type?: number;
                          browser_direction?: number;
                          tag_type?: number;
                          jump_url?: string;
                          title?: string;
                          content?: string;
                          picture?: string;
                          frequency?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("notice_type" in data && data.notice_type != undefined) {
                        this.notice_type = data.notice_type;
                    }
                    if ("weight" in data && data.weight != undefined) {
                        this.weight = data.weight;
                    }
                    if ("display_type" in data && data.display_type != undefined) {
                        this.display_type = data.display_type;
                    }
                    if ("jump_type" in data && data.jump_type != undefined) {
                        this.jump_type = data.jump_type;
                    }
                    if ("browser_type" in data && data.browser_type != undefined) {
                        this.browser_type = data.browser_type;
                    }
                    if ("browser_direction" in data && data.browser_direction != undefined) {
                        this.browser_direction = data.browser_direction;
                    }
                    if ("tag_type" in data && data.tag_type != undefined) {
                        this.tag_type = data.tag_type;
                    }
                    if ("jump_url" in data && data.jump_url != undefined) {
                        this.jump_url = data.jump_url;
                    }
                    if ("title" in data && data.title != undefined) {
                        this.title = data.title;
                    }
                    if ("content" in data && data.content != undefined) {
                        this.content = data.content;
                    }
                    if ("picture" in data && data.picture != undefined) {
                        this.picture = data.picture;
                    }
                    if ("frequency" in data && data.frequency != undefined) {
                        this.frequency = data.frequency;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              公告类型 1:活动 2:公告 3: 公告牌
               **/
            get notice_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              公告类型 1:活动 2:公告 3: 公告牌
               **/
            set notice_type(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              权重
               **/
            get weight() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              权重
               **/
            set weight(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              展示类型 1:文本 2:图片
               **/
            get display_type() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              展示类型 1:文本 2:图片
               **/
            set display_type(value: number) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              跳转类型 1:无跳转 2:复制 3:网页跳转 4:复制并打开官网 5:打开应用内页面 6:跳转公告 7: 保存至相册 8:跳转充值申诉 9:跳客服 10:跳提现申诉
               **/
            get jump_type() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }

            /** 
              跳转类型 1:无跳转 2:复制 3:网页跳转 4:复制并打开官网 5:打开应用内页面 6:跳转公告 7: 保存至相册 8:跳转充值申诉 9:跳客服 10:跳提现申诉
               **/
            set jump_type(value: number) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              浏览器类型 1:内置 2:外部
               **/
            get browser_type() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }

            /** 
              浏览器类型 1:内置 2:外部
               **/
            set browser_type(value: number) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              浏览器方向 1:水平 2:垂直
               **/
            get browser_direction() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }

            /** 
              浏览器方向 1:水平 2:垂直
               **/
            set browser_direction(value: number) {
                pb_1.Message.setField(this, 7, value);
            }

            /** 
              标签类型 1:普通 2:VIP 3:最新 4:最热
               **/
            get tag_type() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }

            /** 
              标签类型 1:普通 2:VIP 3:最新 4:最热
               **/
            set tag_type(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get jump_url() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set jump_url(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get title() {
                return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
            }
            set title(value: string) {
                pb_1.Message.setField(this, 10, value);
            }
            get content() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set content(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get picture() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set picture(value: string) {
                pb_1.Message.setField(this, 12, value);
            }

            /** 
              打脸频率 1:不打脸 2:每日一次 3:每日多次
               **/
            get frequency() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }

            /** 
              打脸频率 1:不打脸 2:每日一次 3:每日多次
               **/
            set frequency(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            static fromObject(data: {
                id?: string;
                notice_type?: number;
                weight?: number;
                display_type?: number;
                jump_type?: number;
                browser_type?: number;
                browser_direction?: number;
                tag_type?: number;
                jump_url?: string;
                title?: string;
                content?: string;
                picture?: string;
                frequency?: number;
            }): Notice {
                const message = new Notice({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.notice_type != null) {
                    message.notice_type = data.notice_type;
                }
                if (data.weight != null) {
                    message.weight = data.weight;
                }
                if (data.display_type != null) {
                    message.display_type = data.display_type;
                }
                if (data.jump_type != null) {
                    message.jump_type = data.jump_type;
                }
                if (data.browser_type != null) {
                    message.browser_type = data.browser_type;
                }
                if (data.browser_direction != null) {
                    message.browser_direction = data.browser_direction;
                }
                if (data.tag_type != null) {
                    message.tag_type = data.tag_type;
                }
                if (data.jump_url != null) {
                    message.jump_url = data.jump_url;
                }
                if (data.title != null) {
                    message.title = data.title;
                }
                if (data.content != null) {
                    message.content = data.content;
                }
                if (data.picture != null) {
                    message.picture = data.picture;
                }
                if (data.frequency != null) {
                    message.frequency = data.frequency;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    notice_type?: number;
                    weight?: number;
                    display_type?: number;
                    jump_type?: number;
                    browser_type?: number;
                    browser_direction?: number;
                    tag_type?: number;
                    jump_url?: string;
                    title?: string;
                    content?: string;
                    picture?: string;
                    frequency?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.notice_type != null) {
                    data.notice_type = this.notice_type;
                }
                if (this.weight != null) {
                    data.weight = this.weight;
                }
                if (this.display_type != null) {
                    data.display_type = this.display_type;
                }
                if (this.jump_type != null) {
                    data.jump_type = this.jump_type;
                }
                if (this.browser_type != null) {
                    data.browser_type = this.browser_type;
                }
                if (this.browser_direction != null) {
                    data.browser_direction = this.browser_direction;
                }
                if (this.tag_type != null) {
                    data.tag_type = this.tag_type;
                }
                if (this.jump_url != null) {
                    data.jump_url = this.jump_url;
                }
                if (this.title != null) {
                    data.title = this.title;
                }
                if (this.content != null) {
                    data.content = this.content;
                }
                if (this.picture != null) {
                    data.picture = this.picture;
                }
                if (this.frequency != null) {
                    data.frequency = this.frequency;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length) writer.writeString(1, this.id);
                if (this.notice_type != 0) writer.writeInt32(2, this.notice_type);
                if (this.weight != 0) writer.writeInt32(3, this.weight);
                if (this.display_type != 0) writer.writeInt32(4, this.display_type);
                if (this.jump_type != 0) writer.writeInt32(5, this.jump_type);
                if (this.browser_type != 0) writer.writeInt32(6, this.browser_type);
                if (this.browser_direction != 0) writer.writeInt32(7, this.browser_direction);
                if (this.tag_type != 0) writer.writeInt32(8, this.tag_type);
                if (this.jump_url.length) writer.writeString(9, this.jump_url);
                if (this.title.length) writer.writeString(10, this.title);
                if (this.content.length) writer.writeString(11, this.content);
                if (this.picture.length) writer.writeString(12, this.picture);
                if (this.frequency != 0) writer.writeInt32(13, this.frequency);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notice {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Notice();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.notice_type = reader.readInt32();
                            break;
                        case 3:
                            message.weight = reader.readInt32();
                            break;
                        case 4:
                            message.display_type = reader.readInt32();
                            break;
                        case 5:
                            message.jump_type = reader.readInt32();
                            break;
                        case 6:
                            message.browser_type = reader.readInt32();
                            break;
                        case 7:
                            message.browser_direction = reader.readInt32();
                            break;
                        case 8:
                            message.tag_type = reader.readInt32();
                            break;
                        case 9:
                            message.jump_url = reader.readString();
                            break;
                        case 10:
                            message.title = reader.readString();
                            break;
                        case 11:
                            message.content = reader.readString();
                            break;
                        case 12:
                            message.picture = reader.readString();
                            break;
                        case 13:
                            message.frequency = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Notice {
                return Notice.deserialize(bytes);
            }
        }
    }

    /** 
      弹窗
       msg/pop_ups/pull/
       **/
    export class PopUpsPullReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      kind?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒
           **/
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }

        /** 
          1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒
           **/
        set kind(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            kind?: number;
        }): PopUpsPullReq {
            const message = new PopUpsPullReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                kind?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.kind != 0) writer.writeInt32(2, this.kind);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsPullReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PopUpsPullReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.kind = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PopUpsPullReq {
            return PopUpsPullReq.deserialize(bytes);
        }
    }
    export class PopUpsPullResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      content?: string;
                      frequency?: number;
                      tutorial_addr?: string;
                      button_title?: string;
                      jump_pay_type?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("frequency" in data && data.frequency != undefined) {
                    this.frequency = data.frequency;
                }
                if ("tutorial_addr" in data && data.tutorial_addr != undefined) {
                    this.tutorial_addr = data.tutorial_addr;
                }
                if ("button_title" in data && data.button_title != undefined) {
                    this.button_title = data.button_title;
                }
                if ("jump_pay_type" in data && data.jump_pay_type != undefined) {
                    this.jump_pay_type = data.jump_pay_type;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          弹窗文案
           **/
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          弹窗文案
           **/
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          弹窗频率
           **/
        get frequency() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }

        /** 
          弹窗频率
           **/
        set frequency(value: number) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          教程地址
           **/
        get tutorial_addr() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          教程地址
           **/
        set tutorial_addr(value: string) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          跳转按钮文案
           **/
        get button_title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }

        /** 
          跳转按钮文案
           **/
        set button_title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }

        /** 
          跳转支付类型
           **/
        get jump_pay_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }

        /** 
          跳转支付类型
           **/
        set jump_pay_type(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            content?: string;
            frequency?: number;
            tutorial_addr?: string;
            button_title?: string;
            jump_pay_type?: number;
        }): PopUpsPullResp {
            const message = new PopUpsPullResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.frequency != null) {
                message.frequency = data.frequency;
            }
            if (data.tutorial_addr != null) {
                message.tutorial_addr = data.tutorial_addr;
            }
            if (data.button_title != null) {
                message.button_title = data.button_title;
            }
            if (data.jump_pay_type != null) {
                message.jump_pay_type = data.jump_pay_type;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                content?: string;
                frequency?: number;
                tutorial_addr?: string;
                button_title?: string;
                jump_pay_type?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.frequency != null) {
                data.frequency = this.frequency;
            }
            if (this.tutorial_addr != null) {
                data.tutorial_addr = this.tutorial_addr;
            }
            if (this.button_title != null) {
                data.button_title = this.button_title;
            }
            if (this.jump_pay_type != null) {
                data.jump_pay_type = this.jump_pay_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.content.length) writer.writeString(2, this.content);
            if (this.frequency != 0) writer.writeInt32(3, this.frequency);
            if (this.tutorial_addr.length) writer.writeString(4, this.tutorial_addr);
            if (this.button_title.length) writer.writeString(5, this.button_title);
            if (this.jump_pay_type != 0) writer.writeInt32(6, this.jump_pay_type);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsPullResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PopUpsPullResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.frequency = reader.readInt32();
                        break;
                    case 4:
                        message.tutorial_addr = reader.readString();
                        break;
                    case 5:
                        message.button_title = reader.readString();
                        break;
                    case 6:
                        message.jump_pay_type = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PopUpsPullResp {
            return PopUpsPullResp.deserialize(bytes);
        }
    }

    /** 
      /////////////////////////
       活动提醒中心
       act/activity_center/list/
       **/
    export class ListActivityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): ListActivityReq {
            const message = new ListActivityReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListActivityReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ListActivityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListActivityReq {
            return ListActivityReq.deserialize(bytes);
        }
    }
    export class ListActivityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: ListActivityResp.ActivitiesInfo;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                ListActivityResp.ActivitiesInfo,
                2
            ) as ListActivityResp.ActivitiesInfo;
        }
        set data(value: ListActivityResp.ActivitiesInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof ListActivityResp.ActivitiesInfo.prototype.toObject>;
        }): ListActivityResp {
            const message = new ListActivityResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = ListActivityResp.ActivitiesInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof ListActivityResp.ActivitiesInfo.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListActivityResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ListActivityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = ListActivityResp.ActivitiesInfo.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListActivityResp {
            return ListActivityResp.deserialize(bytes);
        }
    }
    export namespace ListActivityResp {
        export class Activity extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          activity_id?: string;
                          activity_type?: string;
                          left_ts?: number;
                          activity_name?: string;
                          effected_at?: number;
                          expired_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("activity_id" in data && data.activity_id != undefined) {
                        this.activity_id = data.activity_id;
                    }
                    if ("activity_type" in data && data.activity_type != undefined) {
                        this.activity_type = data.activity_type;
                    }
                    if ("left_ts" in data && data.left_ts != undefined) {
                        this.left_ts = data.left_ts;
                    }
                    if ("activity_name" in data && data.activity_name != undefined) {
                        this.activity_name = data.activity_name;
                    }
                    if ("effected_at" in data && data.effected_at != undefined) {
                        this.effected_at = data.effected_at;
                    }
                    if ("expired_at" in data && data.expired_at != undefined) {
                        this.expired_at = data.expired_at;
                    }
                }
            }
            get activity_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set activity_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get activity_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set activity_type(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get left_ts() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set left_ts(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get activity_name() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set activity_name(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get effected_at() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set effected_at(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get expired_at() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set expired_at(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                activity_id?: string;
                activity_type?: string;
                left_ts?: number;
                activity_name?: string;
                effected_at?: number;
                expired_at?: number;
            }): Activity {
                const message = new Activity({});
                if (data.activity_id != null) {
                    message.activity_id = data.activity_id;
                }
                if (data.activity_type != null) {
                    message.activity_type = data.activity_type;
                }
                if (data.left_ts != null) {
                    message.left_ts = data.left_ts;
                }
                if (data.activity_name != null) {
                    message.activity_name = data.activity_name;
                }
                if (data.effected_at != null) {
                    message.effected_at = data.effected_at;
                }
                if (data.expired_at != null) {
                    message.expired_at = data.expired_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    activity_id?: string;
                    activity_type?: string;
                    left_ts?: number;
                    activity_name?: string;
                    effected_at?: number;
                    expired_at?: number;
                } = {};
                if (this.activity_id != null) {
                    data.activity_id = this.activity_id;
                }
                if (this.activity_type != null) {
                    data.activity_type = this.activity_type;
                }
                if (this.left_ts != null) {
                    data.left_ts = this.left_ts;
                }
                if (this.activity_name != null) {
                    data.activity_name = this.activity_name;
                }
                if (this.effected_at != null) {
                    data.effected_at = this.effected_at;
                }
                if (this.expired_at != null) {
                    data.expired_at = this.expired_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.activity_id.length) writer.writeString(1, this.activity_id);
                if (this.activity_type.length) writer.writeString(2, this.activity_type);
                if (this.left_ts != 0) writer.writeInt64(3, this.left_ts);
                if (this.activity_name.length) writer.writeString(4, this.activity_name);
                if (this.effected_at != 0) writer.writeInt64(5, this.effected_at);
                if (this.expired_at != 0) writer.writeInt64(6, this.expired_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Activity {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Activity();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.activity_id = reader.readString();
                            break;
                        case 2:
                            message.activity_type = reader.readString();
                            break;
                        case 3:
                            message.left_ts = reader.readInt64();
                            break;
                        case 4:
                            message.activity_name = reader.readString();
                            break;
                        case 5:
                            message.effected_at = reader.readInt64();
                            break;
                        case 6:
                            message.expired_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Activity {
                return Activity.deserialize(bytes);
            }
        }
        export class UserActStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          act_id?: string;
                          available_bonus_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("act_id" in data && data.act_id != undefined) {
                        this.act_id = data.act_id;
                    }
                    if (
                        "available_bonus_amount" in data &&
                        data.available_bonus_amount != undefined
                    ) {
                        this.available_bonus_amount = data.available_bonus_amount;
                    }
                }
            }
            get act_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set act_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get available_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set available_bonus_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                act_id?: string;
                available_bonus_amount?: number;
            }): UserActStat {
                const message = new UserActStat({});
                if (data.act_id != null) {
                    message.act_id = data.act_id;
                }
                if (data.available_bonus_amount != null) {
                    message.available_bonus_amount = data.available_bonus_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    act_id?: string;
                    available_bonus_amount?: number;
                } = {};
                if (this.act_id != null) {
                    data.act_id = this.act_id;
                }
                if (this.available_bonus_amount != null) {
                    data.available_bonus_amount = this.available_bonus_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.act_id.length) writer.writeString(1, this.act_id);
                if (this.available_bonus_amount != 0)
                    writer.writeInt64(2, this.available_bonus_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserActStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new UserActStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.act_id = reader.readString();
                            break;
                        case 2:
                            message.available_bonus_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UserActStat {
                return UserActStat.deserialize(bytes);
            }
        }
        export class ActivitiesInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          ongoing_activities?: ListActivityResp.Activity[];
                          unopened_activities?: ListActivityResp.Activity[];
                          expired_activities?: ListActivityResp.Activity[];
                          user_act_stats?: ListActivityResp.UserActStat[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1, 2, 4, 5],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ongoing_activities" in data && data.ongoing_activities != undefined) {
                        this.ongoing_activities = data.ongoing_activities;
                    }
                    if ("unopened_activities" in data && data.unopened_activities != undefined) {
                        this.unopened_activities = data.unopened_activities;
                    }
                    if ("expired_activities" in data && data.expired_activities != undefined) {
                        this.expired_activities = data.expired_activities;
                    }
                    if ("user_act_stats" in data && data.user_act_stats != undefined) {
                        this.user_act_stats = data.user_act_stats;
                    }
                }
            }
            get ongoing_activities() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    ListActivityResp.Activity,
                    1
                ) as ListActivityResp.Activity[];
            }
            set ongoing_activities(value: ListActivityResp.Activity[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get unopened_activities() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    ListActivityResp.Activity,
                    2
                ) as ListActivityResp.Activity[];
            }
            set unopened_activities(value: ListActivityResp.Activity[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get expired_activities() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    ListActivityResp.Activity,
                    4
                ) as ListActivityResp.Activity[];
            }
            set expired_activities(value: ListActivityResp.Activity[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            get user_act_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    ListActivityResp.UserActStat,
                    5
                ) as ListActivityResp.UserActStat[];
            }
            set user_act_stats(value: ListActivityResp.UserActStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 5, value);
            }
            static fromObject(data: {
                ongoing_activities?: ReturnType<
                    typeof ListActivityResp.Activity.prototype.toObject
                >[];
                unopened_activities?: ReturnType<
                    typeof ListActivityResp.Activity.prototype.toObject
                >[];
                expired_activities?: ReturnType<
                    typeof ListActivityResp.Activity.prototype.toObject
                >[];
                user_act_stats?: ReturnType<
                    typeof ListActivityResp.UserActStat.prototype.toObject
                >[];
            }): ActivitiesInfo {
                const message = new ActivitiesInfo({});
                if (data.ongoing_activities != null) {
                    message.ongoing_activities = data.ongoing_activities.map((item) =>
                        ListActivityResp.Activity.fromObject(item)
                    );
                }
                if (data.unopened_activities != null) {
                    message.unopened_activities = data.unopened_activities.map((item) =>
                        ListActivityResp.Activity.fromObject(item)
                    );
                }
                if (data.expired_activities != null) {
                    message.expired_activities = data.expired_activities.map((item) =>
                        ListActivityResp.Activity.fromObject(item)
                    );
                }
                if (data.user_act_stats != null) {
                    message.user_act_stats = data.user_act_stats.map((item) =>
                        ListActivityResp.UserActStat.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    ongoing_activities?: ReturnType<
                        typeof ListActivityResp.Activity.prototype.toObject
                    >[];
                    unopened_activities?: ReturnType<
                        typeof ListActivityResp.Activity.prototype.toObject
                    >[];
                    expired_activities?: ReturnType<
                        typeof ListActivityResp.Activity.prototype.toObject
                    >[];
                    user_act_stats?: ReturnType<
                        typeof ListActivityResp.UserActStat.prototype.toObject
                    >[];
                } = {};
                if (this.ongoing_activities != null) {
                    data.ongoing_activities = this.ongoing_activities.map(
                        (item: ListActivityResp.Activity) => item.toObject()
                    );
                }
                if (this.unopened_activities != null) {
                    data.unopened_activities = this.unopened_activities.map(
                        (item: ListActivityResp.Activity) => item.toObject()
                    );
                }
                if (this.expired_activities != null) {
                    data.expired_activities = this.expired_activities.map(
                        (item: ListActivityResp.Activity) => item.toObject()
                    );
                }
                if (this.user_act_stats != null) {
                    data.user_act_stats = this.user_act_stats.map(
                        (item: ListActivityResp.UserActStat) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.ongoing_activities.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.ongoing_activities,
                        (item: ListActivityResp.Activity) => item.serialize(writer)
                    );
                if (this.unopened_activities.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.unopened_activities,
                        (item: ListActivityResp.Activity) => item.serialize(writer)
                    );
                if (this.expired_activities.length)
                    writer.writeRepeatedMessage(
                        4,
                        this.expired_activities,
                        (item: ListActivityResp.Activity) => item.serialize(writer)
                    );
                if (this.user_act_stats.length)
                    writer.writeRepeatedMessage(
                        5,
                        this.user_act_stats,
                        (item: ListActivityResp.UserActStat) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivitiesInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ActivitiesInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.ongoing_activities, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    ListActivityResp.Activity.deserialize(reader),
                                    ListActivityResp.Activity
                                )
                            );
                            break;
                        case 2:
                            reader.readMessage(message.unopened_activities, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    ListActivityResp.Activity.deserialize(reader),
                                    ListActivityResp.Activity
                                )
                            );
                            break;
                        case 4:
                            reader.readMessage(message.expired_activities, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    4,
                                    ListActivityResp.Activity.deserialize(reader),
                                    ListActivityResp.Activity
                                )
                            );
                            break;
                        case 5:
                            reader.readMessage(message.user_act_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    5,
                                    ListActivityResp.UserActStat.deserialize(reader),
                                    ListActivityResp.UserActStat
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActivitiesInfo {
                return ActivitiesInfo.deserialize(bytes);
            }
        }
    }
    export class ActivityBonusRecordsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      trans_type?: TransType;
                      page_no?: number;
                      page_size?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("trans_type" in data && data.trans_type != undefined) {
                    this.trans_type = data.trans_type;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get trans_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                TransType.TRANS_TYPE_ASSIGN
            ) as TransType;
        }
        set trans_type(value: TransType) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            trans_type?: TransType;
            page_no?: number;
            page_size?: number;
        }): ActivityBonusRecordsReq {
            const message = new ActivityBonusRecordsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.trans_type != null) {
                message.trans_type = data.trans_type;
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                trans_type?: TransType;
                page_no?: number;
                page_size?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.trans_type != null) {
                data.trans_type = this.trans_type;
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.trans_type != TransType.TRANS_TYPE_ASSIGN)
                writer.writeEnum(2, this.trans_type);
            if (this.page_no != 0) writer.writeInt32(3, this.page_no);
            if (this.page_size != 0) writer.writeInt32(4, this.page_size);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityBonusRecordsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ActivityBonusRecordsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.trans_type = reader.readEnum();
                        break;
                    case 3:
                        message.page_no = reader.readInt32();
                        break;
                    case 4:
                        message.page_size = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActivityBonusRecordsReq {
            return ActivityBonusRecordsReq.deserialize(bytes);
        }
    }
    export class ActivityBonusRecordsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: ActivityBonusRecordsResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                ActivityBonusRecordsResp.RespData,
                2
            ) as ActivityBonusRecordsResp.RespData;
        }
        set data(value: ActivityBonusRecordsResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof ActivityBonusRecordsResp.RespData.prototype.toObject>;
        }): ActivityBonusRecordsResp {
            const message = new ActivityBonusRecordsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = ActivityBonusRecordsResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof ActivityBonusRecordsResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityBonusRecordsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ActivityBonusRecordsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    ActivityBonusRecordsResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActivityBonusRecordsResp {
            return ActivityBonusRecordsResp.deserialize(bytes);
        }
    }
    export namespace ActivityBonusRecordsResp {
        export class Record extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          bonus_amount?: number;
                          join_amount?: number;
                          activity_type?: string;
                          activity_name?: string;
                          created_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("bonus_amount" in data && data.bonus_amount != undefined) {
                        this.bonus_amount = data.bonus_amount;
                    }
                    if ("join_amount" in data && data.join_amount != undefined) {
                        this.join_amount = data.join_amount;
                    }
                    if ("activity_type" in data && data.activity_type != undefined) {
                        this.activity_type = data.activity_type;
                    }
                    if ("activity_name" in data && data.activity_name != undefined) {
                        this.activity_name = data.activity_name;
                    }
                    if ("created_at" in data && data.created_at != undefined) {
                        this.created_at = data.created_at;
                    }
                }
            }
            get bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set bonus_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get join_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set join_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get activity_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set activity_type(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get activity_name() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set activity_name(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get created_at() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set created_at(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                bonus_amount?: number;
                join_amount?: number;
                activity_type?: string;
                activity_name?: string;
                created_at?: number;
            }): Record {
                const message = new Record({});
                if (data.bonus_amount != null) {
                    message.bonus_amount = data.bonus_amount;
                }
                if (data.join_amount != null) {
                    message.join_amount = data.join_amount;
                }
                if (data.activity_type != null) {
                    message.activity_type = data.activity_type;
                }
                if (data.activity_name != null) {
                    message.activity_name = data.activity_name;
                }
                if (data.created_at != null) {
                    message.created_at = data.created_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    bonus_amount?: number;
                    join_amount?: number;
                    activity_type?: string;
                    activity_name?: string;
                    created_at?: number;
                } = {};
                if (this.bonus_amount != null) {
                    data.bonus_amount = this.bonus_amount;
                }
                if (this.join_amount != null) {
                    data.join_amount = this.join_amount;
                }
                if (this.activity_type != null) {
                    data.activity_type = this.activity_type;
                }
                if (this.activity_name != null) {
                    data.activity_name = this.activity_name;
                }
                if (this.created_at != null) {
                    data.created_at = this.created_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.bonus_amount != 0) writer.writeInt64(1, this.bonus_amount);
                if (this.join_amount != 0) writer.writeInt64(2, this.join_amount);
                if (this.activity_type.length) writer.writeString(3, this.activity_type);
                if (this.activity_name.length) writer.writeString(4, this.activity_name);
                if (this.created_at != 0) writer.writeInt64(5, this.created_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Record();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.bonus_amount = reader.readInt64();
                            break;
                        case 2:
                            message.join_amount = reader.readInt64();
                            break;
                        case 3:
                            message.activity_type = reader.readString();
                            break;
                        case 4:
                            message.activity_name = reader.readString();
                            break;
                        case 5:
                            message.created_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Record {
                return Record.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          records?: ActivityBonusRecordsResp.Record[];
                          total_amount?: number;
                          total?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                    if ("total_amount" in data && data.total_amount != undefined) {
                        this.total_amount = data.total_amount;
                    }
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                }
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    ActivityBonusRecordsResp.Record,
                    1
                ) as ActivityBonusRecordsResp.Record[];
            }
            set records(value: ActivityBonusRecordsResp.Record[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get total_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set total_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                records?: ReturnType<typeof ActivityBonusRecordsResp.Record.prototype.toObject>[];
                total_amount?: number;
                total?: number;
            }): RespData {
                const message = new RespData({});
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        ActivityBonusRecordsResp.Record.fromObject(item)
                    );
                }
                if (data.total_amount != null) {
                    message.total_amount = data.total_amount;
                }
                if (data.total != null) {
                    message.total = data.total;
                }
                return message;
            }
            toObject() {
                const data: {
                    records?: ReturnType<
                        typeof ActivityBonusRecordsResp.Record.prototype.toObject
                    >[];
                    total_amount?: number;
                    total?: number;
                } = {};
                if (this.records != null) {
                    data.records = this.records.map((item: ActivityBonusRecordsResp.Record) =>
                        item.toObject()
                    );
                }
                if (this.total_amount != null) {
                    data.total_amount = this.total_amount;
                }
                if (this.total != null) {
                    data.total = this.total;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.records,
                        (item: ActivityBonusRecordsResp.Record) => item.serialize(writer)
                    );
                if (this.total_amount != 0) writer.writeInt64(2, this.total_amount);
                if (this.total != 0) writer.writeInt32(3, this.total);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    ActivityBonusRecordsResp.Record.deserialize(reader),
                                    ActivityBonusRecordsResp.Record
                                )
                            );
                            break;
                        case 2:
                            message.total_amount = reader.readInt64();
                            break;
                        case 3:
                            message.total = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      返利活动
       单笔充值返利
       act/rebate/single_recharge/conf/
       **/
    export class SingleRechargeConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      title?: string;
                      rebate_type?: number;
                      rebate_rules?: SingleRechargeConf.RebateRule[];
                      desc?: string;
                      effected_at?: number;
                      expired_at?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("rebate_type" in data && data.rebate_type != undefined) {
                    this.rebate_type = data.rebate_type;
                }
                if ("rebate_rules" in data && data.rebate_rules != undefined) {
                    this.rebate_rules = data.rebate_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("effected_at" in data && data.effected_at != undefined) {
                    this.effected_at = data.effected_at;
                }
                if ("expired_at" in data && data.expired_at != undefined) {
                    this.expired_at = data.expired_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rebate_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set rebate_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rebate_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                SingleRechargeConf.RebateRule,
                4
            ) as SingleRechargeConf.RebateRule[];
        }
        set rebate_rules(value: SingleRechargeConf.RebateRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get effected_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set effected_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expired_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expired_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            rebate_type?: number;
            rebate_rules?: ReturnType<typeof SingleRechargeConf.RebateRule.prototype.toObject>[];
            desc?: string;
            effected_at?: number;
            expired_at?: number;
        }): SingleRechargeConf {
            const message = new SingleRechargeConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.rebate_type != null) {
                message.rebate_type = data.rebate_type;
            }
            if (data.rebate_rules != null) {
                message.rebate_rules = data.rebate_rules.map((item) =>
                    SingleRechargeConf.RebateRule.fromObject(item)
                );
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.effected_at != null) {
                message.effected_at = data.effected_at;
            }
            if (data.expired_at != null) {
                message.expired_at = data.expired_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                rebate_type?: number;
                rebate_rules?: ReturnType<
                    typeof SingleRechargeConf.RebateRule.prototype.toObject
                >[];
                desc?: string;
                effected_at?: number;
                expired_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.rebate_type != null) {
                data.rebate_type = this.rebate_type;
            }
            if (this.rebate_rules != null) {
                data.rebate_rules = this.rebate_rules.map((item: SingleRechargeConf.RebateRule) =>
                    item.toObject()
                );
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.effected_at != null) {
                data.effected_at = this.effected_at;
            }
            if (this.expired_at != null) {
                data.expired_at = this.expired_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.title.length) writer.writeString(2, this.title);
            if (this.rebate_type != 0) writer.writeInt32(3, this.rebate_type);
            if (this.rebate_rules.length)
                writer.writeRepeatedMessage(
                    4,
                    this.rebate_rules,
                    (item: SingleRechargeConf.RebateRule) => item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(5, this.desc);
            if (this.effected_at != 0) writer.writeInt64(6, this.effected_at);
            if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleRechargeConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SingleRechargeConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.rebate_type = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.rebate_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                SingleRechargeConf.RebateRule.deserialize(reader),
                                SingleRechargeConf.RebateRule
                            )
                        );
                        break;
                    case 5:
                        message.desc = reader.readString();
                        break;
                    case 6:
                        message.effected_at = reader.readInt64();
                        break;
                    case 7:
                        message.expired_at = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleRechargeConf {
            return SingleRechargeConf.deserialize(bytes);
        }
    }
    export namespace SingleRechargeConf {
        export class RebateRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_recharge_amount?: number;
                          max_recharge_amount?: number;
                          min_quota?: number;
                          max_quota?: number;
                          min_ratio?: string;
                          max_ratio?: string;
                          multiple?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_recharge_amount" in data && data.min_recharge_amount != undefined) {
                        this.min_recharge_amount = data.min_recharge_amount;
                    }
                    if ("max_recharge_amount" in data && data.max_recharge_amount != undefined) {
                        this.max_recharge_amount = data.max_recharge_amount;
                    }
                    if ("min_quota" in data && data.min_quota != undefined) {
                        this.min_quota = data.min_quota;
                    }
                    if ("max_quota" in data && data.max_quota != undefined) {
                        this.max_quota = data.max_quota;
                    }
                    if ("min_ratio" in data && data.min_ratio != undefined) {
                        this.min_ratio = data.min_ratio;
                    }
                    if ("max_ratio" in data && data.max_ratio != undefined) {
                        this.max_ratio = data.max_ratio;
                    }
                    if ("multiple" in data && data.multiple != undefined) {
                        this.multiple = data.multiple;
                    }
                }
            }
            get min_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_recharge_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_recharge_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get min_quota() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set min_quota(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get max_quota() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set max_quota(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get min_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set min_ratio(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get max_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set max_ratio(value: string) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              加奖倍数
               **/
            get multiple() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }

            /** 
              加奖倍数
               **/
            set multiple(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                min_recharge_amount?: number;
                max_recharge_amount?: number;
                min_quota?: number;
                max_quota?: number;
                min_ratio?: string;
                max_ratio?: string;
                multiple?: string;
            }): RebateRule {
                const message = new RebateRule({});
                if (data.min_recharge_amount != null) {
                    message.min_recharge_amount = data.min_recharge_amount;
                }
                if (data.max_recharge_amount != null) {
                    message.max_recharge_amount = data.max_recharge_amount;
                }
                if (data.min_quota != null) {
                    message.min_quota = data.min_quota;
                }
                if (data.max_quota != null) {
                    message.max_quota = data.max_quota;
                }
                if (data.min_ratio != null) {
                    message.min_ratio = data.min_ratio;
                }
                if (data.max_ratio != null) {
                    message.max_ratio = data.max_ratio;
                }
                if (data.multiple != null) {
                    message.multiple = data.multiple;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_recharge_amount?: number;
                    max_recharge_amount?: number;
                    min_quota?: number;
                    max_quota?: number;
                    min_ratio?: string;
                    max_ratio?: string;
                    multiple?: string;
                } = {};
                if (this.min_recharge_amount != null) {
                    data.min_recharge_amount = this.min_recharge_amount;
                }
                if (this.max_recharge_amount != null) {
                    data.max_recharge_amount = this.max_recharge_amount;
                }
                if (this.min_quota != null) {
                    data.min_quota = this.min_quota;
                }
                if (this.max_quota != null) {
                    data.max_quota = this.max_quota;
                }
                if (this.min_ratio != null) {
                    data.min_ratio = this.min_ratio;
                }
                if (this.max_ratio != null) {
                    data.max_ratio = this.max_ratio;
                }
                if (this.multiple != null) {
                    data.multiple = this.multiple;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_recharge_amount != 0) writer.writeInt64(1, this.min_recharge_amount);
                if (this.max_recharge_amount != 0) writer.writeInt64(2, this.max_recharge_amount);
                if (this.min_quota != 0) writer.writeInt64(3, this.min_quota);
                if (this.max_quota != 0) writer.writeInt64(4, this.max_quota);
                if (this.min_ratio.length) writer.writeString(5, this.min_ratio);
                if (this.max_ratio.length) writer.writeString(6, this.max_ratio);
                if (this.multiple.length) writer.writeString(7, this.multiple);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RebateRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_recharge_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_recharge_amount = reader.readInt64();
                            break;
                        case 3:
                            message.min_quota = reader.readInt64();
                            break;
                        case 4:
                            message.max_quota = reader.readInt64();
                            break;
                        case 5:
                            message.min_ratio = reader.readString();
                            break;
                        case 6:
                            message.max_ratio = reader.readString();
                            break;
                        case 7:
                            message.multiple = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RebateRule {
                return RebateRule.deserialize(bytes);
            }
        }
    }
    export class SingleRechargeStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      idx_stats?: SingleRechargeStat.IdxStat[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [1],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("idx_stats" in data && data.idx_stats != undefined) {
                    this.idx_stats = data.idx_stats;
                }
            }
        }
        get idx_stats() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                SingleRechargeStat.IdxStat,
                1
            ) as SingleRechargeStat.IdxStat[];
        }
        set idx_stats(value: SingleRechargeStat.IdxStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            idx_stats?: ReturnType<typeof SingleRechargeStat.IdxStat.prototype.toObject>[];
        }): SingleRechargeStat {
            const message = new SingleRechargeStat({});
            if (data.idx_stats != null) {
                message.idx_stats = data.idx_stats.map((item) =>
                    SingleRechargeStat.IdxStat.fromObject(item)
                );
            }
            return message;
        }
        toObject() {
            const data: {
                idx_stats?: ReturnType<typeof SingleRechargeStat.IdxStat.prototype.toObject>[];
            } = {};
            if (this.idx_stats != null) {
                data.idx_stats = this.idx_stats.map((item: SingleRechargeStat.IdxStat) =>
                    item.toObject()
                );
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.idx_stats.length)
                writer.writeRepeatedMessage(1, this.idx_stats, (item: SingleRechargeStat.IdxStat) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleRechargeStat {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new SingleRechargeStat();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.idx_stats, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                1,
                                SingleRechargeStat.IdxStat.deserialize(reader),
                                SingleRechargeStat.IdxStat
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleRechargeStat {
            return SingleRechargeStat.deserialize(bytes);
        }
    }
    export namespace SingleRechargeStat {
        export class IdxStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          rule_idx?: number;
                          available_bonus_amount?: number;
                          cumulative_bonus_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("rule_idx" in data && data.rule_idx != undefined) {
                        this.rule_idx = data.rule_idx;
                    }
                    if (
                        "available_bonus_amount" in data &&
                        data.available_bonus_amount != undefined
                    ) {
                        this.available_bonus_amount = data.available_bonus_amount;
                    }
                    if (
                        "cumulative_bonus_amount" in data &&
                        data.cumulative_bonus_amount != undefined
                    ) {
                        this.cumulative_bonus_amount = data.cumulative_bonus_amount;
                    }
                }
            }
            get rule_idx() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set rule_idx(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get available_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set available_bonus_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get cumulative_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set cumulative_bonus_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                rule_idx?: number;
                available_bonus_amount?: number;
                cumulative_bonus_amount?: number;
            }): IdxStat {
                const message = new IdxStat({});
                if (data.rule_idx != null) {
                    message.rule_idx = data.rule_idx;
                }
                if (data.available_bonus_amount != null) {
                    message.available_bonus_amount = data.available_bonus_amount;
                }
                if (data.cumulative_bonus_amount != null) {
                    message.cumulative_bonus_amount = data.cumulative_bonus_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    rule_idx?: number;
                    available_bonus_amount?: number;
                    cumulative_bonus_amount?: number;
                } = {};
                if (this.rule_idx != null) {
                    data.rule_idx = this.rule_idx;
                }
                if (this.available_bonus_amount != null) {
                    data.available_bonus_amount = this.available_bonus_amount;
                }
                if (this.cumulative_bonus_amount != null) {
                    data.cumulative_bonus_amount = this.cumulative_bonus_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.rule_idx != 0) writer.writeInt32(1, this.rule_idx);
                if (this.available_bonus_amount != 0)
                    writer.writeInt64(2, this.available_bonus_amount);
                if (this.cumulative_bonus_amount != 0)
                    writer.writeInt64(3, this.cumulative_bonus_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdxStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new IdxStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.rule_idx = reader.readInt32();
                            break;
                        case 2:
                            message.available_bonus_amount = reader.readInt64();
                            break;
                        case 3:
                            message.cumulative_bonus_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IdxStat {
                return IdxStat.deserialize(bytes);
            }
        }
    }
    export class RebateSingleRechargeConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateSingleRechargeConfReq {
            const message = new RebateSingleRechargeConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateSingleRechargeConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateSingleRechargeConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateSingleRechargeConfReq {
            return RebateSingleRechargeConfReq.deserialize(bytes);
        }
    }
    export class RebateSingleRechargeConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: RebateSingleRechargeConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                RebateSingleRechargeConfResp.RespData,
                2
            ) as RebateSingleRechargeConfResp.RespData;
        }
        set data(value: RebateSingleRechargeConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof RebateSingleRechargeConfResp.RespData.prototype.toObject>;
        }): RebateSingleRechargeConfResp {
            const message = new RebateSingleRechargeConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = RebateSingleRechargeConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof RebateSingleRechargeConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateSingleRechargeConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateSingleRechargeConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    RebateSingleRechargeConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateSingleRechargeConfResp {
            return RebateSingleRechargeConfResp.deserialize(bytes);
        }
    }
    export namespace RebateSingleRechargeConfResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          conf?: SingleRechargeConf;
                          user_stat?: SingleRechargeStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("user_stat" in data && data.user_stat != undefined) {
                        this.user_stat = data.user_stat;
                    }
                }
            }
            get conf() {
                return pb_1.Message.getWrapperField(
                    this,
                    SingleRechargeConf,
                    1
                ) as SingleRechargeConf;
            }
            set conf(value: SingleRechargeConf) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_stat() {
                return pb_1.Message.getWrapperField(
                    this,
                    SingleRechargeStat,
                    2
                ) as SingleRechargeStat;
            }
            set user_stat(value: SingleRechargeStat) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_user_stat() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                conf?: ReturnType<typeof SingleRechargeConf.prototype.toObject>;
                user_stat?: ReturnType<typeof SingleRechargeStat.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.conf != null) {
                    message.conf = SingleRechargeConf.fromObject(data.conf);
                }
                if (data.user_stat != null) {
                    message.user_stat = SingleRechargeStat.fromObject(data.user_stat);
                }
                return message;
            }
            toObject() {
                const data: {
                    conf?: ReturnType<typeof SingleRechargeConf.prototype.toObject>;
                    user_stat?: ReturnType<typeof SingleRechargeStat.prototype.toObject>;
                } = {};
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.user_stat != null) {
                    data.user_stat = this.user_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_conf)
                    writer.writeMessage(1, this.conf, () => this.conf.serialize(writer));
                if (this.has_user_stat)
                    writer.writeMessage(2, this.user_stat, () => this.user_stat.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = SingleRechargeConf.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.user_stat,
                                () => (message.user_stat = SingleRechargeStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/rebate/single_recharge/receive/
       **/
    export class RebateReceiveSingleRechargeBonusReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                      rule_idx?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
                if ("rule_idx" in data && data.rule_idx != undefined) {
                    this.rule_idx = data.rule_idx;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rule_idx() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set rule_idx(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
            rule_idx?: number;
        }): RebateReceiveSingleRechargeBonusReq {
            const message = new RebateReceiveSingleRechargeBonusReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            if (data.rule_idx != null) {
                message.rule_idx = data.rule_idx;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
                rule_idx?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            if (this.rule_idx != null) {
                data.rule_idx = this.rule_idx;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (this.rule_idx != 0) writer.writeInt32(3, this.rule_idx);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveSingleRechargeBonusReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveSingleRechargeBonusReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    case 3:
                        message.rule_idx = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveSingleRechargeBonusReq {
            return RebateReceiveSingleRechargeBonusReq.deserialize(bytes);
        }
    }
    export class RebateReceiveSingleRechargeBonusResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): RebateReceiveSingleRechargeBonusResp {
            const message = new RebateReceiveSingleRechargeBonusResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveSingleRechargeBonusResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveSingleRechargeBonusResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveSingleRechargeBonusResp {
            return RebateReceiveSingleRechargeBonusResp.deserialize(bytes);
        }
    }

    /** 
      每日充值返利
       act/rebate/daily_recharge/conf/
       **/
    export class DailyRechargeConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      title?: string;
                      rebate_type?: number;
                      rebate_rules?: DailyRechargeConf.RebateRule[];
                      desc?: string;
                      effected_at?: number;
                      expired_at?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("rebate_type" in data && data.rebate_type != undefined) {
                    this.rebate_type = data.rebate_type;
                }
                if ("rebate_rules" in data && data.rebate_rules != undefined) {
                    this.rebate_rules = data.rebate_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("effected_at" in data && data.effected_at != undefined) {
                    this.effected_at = data.effected_at;
                }
                if ("expired_at" in data && data.expired_at != undefined) {
                    this.expired_at = data.expired_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rebate_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set rebate_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rebate_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                DailyRechargeConf.RebateRule,
                4
            ) as DailyRechargeConf.RebateRule[];
        }
        set rebate_rules(value: DailyRechargeConf.RebateRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get effected_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set effected_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expired_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expired_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            rebate_type?: number;
            rebate_rules?: ReturnType<typeof DailyRechargeConf.RebateRule.prototype.toObject>[];
            desc?: string;
            effected_at?: number;
            expired_at?: number;
        }): DailyRechargeConf {
            const message = new DailyRechargeConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.rebate_type != null) {
                message.rebate_type = data.rebate_type;
            }
            if (data.rebate_rules != null) {
                message.rebate_rules = data.rebate_rules.map((item) =>
                    DailyRechargeConf.RebateRule.fromObject(item)
                );
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.effected_at != null) {
                message.effected_at = data.effected_at;
            }
            if (data.expired_at != null) {
                message.expired_at = data.expired_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                rebate_type?: number;
                rebate_rules?: ReturnType<typeof DailyRechargeConf.RebateRule.prototype.toObject>[];
                desc?: string;
                effected_at?: number;
                expired_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.rebate_type != null) {
                data.rebate_type = this.rebate_type;
            }
            if (this.rebate_rules != null) {
                data.rebate_rules = this.rebate_rules.map((item: DailyRechargeConf.RebateRule) =>
                    item.toObject()
                );
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.effected_at != null) {
                data.effected_at = this.effected_at;
            }
            if (this.expired_at != null) {
                data.expired_at = this.expired_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.title.length) writer.writeString(2, this.title);
            if (this.rebate_type != 0) writer.writeInt32(3, this.rebate_type);
            if (this.rebate_rules.length)
                writer.writeRepeatedMessage(
                    4,
                    this.rebate_rules,
                    (item: DailyRechargeConf.RebateRule) => item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(5, this.desc);
            if (this.effected_at != 0) writer.writeInt64(6, this.effected_at);
            if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyRechargeConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyRechargeConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.rebate_type = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.rebate_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                DailyRechargeConf.RebateRule.deserialize(reader),
                                DailyRechargeConf.RebateRule
                            )
                        );
                        break;
                    case 5:
                        message.desc = reader.readString();
                        break;
                    case 6:
                        message.effected_at = reader.readInt64();
                        break;
                    case 7:
                        message.expired_at = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyRechargeConf {
            return DailyRechargeConf.deserialize(bytes);
        }
    }
    export namespace DailyRechargeConf {
        export class RebateRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_recharge_amount?: number;
                          max_recharge_amount?: number;
                          min_quota?: number;
                          max_quota?: number;
                          min_ratio?: string;
                          max_ratio?: string;
                          multiple?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_recharge_amount" in data && data.min_recharge_amount != undefined) {
                        this.min_recharge_amount = data.min_recharge_amount;
                    }
                    if ("max_recharge_amount" in data && data.max_recharge_amount != undefined) {
                        this.max_recharge_amount = data.max_recharge_amount;
                    }
                    if ("min_quota" in data && data.min_quota != undefined) {
                        this.min_quota = data.min_quota;
                    }
                    if ("max_quota" in data && data.max_quota != undefined) {
                        this.max_quota = data.max_quota;
                    }
                    if ("min_ratio" in data && data.min_ratio != undefined) {
                        this.min_ratio = data.min_ratio;
                    }
                    if ("max_ratio" in data && data.max_ratio != undefined) {
                        this.max_ratio = data.max_ratio;
                    }
                    if ("multiple" in data && data.multiple != undefined) {
                        this.multiple = data.multiple;
                    }
                }
            }
            get min_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_recharge_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_recharge_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get min_quota() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set min_quota(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get max_quota() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set max_quota(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get min_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set min_ratio(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get max_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set max_ratio(value: string) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              加奖倍数
               **/
            get multiple() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }

            /** 
              加奖倍数
               **/
            set multiple(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                min_recharge_amount?: number;
                max_recharge_amount?: number;
                min_quota?: number;
                max_quota?: number;
                min_ratio?: string;
                max_ratio?: string;
                multiple?: string;
            }): RebateRule {
                const message = new RebateRule({});
                if (data.min_recharge_amount != null) {
                    message.min_recharge_amount = data.min_recharge_amount;
                }
                if (data.max_recharge_amount != null) {
                    message.max_recharge_amount = data.max_recharge_amount;
                }
                if (data.min_quota != null) {
                    message.min_quota = data.min_quota;
                }
                if (data.max_quota != null) {
                    message.max_quota = data.max_quota;
                }
                if (data.min_ratio != null) {
                    message.min_ratio = data.min_ratio;
                }
                if (data.max_ratio != null) {
                    message.max_ratio = data.max_ratio;
                }
                if (data.multiple != null) {
                    message.multiple = data.multiple;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_recharge_amount?: number;
                    max_recharge_amount?: number;
                    min_quota?: number;
                    max_quota?: number;
                    min_ratio?: string;
                    max_ratio?: string;
                    multiple?: string;
                } = {};
                if (this.min_recharge_amount != null) {
                    data.min_recharge_amount = this.min_recharge_amount;
                }
                if (this.max_recharge_amount != null) {
                    data.max_recharge_amount = this.max_recharge_amount;
                }
                if (this.min_quota != null) {
                    data.min_quota = this.min_quota;
                }
                if (this.max_quota != null) {
                    data.max_quota = this.max_quota;
                }
                if (this.min_ratio != null) {
                    data.min_ratio = this.min_ratio;
                }
                if (this.max_ratio != null) {
                    data.max_ratio = this.max_ratio;
                }
                if (this.multiple != null) {
                    data.multiple = this.multiple;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_recharge_amount != 0) writer.writeInt64(1, this.min_recharge_amount);
                if (this.max_recharge_amount != 0) writer.writeInt64(2, this.max_recharge_amount);
                if (this.min_quota != 0) writer.writeInt64(3, this.min_quota);
                if (this.max_quota != 0) writer.writeInt64(4, this.max_quota);
                if (this.min_ratio.length) writer.writeString(5, this.min_ratio);
                if (this.max_ratio.length) writer.writeString(6, this.max_ratio);
                if (this.multiple.length) writer.writeString(7, this.multiple);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RebateRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_recharge_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_recharge_amount = reader.readInt64();
                            break;
                        case 3:
                            message.min_quota = reader.readInt64();
                            break;
                        case 4:
                            message.max_quota = reader.readInt64();
                            break;
                        case 5:
                            message.min_ratio = reader.readString();
                            break;
                        case 6:
                            message.max_ratio = reader.readString();
                            break;
                        case 7:
                            message.multiple = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RebateRule {
                return RebateRule.deserialize(bytes);
            }
        }
    }
    export class DailyRechargeStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      available_bonus_amount?: number;
                      cumulative_bonus_amount?: number;
                      today_recharge_amount?: number;
                      bonus_amount_range?: number[];
                      upper_recharge_amount?: number;
                      upper_bonus_amount_range?: number[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4, 6],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("available_bonus_amount" in data && data.available_bonus_amount != undefined) {
                    this.available_bonus_amount = data.available_bonus_amount;
                }
                if (
                    "cumulative_bonus_amount" in data &&
                    data.cumulative_bonus_amount != undefined
                ) {
                    this.cumulative_bonus_amount = data.cumulative_bonus_amount;
                }
                if ("today_recharge_amount" in data && data.today_recharge_amount != undefined) {
                    this.today_recharge_amount = data.today_recharge_amount;
                }
                if ("bonus_amount_range" in data && data.bonus_amount_range != undefined) {
                    this.bonus_amount_range = data.bonus_amount_range;
                }
                if ("upper_recharge_amount" in data && data.upper_recharge_amount != undefined) {
                    this.upper_recharge_amount = data.upper_recharge_amount;
                }
                if (
                    "upper_bonus_amount_range" in data &&
                    data.upper_bonus_amount_range != undefined
                ) {
                    this.upper_bonus_amount_range = data.upper_bonus_amount_range;
                }
            }
        }
        get available_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set available_bonus_amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cumulative_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cumulative_bonus_amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get today_recharge_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set today_recharge_amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bonus_amount_range() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bonus_amount_range(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get upper_recharge_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set upper_recharge_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get upper_bonus_amount_range() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set upper_bonus_amount_range(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            available_bonus_amount?: number;
            cumulative_bonus_amount?: number;
            today_recharge_amount?: number;
            bonus_amount_range?: number[];
            upper_recharge_amount?: number;
            upper_bonus_amount_range?: number[];
        }): DailyRechargeStat {
            const message = new DailyRechargeStat({});
            if (data.available_bonus_amount != null) {
                message.available_bonus_amount = data.available_bonus_amount;
            }
            if (data.cumulative_bonus_amount != null) {
                message.cumulative_bonus_amount = data.cumulative_bonus_amount;
            }
            if (data.today_recharge_amount != null) {
                message.today_recharge_amount = data.today_recharge_amount;
            }
            if (data.bonus_amount_range != null) {
                message.bonus_amount_range = data.bonus_amount_range;
            }
            if (data.upper_recharge_amount != null) {
                message.upper_recharge_amount = data.upper_recharge_amount;
            }
            if (data.upper_bonus_amount_range != null) {
                message.upper_bonus_amount_range = data.upper_bonus_amount_range;
            }
            return message;
        }
        toObject() {
            const data: {
                available_bonus_amount?: number;
                cumulative_bonus_amount?: number;
                today_recharge_amount?: number;
                bonus_amount_range?: number[];
                upper_recharge_amount?: number;
                upper_bonus_amount_range?: number[];
            } = {};
            if (this.available_bonus_amount != null) {
                data.available_bonus_amount = this.available_bonus_amount;
            }
            if (this.cumulative_bonus_amount != null) {
                data.cumulative_bonus_amount = this.cumulative_bonus_amount;
            }
            if (this.today_recharge_amount != null) {
                data.today_recharge_amount = this.today_recharge_amount;
            }
            if (this.bonus_amount_range != null) {
                data.bonus_amount_range = this.bonus_amount_range;
            }
            if (this.upper_recharge_amount != null) {
                data.upper_recharge_amount = this.upper_recharge_amount;
            }
            if (this.upper_bonus_amount_range != null) {
                data.upper_bonus_amount_range = this.upper_bonus_amount_range;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.available_bonus_amount != 0) writer.writeInt64(1, this.available_bonus_amount);
            if (this.cumulative_bonus_amount != 0)
                writer.writeInt64(2, this.cumulative_bonus_amount);
            if (this.today_recharge_amount != 0) writer.writeInt64(3, this.today_recharge_amount);
            if (this.bonus_amount_range.length) writer.writePackedInt64(4, this.bonus_amount_range);
            if (this.upper_recharge_amount != 0) writer.writeInt64(5, this.upper_recharge_amount);
            if (this.upper_bonus_amount_range.length)
                writer.writePackedInt64(6, this.upper_bonus_amount_range);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyRechargeStat {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyRechargeStat();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.available_bonus_amount = reader.readInt64();
                        break;
                    case 2:
                        message.cumulative_bonus_amount = reader.readInt64();
                        break;
                    case 3:
                        message.today_recharge_amount = reader.readInt64();
                        break;
                    case 4:
                        message.bonus_amount_range = reader.readPackedInt64();
                        break;
                    case 5:
                        message.upper_recharge_amount = reader.readInt64();
                        break;
                    case 6:
                        message.upper_bonus_amount_range = reader.readPackedInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyRechargeStat {
            return DailyRechargeStat.deserialize(bytes);
        }
    }
    export class RebateDailyRechargeConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateDailyRechargeConfReq {
            const message = new RebateDailyRechargeConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateDailyRechargeConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateDailyRechargeConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateDailyRechargeConfReq {
            return RebateDailyRechargeConfReq.deserialize(bytes);
        }
    }
    export class RebateDailyRechargeConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: RebateDailyRechargeConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                RebateDailyRechargeConfResp.RespData,
                2
            ) as RebateDailyRechargeConfResp.RespData;
        }
        set data(value: RebateDailyRechargeConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof RebateDailyRechargeConfResp.RespData.prototype.toObject>;
        }): RebateDailyRechargeConfResp {
            const message = new RebateDailyRechargeConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = RebateDailyRechargeConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof RebateDailyRechargeConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateDailyRechargeConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateDailyRechargeConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    RebateDailyRechargeConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateDailyRechargeConfResp {
            return RebateDailyRechargeConfResp.deserialize(bytes);
        }
    }
    export namespace RebateDailyRechargeConfResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          conf?: DailyRechargeConf;
                          user_stat?: DailyRechargeStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("user_stat" in data && data.user_stat != undefined) {
                        this.user_stat = data.user_stat;
                    }
                }
            }
            get conf() {
                return pb_1.Message.getWrapperField(
                    this,
                    DailyRechargeConf,
                    1
                ) as DailyRechargeConf;
            }
            set conf(value: DailyRechargeConf) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_stat() {
                return pb_1.Message.getWrapperField(
                    this,
                    DailyRechargeStat,
                    2
                ) as DailyRechargeStat;
            }
            set user_stat(value: DailyRechargeStat) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_user_stat() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                conf?: ReturnType<typeof DailyRechargeConf.prototype.toObject>;
                user_stat?: ReturnType<typeof DailyRechargeStat.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.conf != null) {
                    message.conf = DailyRechargeConf.fromObject(data.conf);
                }
                if (data.user_stat != null) {
                    message.user_stat = DailyRechargeStat.fromObject(data.user_stat);
                }
                return message;
            }
            toObject() {
                const data: {
                    conf?: ReturnType<typeof DailyRechargeConf.prototype.toObject>;
                    user_stat?: ReturnType<typeof DailyRechargeStat.prototype.toObject>;
                } = {};
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.user_stat != null) {
                    data.user_stat = this.user_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_conf)
                    writer.writeMessage(1, this.conf, () => this.conf.serialize(writer));
                if (this.has_user_stat)
                    writer.writeMessage(2, this.user_stat, () => this.user_stat.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = DailyRechargeConf.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.user_stat,
                                () => (message.user_stat = DailyRechargeStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/rebate/daily_recharge/receive/
       **/
    export class RebateReceiveDailyRechargeBonusReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateReceiveDailyRechargeBonusReq {
            const message = new RebateReceiveDailyRechargeBonusReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveDailyRechargeBonusReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveDailyRechargeBonusReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveDailyRechargeBonusReq {
            return RebateReceiveDailyRechargeBonusReq.deserialize(bytes);
        }
    }
    export class RebateReceiveDailyRechargeBonusResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): RebateReceiveDailyRechargeBonusResp {
            const message = new RebateReceiveDailyRechargeBonusResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveDailyRechargeBonusResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveDailyRechargeBonusResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveDailyRechargeBonusResp {
            return RebateReceiveDailyRechargeBonusResp.deserialize(bytes);
        }
    }

    /** 
      每日充值返利
       act/rebate/daily_bet/conf/
       **/
    export class DailyBetConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      title?: string;
                      rebate_type?: number;
                      rebate_rules?: DailyBetConf.RebateRule[];
                      desc?: string;
                      effected_at?: number;
                      expired_at?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("rebate_type" in data && data.rebate_type != undefined) {
                    this.rebate_type = data.rebate_type;
                }
                if ("rebate_rules" in data && data.rebate_rules != undefined) {
                    this.rebate_rules = data.rebate_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("effected_at" in data && data.effected_at != undefined) {
                    this.effected_at = data.effected_at;
                }
                if ("expired_at" in data && data.expired_at != undefined) {
                    this.expired_at = data.expired_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rebate_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set rebate_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rebate_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                DailyBetConf.RebateRule,
                4
            ) as DailyBetConf.RebateRule[];
        }
        set rebate_rules(value: DailyBetConf.RebateRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get effected_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set effected_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expired_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expired_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            rebate_type?: number;
            rebate_rules?: ReturnType<typeof DailyBetConf.RebateRule.prototype.toObject>[];
            desc?: string;
            effected_at?: number;
            expired_at?: number;
        }): DailyBetConf {
            const message = new DailyBetConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.rebate_type != null) {
                message.rebate_type = data.rebate_type;
            }
            if (data.rebate_rules != null) {
                message.rebate_rules = data.rebate_rules.map((item) =>
                    DailyBetConf.RebateRule.fromObject(item)
                );
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.effected_at != null) {
                message.effected_at = data.effected_at;
            }
            if (data.expired_at != null) {
                message.expired_at = data.expired_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                rebate_type?: number;
                rebate_rules?: ReturnType<typeof DailyBetConf.RebateRule.prototype.toObject>[];
                desc?: string;
                effected_at?: number;
                expired_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.rebate_type != null) {
                data.rebate_type = this.rebate_type;
            }
            if (this.rebate_rules != null) {
                data.rebate_rules = this.rebate_rules.map((item: DailyBetConf.RebateRule) =>
                    item.toObject()
                );
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.effected_at != null) {
                data.effected_at = this.effected_at;
            }
            if (this.expired_at != null) {
                data.expired_at = this.expired_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.title.length) writer.writeString(2, this.title);
            if (this.rebate_type != 0) writer.writeInt32(3, this.rebate_type);
            if (this.rebate_rules.length)
                writer.writeRepeatedMessage(4, this.rebate_rules, (item: DailyBetConf.RebateRule) =>
                    item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(5, this.desc);
            if (this.effected_at != 0) writer.writeInt64(6, this.effected_at);
            if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBetConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBetConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.rebate_type = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.rebate_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                DailyBetConf.RebateRule.deserialize(reader),
                                DailyBetConf.RebateRule
                            )
                        );
                        break;
                    case 5:
                        message.desc = reader.readString();
                        break;
                    case 6:
                        message.effected_at = reader.readInt64();
                        break;
                    case 7:
                        message.expired_at = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBetConf {
            return DailyBetConf.deserialize(bytes);
        }
    }
    export namespace DailyBetConf {
        export class RebateRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_bet_amount?: number;
                          max_bet_amount?: number;
                          min_quota?: number;
                          max_quota?: number;
                          min_ratio?: string;
                          max_ratio?: string;
                          multiple?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_bet_amount" in data && data.min_bet_amount != undefined) {
                        this.min_bet_amount = data.min_bet_amount;
                    }
                    if ("max_bet_amount" in data && data.max_bet_amount != undefined) {
                        this.max_bet_amount = data.max_bet_amount;
                    }
                    if ("min_quota" in data && data.min_quota != undefined) {
                        this.min_quota = data.min_quota;
                    }
                    if ("max_quota" in data && data.max_quota != undefined) {
                        this.max_quota = data.max_quota;
                    }
                    if ("min_ratio" in data && data.min_ratio != undefined) {
                        this.min_ratio = data.min_ratio;
                    }
                    if ("max_ratio" in data && data.max_ratio != undefined) {
                        this.max_ratio = data.max_ratio;
                    }
                    if ("multiple" in data && data.multiple != undefined) {
                        this.multiple = data.multiple;
                    }
                }
            }
            get min_bet_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_bet_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_bet_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_bet_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get min_quota() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set min_quota(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get max_quota() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set max_quota(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get min_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set min_ratio(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get max_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set max_ratio(value: string) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              加奖倍数
               **/
            get multiple() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }

            /** 
              加奖倍数
               **/
            set multiple(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                min_bet_amount?: number;
                max_bet_amount?: number;
                min_quota?: number;
                max_quota?: number;
                min_ratio?: string;
                max_ratio?: string;
                multiple?: string;
            }): RebateRule {
                const message = new RebateRule({});
                if (data.min_bet_amount != null) {
                    message.min_bet_amount = data.min_bet_amount;
                }
                if (data.max_bet_amount != null) {
                    message.max_bet_amount = data.max_bet_amount;
                }
                if (data.min_quota != null) {
                    message.min_quota = data.min_quota;
                }
                if (data.max_quota != null) {
                    message.max_quota = data.max_quota;
                }
                if (data.min_ratio != null) {
                    message.min_ratio = data.min_ratio;
                }
                if (data.max_ratio != null) {
                    message.max_ratio = data.max_ratio;
                }
                if (data.multiple != null) {
                    message.multiple = data.multiple;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_bet_amount?: number;
                    max_bet_amount?: number;
                    min_quota?: number;
                    max_quota?: number;
                    min_ratio?: string;
                    max_ratio?: string;
                    multiple?: string;
                } = {};
                if (this.min_bet_amount != null) {
                    data.min_bet_amount = this.min_bet_amount;
                }
                if (this.max_bet_amount != null) {
                    data.max_bet_amount = this.max_bet_amount;
                }
                if (this.min_quota != null) {
                    data.min_quota = this.min_quota;
                }
                if (this.max_quota != null) {
                    data.max_quota = this.max_quota;
                }
                if (this.min_ratio != null) {
                    data.min_ratio = this.min_ratio;
                }
                if (this.max_ratio != null) {
                    data.max_ratio = this.max_ratio;
                }
                if (this.multiple != null) {
                    data.multiple = this.multiple;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_bet_amount != 0) writer.writeInt64(1, this.min_bet_amount);
                if (this.max_bet_amount != 0) writer.writeInt64(2, this.max_bet_amount);
                if (this.min_quota != 0) writer.writeInt64(3, this.min_quota);
                if (this.max_quota != 0) writer.writeInt64(4, this.max_quota);
                if (this.min_ratio.length) writer.writeString(5, this.min_ratio);
                if (this.max_ratio.length) writer.writeString(6, this.max_ratio);
                if (this.multiple.length) writer.writeString(7, this.multiple);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RebateRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_bet_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_bet_amount = reader.readInt64();
                            break;
                        case 3:
                            message.min_quota = reader.readInt64();
                            break;
                        case 4:
                            message.max_quota = reader.readInt64();
                            break;
                        case 5:
                            message.min_ratio = reader.readString();
                            break;
                        case 6:
                            message.max_ratio = reader.readString();
                            break;
                        case 7:
                            message.multiple = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RebateRule {
                return RebateRule.deserialize(bytes);
            }
        }
    }
    export class DailyBetStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      available_bonus_amount?: number;
                      cumulative_bonus_amount?: number;
                      today_bet_amount?: number;
                      bonus_amount_range?: number[];
                      upper_bet_amount?: number;
                      upper_bonus_amount_range?: number[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4, 6],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("available_bonus_amount" in data && data.available_bonus_amount != undefined) {
                    this.available_bonus_amount = data.available_bonus_amount;
                }
                if (
                    "cumulative_bonus_amount" in data &&
                    data.cumulative_bonus_amount != undefined
                ) {
                    this.cumulative_bonus_amount = data.cumulative_bonus_amount;
                }
                if ("today_bet_amount" in data && data.today_bet_amount != undefined) {
                    this.today_bet_amount = data.today_bet_amount;
                }
                if ("bonus_amount_range" in data && data.bonus_amount_range != undefined) {
                    this.bonus_amount_range = data.bonus_amount_range;
                }
                if ("upper_bet_amount" in data && data.upper_bet_amount != undefined) {
                    this.upper_bet_amount = data.upper_bet_amount;
                }
                if (
                    "upper_bonus_amount_range" in data &&
                    data.upper_bonus_amount_range != undefined
                ) {
                    this.upper_bonus_amount_range = data.upper_bonus_amount_range;
                }
            }
        }
        get available_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set available_bonus_amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cumulative_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cumulative_bonus_amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get today_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set today_bet_amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bonus_amount_range() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bonus_amount_range(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get upper_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set upper_bet_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get upper_bonus_amount_range() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set upper_bonus_amount_range(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            available_bonus_amount?: number;
            cumulative_bonus_amount?: number;
            today_bet_amount?: number;
            bonus_amount_range?: number[];
            upper_bet_amount?: number;
            upper_bonus_amount_range?: number[];
        }): DailyBetStat {
            const message = new DailyBetStat({});
            if (data.available_bonus_amount != null) {
                message.available_bonus_amount = data.available_bonus_amount;
            }
            if (data.cumulative_bonus_amount != null) {
                message.cumulative_bonus_amount = data.cumulative_bonus_amount;
            }
            if (data.today_bet_amount != null) {
                message.today_bet_amount = data.today_bet_amount;
            }
            if (data.bonus_amount_range != null) {
                message.bonus_amount_range = data.bonus_amount_range;
            }
            if (data.upper_bet_amount != null) {
                message.upper_bet_amount = data.upper_bet_amount;
            }
            if (data.upper_bonus_amount_range != null) {
                message.upper_bonus_amount_range = data.upper_bonus_amount_range;
            }
            return message;
        }
        toObject() {
            const data: {
                available_bonus_amount?: number;
                cumulative_bonus_amount?: number;
                today_bet_amount?: number;
                bonus_amount_range?: number[];
                upper_bet_amount?: number;
                upper_bonus_amount_range?: number[];
            } = {};
            if (this.available_bonus_amount != null) {
                data.available_bonus_amount = this.available_bonus_amount;
            }
            if (this.cumulative_bonus_amount != null) {
                data.cumulative_bonus_amount = this.cumulative_bonus_amount;
            }
            if (this.today_bet_amount != null) {
                data.today_bet_amount = this.today_bet_amount;
            }
            if (this.bonus_amount_range != null) {
                data.bonus_amount_range = this.bonus_amount_range;
            }
            if (this.upper_bet_amount != null) {
                data.upper_bet_amount = this.upper_bet_amount;
            }
            if (this.upper_bonus_amount_range != null) {
                data.upper_bonus_amount_range = this.upper_bonus_amount_range;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.available_bonus_amount != 0) writer.writeInt64(1, this.available_bonus_amount);
            if (this.cumulative_bonus_amount != 0)
                writer.writeInt64(2, this.cumulative_bonus_amount);
            if (this.today_bet_amount != 0) writer.writeInt64(3, this.today_bet_amount);
            if (this.bonus_amount_range.length) writer.writePackedInt64(4, this.bonus_amount_range);
            if (this.upper_bet_amount != 0) writer.writeInt64(5, this.upper_bet_amount);
            if (this.upper_bonus_amount_range.length)
                writer.writePackedInt64(6, this.upper_bonus_amount_range);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBetStat {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBetStat();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.available_bonus_amount = reader.readInt64();
                        break;
                    case 2:
                        message.cumulative_bonus_amount = reader.readInt64();
                        break;
                    case 3:
                        message.today_bet_amount = reader.readInt64();
                        break;
                    case 4:
                        message.bonus_amount_range = reader.readPackedInt64();
                        break;
                    case 5:
                        message.upper_bet_amount = reader.readInt64();
                        break;
                    case 6:
                        message.upper_bonus_amount_range = reader.readPackedInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBetStat {
            return DailyBetStat.deserialize(bytes);
        }
    }
    export class RebateDailyBetConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateDailyBetConfReq {
            const message = new RebateDailyBetConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateDailyBetConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateDailyBetConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateDailyBetConfReq {
            return RebateDailyBetConfReq.deserialize(bytes);
        }
    }
    export class RebateDailyBetConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: RebateDailyBetConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                RebateDailyBetConfResp.RespData,
                2
            ) as RebateDailyBetConfResp.RespData;
        }
        set data(value: RebateDailyBetConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof RebateDailyBetConfResp.RespData.prototype.toObject>;
        }): RebateDailyBetConfResp {
            const message = new RebateDailyBetConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = RebateDailyBetConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof RebateDailyBetConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateDailyBetConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateDailyBetConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = RebateDailyBetConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateDailyBetConfResp {
            return RebateDailyBetConfResp.deserialize(bytes);
        }
    }
    export namespace RebateDailyBetConfResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          conf?: DailyBetConf;
                          user_stat?: DailyBetStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("user_stat" in data && data.user_stat != undefined) {
                        this.user_stat = data.user_stat;
                    }
                }
            }
            get conf() {
                return pb_1.Message.getWrapperField(this, DailyBetConf, 1) as DailyBetConf;
            }
            set conf(value: DailyBetConf) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_stat() {
                return pb_1.Message.getWrapperField(this, DailyBetStat, 2) as DailyBetStat;
            }
            set user_stat(value: DailyBetStat) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_user_stat() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                conf?: ReturnType<typeof DailyBetConf.prototype.toObject>;
                user_stat?: ReturnType<typeof DailyBetStat.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.conf != null) {
                    message.conf = DailyBetConf.fromObject(data.conf);
                }
                if (data.user_stat != null) {
                    message.user_stat = DailyBetStat.fromObject(data.user_stat);
                }
                return message;
            }
            toObject() {
                const data: {
                    conf?: ReturnType<typeof DailyBetConf.prototype.toObject>;
                    user_stat?: ReturnType<typeof DailyBetStat.prototype.toObject>;
                } = {};
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.user_stat != null) {
                    data.user_stat = this.user_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_conf)
                    writer.writeMessage(1, this.conf, () => this.conf.serialize(writer));
                if (this.has_user_stat)
                    writer.writeMessage(2, this.user_stat, () => this.user_stat.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = DailyBetConf.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.user_stat,
                                () => (message.user_stat = DailyBetStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/rebate/daily_bet/receive/
       **/
    export class RebateReceiveDailyBetBonusReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateReceiveDailyBetBonusReq {
            const message = new RebateReceiveDailyBetBonusReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateReceiveDailyBetBonusReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveDailyBetBonusReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveDailyBetBonusReq {
            return RebateReceiveDailyBetBonusReq.deserialize(bytes);
        }
    }
    export class RebateReceiveDailyBetBonusResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): RebateReceiveDailyBetBonusResp {
            const message = new RebateReceiveDailyBetBonusResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateReceiveDailyBetBonusResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveDailyBetBonusResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveDailyBetBonusResp {
            return RebateReceiveDailyBetBonusResp.deserialize(bytes);
        }
    }

    /** 
      多日活跃返利
       act/rebate/multi_active/conf/
       **/
    export class MultiActiveConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      title?: string;
                      min_days?: number;
                      max_award_amount?: number;
                      rebate_rules?: MultiActiveConf.RebateRule[];
                      effected_at?: number;
                      expired_at?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [5],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("min_days" in data && data.min_days != undefined) {
                    this.min_days = data.min_days;
                }
                if ("max_award_amount" in data && data.max_award_amount != undefined) {
                    this.max_award_amount = data.max_award_amount;
                }
                if ("rebate_rules" in data && data.rebate_rules != undefined) {
                    this.rebate_rules = data.rebate_rules;
                }
                if ("effected_at" in data && data.effected_at != undefined) {
                    this.effected_at = data.effected_at;
                }
                if ("expired_at" in data && data.expired_at != undefined) {
                    this.expired_at = data.expired_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get min_days() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_days(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_award_amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_award_amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rebate_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                MultiActiveConf.RebateRule,
                5
            ) as MultiActiveConf.RebateRule[];
        }
        set rebate_rules(value: MultiActiveConf.RebateRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get effected_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set effected_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expired_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expired_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            min_days?: number;
            max_award_amount?: number;
            rebate_rules?: ReturnType<typeof MultiActiveConf.RebateRule.prototype.toObject>[];
            effected_at?: number;
            expired_at?: number;
        }): MultiActiveConf {
            const message = new MultiActiveConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.min_days != null) {
                message.min_days = data.min_days;
            }
            if (data.max_award_amount != null) {
                message.max_award_amount = data.max_award_amount;
            }
            if (data.rebate_rules != null) {
                message.rebate_rules = data.rebate_rules.map((item) =>
                    MultiActiveConf.RebateRule.fromObject(item)
                );
            }
            if (data.effected_at != null) {
                message.effected_at = data.effected_at;
            }
            if (data.expired_at != null) {
                message.expired_at = data.expired_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                min_days?: number;
                max_award_amount?: number;
                rebate_rules?: ReturnType<typeof MultiActiveConf.RebateRule.prototype.toObject>[];
                effected_at?: number;
                expired_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.min_days != null) {
                data.min_days = this.min_days;
            }
            if (this.max_award_amount != null) {
                data.max_award_amount = this.max_award_amount;
            }
            if (this.rebate_rules != null) {
                data.rebate_rules = this.rebate_rules.map((item: MultiActiveConf.RebateRule) =>
                    item.toObject()
                );
            }
            if (this.effected_at != null) {
                data.effected_at = this.effected_at;
            }
            if (this.expired_at != null) {
                data.expired_at = this.expired_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.title.length) writer.writeString(2, this.title);
            if (this.min_days != 0) writer.writeInt32(3, this.min_days);
            if (this.max_award_amount != 0) writer.writeInt64(4, this.max_award_amount);
            if (this.rebate_rules.length)
                writer.writeRepeatedMessage(
                    5,
                    this.rebate_rules,
                    (item: MultiActiveConf.RebateRule) => item.serialize(writer)
                );
            if (this.effected_at != 0) writer.writeInt64(6, this.effected_at);
            if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiActiveConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MultiActiveConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.min_days = reader.readInt32();
                        break;
                    case 4:
                        message.max_award_amount = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message.rebate_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                5,
                                MultiActiveConf.RebateRule.deserialize(reader),
                                MultiActiveConf.RebateRule
                            )
                        );
                        break;
                    case 6:
                        message.effected_at = reader.readInt64();
                        break;
                    case 7:
                        message.expired_at = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiActiveConf {
            return MultiActiveConf.deserialize(bytes);
        }
    }
    export namespace MultiActiveConf {
        export class RebateRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_recharge_amount?: number;
                          max_recharge_amount?: number;
                          min_quota?: number;
                          max_quota?: number;
                          min_ratio?: string;
                          max_ratio?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_recharge_amount" in data && data.min_recharge_amount != undefined) {
                        this.min_recharge_amount = data.min_recharge_amount;
                    }
                    if ("max_recharge_amount" in data && data.max_recharge_amount != undefined) {
                        this.max_recharge_amount = data.max_recharge_amount;
                    }
                    if ("min_quota" in data && data.min_quota != undefined) {
                        this.min_quota = data.min_quota;
                    }
                    if ("max_quota" in data && data.max_quota != undefined) {
                        this.max_quota = data.max_quota;
                    }
                    if ("min_ratio" in data && data.min_ratio != undefined) {
                        this.min_ratio = data.min_ratio;
                    }
                    if ("max_ratio" in data && data.max_ratio != undefined) {
                        this.max_ratio = data.max_ratio;
                    }
                }
            }
            get min_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_recharge_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_recharge_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get min_quota() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set min_quota(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get max_quota() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set max_quota(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get min_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set min_ratio(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get max_ratio() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set max_ratio(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                min_recharge_amount?: number;
                max_recharge_amount?: number;
                min_quota?: number;
                max_quota?: number;
                min_ratio?: string;
                max_ratio?: string;
            }): RebateRule {
                const message = new RebateRule({});
                if (data.min_recharge_amount != null) {
                    message.min_recharge_amount = data.min_recharge_amount;
                }
                if (data.max_recharge_amount != null) {
                    message.max_recharge_amount = data.max_recharge_amount;
                }
                if (data.min_quota != null) {
                    message.min_quota = data.min_quota;
                }
                if (data.max_quota != null) {
                    message.max_quota = data.max_quota;
                }
                if (data.min_ratio != null) {
                    message.min_ratio = data.min_ratio;
                }
                if (data.max_ratio != null) {
                    message.max_ratio = data.max_ratio;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_recharge_amount?: number;
                    max_recharge_amount?: number;
                    min_quota?: number;
                    max_quota?: number;
                    min_ratio?: string;
                    max_ratio?: string;
                } = {};
                if (this.min_recharge_amount != null) {
                    data.min_recharge_amount = this.min_recharge_amount;
                }
                if (this.max_recharge_amount != null) {
                    data.max_recharge_amount = this.max_recharge_amount;
                }
                if (this.min_quota != null) {
                    data.min_quota = this.min_quota;
                }
                if (this.max_quota != null) {
                    data.max_quota = this.max_quota;
                }
                if (this.min_ratio != null) {
                    data.min_ratio = this.min_ratio;
                }
                if (this.max_ratio != null) {
                    data.max_ratio = this.max_ratio;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_recharge_amount != 0) writer.writeInt64(1, this.min_recharge_amount);
                if (this.max_recharge_amount != 0) writer.writeInt64(2, this.max_recharge_amount);
                if (this.min_quota != 0) writer.writeInt64(3, this.min_quota);
                if (this.max_quota != 0) writer.writeInt64(4, this.max_quota);
                if (this.min_ratio.length) writer.writeString(5, this.min_ratio);
                if (this.max_ratio.length) writer.writeString(6, this.max_ratio);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RebateRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_recharge_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_recharge_amount = reader.readInt64();
                            break;
                        case 3:
                            message.min_quota = reader.readInt64();
                            break;
                        case 4:
                            message.max_quota = reader.readInt64();
                            break;
                        case 5:
                            message.min_ratio = reader.readString();
                            break;
                        case 6:
                            message.max_ratio = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RebateRule {
                return RebateRule.deserialize(bytes);
            }
        }
    }
    export class MultiActiveStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      available_bonus_amount?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("available_bonus_amount" in data && data.available_bonus_amount != undefined) {
                    this.available_bonus_amount = data.available_bonus_amount;
                }
            }
        }
        get available_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set available_bonus_amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { available_bonus_amount?: number }): MultiActiveStat {
            const message = new MultiActiveStat({});
            if (data.available_bonus_amount != null) {
                message.available_bonus_amount = data.available_bonus_amount;
            }
            return message;
        }
        toObject() {
            const data: {
                available_bonus_amount?: number;
            } = {};
            if (this.available_bonus_amount != null) {
                data.available_bonus_amount = this.available_bonus_amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.available_bonus_amount != 0) writer.writeInt64(1, this.available_bonus_amount);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiActiveStat {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new MultiActiveStat();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.available_bonus_amount = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiActiveStat {
            return MultiActiveStat.deserialize(bytes);
        }
    }
    export class RebateMultiActiveConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateMultiActiveConfReq {
            const message = new RebateMultiActiveConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateMultiActiveConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateMultiActiveConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateMultiActiveConfReq {
            return RebateMultiActiveConfReq.deserialize(bytes);
        }
    }
    export class RebateMultiActiveConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: RebateMultiActiveConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                RebateMultiActiveConfResp.RespData,
                2
            ) as RebateMultiActiveConfResp.RespData;
        }
        set data(value: RebateMultiActiveConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof RebateMultiActiveConfResp.RespData.prototype.toObject>;
        }): RebateMultiActiveConfResp {
            const message = new RebateMultiActiveConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = RebateMultiActiveConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof RebateMultiActiveConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RebateMultiActiveConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateMultiActiveConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    RebateMultiActiveConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateMultiActiveConfResp {
            return RebateMultiActiveConfResp.deserialize(bytes);
        }
    }
    export namespace RebateMultiActiveConfResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          conf?: MultiActiveConf;
                          user_stat?: MultiActiveStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("user_stat" in data && data.user_stat != undefined) {
                        this.user_stat = data.user_stat;
                    }
                }
            }
            get conf() {
                return pb_1.Message.getWrapperField(this, MultiActiveConf, 1) as MultiActiveConf;
            }
            set conf(value: MultiActiveConf) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_stat() {
                return pb_1.Message.getWrapperField(this, MultiActiveStat, 2) as MultiActiveStat;
            }
            set user_stat(value: MultiActiveStat) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_user_stat() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                conf?: ReturnType<typeof MultiActiveConf.prototype.toObject>;
                user_stat?: ReturnType<typeof MultiActiveStat.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.conf != null) {
                    message.conf = MultiActiveConf.fromObject(data.conf);
                }
                if (data.user_stat != null) {
                    message.user_stat = MultiActiveStat.fromObject(data.user_stat);
                }
                return message;
            }
            toObject() {
                const data: {
                    conf?: ReturnType<typeof MultiActiveConf.prototype.toObject>;
                    user_stat?: ReturnType<typeof MultiActiveStat.prototype.toObject>;
                } = {};
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.user_stat != null) {
                    data.user_stat = this.user_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_conf)
                    writer.writeMessage(1, this.conf, () => this.conf.serialize(writer));
                if (this.has_user_stat)
                    writer.writeMessage(2, this.user_stat, () => this.user_stat.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = MultiActiveConf.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.user_stat,
                                () => (message.user_stat = MultiActiveStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/rebate/multi_active/receive/
       **/
    export class RebateReceiveMultiActiveBonusReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): RebateReceiveMultiActiveBonusReq {
            const message = new RebateReceiveMultiActiveBonusReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveMultiActiveBonusReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveMultiActiveBonusReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveMultiActiveBonusReq {
            return RebateReceiveMultiActiveBonusReq.deserialize(bytes);
        }
    }
    export class RebateReceiveMultiActiveBonusResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): RebateReceiveMultiActiveBonusResp {
            const message = new RebateReceiveMultiActiveBonusResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): RebateReceiveMultiActiveBonusResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RebateReceiveMultiActiveBonusResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RebateReceiveMultiActiveBonusResp {
            return RebateReceiveMultiActiveBonusResp.deserialize(bytes);
        }
    }

    /** 
      在线奖励活动列表
       act/online_bonus/conf/
       **/
    export class OnlineBonusConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): OnlineBonusConfReq {
            const message = new OnlineBonusConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineBonusConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineBonusConfReq {
            return OnlineBonusConfReq.deserialize(bytes);
        }
    }
    export class OnlineBonusConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: OnlineBonusConfResp.OnlineBonusConf[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                OnlineBonusConfResp.OnlineBonusConf,
                2
            ) as OnlineBonusConfResp.OnlineBonusConf[];
        }
        set data(value: OnlineBonusConfResp.OnlineBonusConf[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof OnlineBonusConfResp.OnlineBonusConf.prototype.toObject>[];
        }): OnlineBonusConfResp {
            const message = new OnlineBonusConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) =>
                    OnlineBonusConfResp.OnlineBonusConf.fromObject(item)
                );
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof OnlineBonusConfResp.OnlineBonusConf.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: OnlineBonusConfResp.OnlineBonusConf) =>
                    item.toObject()
                );
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(
                    2,
                    this.data,
                    (item: OnlineBonusConfResp.OnlineBonusConf) => item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineBonusConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                OnlineBonusConfResp.OnlineBonusConf.deserialize(reader),
                                OnlineBonusConfResp.OnlineBonusConf
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineBonusConfResp {
            return OnlineBonusConfResp.deserialize(bytes);
        }
    }
    export namespace OnlineBonusConfResp {
        export class OnlineBonusConf extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          left_ts?: number;
                          effected_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("left_ts" in data && data.left_ts != undefined) {
                        this.left_ts = data.left_ts;
                    }
                    if ("effected_at" in data && data.effected_at != undefined) {
                        this.effected_at = data.effected_at;
                    }
                }
            }
            get left_ts() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set left_ts(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get effected_at() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set effected_at(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { left_ts?: number; effected_at?: number }): OnlineBonusConf {
                const message = new OnlineBonusConf({});
                if (data.left_ts != null) {
                    message.left_ts = data.left_ts;
                }
                if (data.effected_at != null) {
                    message.effected_at = data.effected_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    left_ts?: number;
                    effected_at?: number;
                } = {};
                if (this.left_ts != null) {
                    data.left_ts = this.left_ts;
                }
                if (this.effected_at != null) {
                    data.effected_at = this.effected_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.left_ts != 0) writer.writeInt64(1, this.left_ts);
                if (this.effected_at != 0) writer.writeInt64(2, this.effected_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConf {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new OnlineBonusConf();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.left_ts = reader.readInt64();
                            break;
                        case 2:
                            message.effected_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): OnlineBonusConf {
                return OnlineBonusConf.deserialize(bytes);
            }
        }
    }

    /** 
      任务系统
       act/task_center/info/
       **/
    export class TaskCenterInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            id?: string;
        }): TaskCenterInfoReq {
            const message = new TaskCenterInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.id.length) writer.writeString(2, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCenterInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new TaskCenterInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaskCenterInfoReq {
            return TaskCenterInfoReq.deserialize(bytes);
        }
    }
    export class TaskCenterInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: TaskCenterInfoResp.TaskCard;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                TaskCenterInfoResp.TaskCard,
                2
            ) as TaskCenterInfoResp.TaskCard;
        }
        set data(value: TaskCenterInfoResp.TaskCard) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof TaskCenterInfoResp.TaskCard.prototype.toObject>;
        }): TaskCenterInfoResp {
            const message = new TaskCenterInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = TaskCenterInfoResp.TaskCard.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof TaskCenterInfoResp.TaskCard.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCenterInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new TaskCenterInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = TaskCenterInfoResp.TaskCard.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaskCenterInfoResp {
            return TaskCenterInfoResp.deserialize(bytes);
        }
    }
    export namespace TaskCenterInfoResp {
        export enum TaskStarLevel {
            DEFAULT = 0,

            /** 
              1星
               **/
            ONE_STAR = 1,

            /** 
              2星
               **/
            TWO_STAR = 2,

            /** 
              3星
               **/
            THREE_STAR = 3,
        }
        export class BonusInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          props_id?: number;
                          count?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("props_id" in data && data.props_id != undefined) {
                        this.props_id = data.props_id;
                    }
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                }
            }
            get props_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set props_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set count(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { props_id?: number; count?: string }): BonusInfo {
                const message = new BonusInfo({});
                if (data.props_id != null) {
                    message.props_id = data.props_id;
                }
                if (data.count != null) {
                    message.count = data.count;
                }
                return message;
            }
            toObject() {
                const data: {
                    props_id?: number;
                    count?: string;
                } = {};
                if (this.props_id != null) {
                    data.props_id = this.props_id;
                }
                if (this.count != null) {
                    data.count = this.count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.props_id != 0) writer.writeInt32(1, this.props_id);
                if (this.count.length) writer.writeString(2, this.count);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new BonusInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.props_id = reader.readInt32();
                            break;
                        case 2:
                            message.count = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BonusInfo {
                return BonusInfo.deserialize(bytes);
            }
        }
        export class StageInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          current?: number;
                          max?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("current" in data && data.current != undefined) {
                        this.current = data.current;
                    }
                    if ("max" in data && data.max != undefined) {
                        this.max = data.max;
                    }
                }
            }
            get current() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set current(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { current?: number; max?: number }): StageInfo {
                const message = new StageInfo({});
                if (data.current != null) {
                    message.current = data.current;
                }
                if (data.max != null) {
                    message.max = data.max;
                }
                return message;
            }
            toObject() {
                const data: {
                    current?: number;
                    max?: number;
                } = {};
                if (this.current != null) {
                    data.current = this.current;
                }
                if (this.max != null) {
                    data.max = this.max;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.current != 0) writer.writeInt32(1, this.current);
                if (this.max != 0) writer.writeInt32(2, this.max);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StageInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new StageInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.current = reader.readInt32();
                            break;
                        case 2:
                            message.max = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StageInfo {
                return StageInfo.deserialize(bytes);
            }
        }
        export class ScheduleInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          task_item?: string;
                          condition?: number;
                          schedule?: number;
                          game_ids?: number[];
                          pay_types?: number[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [4, 5],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("task_item" in data && data.task_item != undefined) {
                        this.task_item = data.task_item;
                    }
                    if ("condition" in data && data.condition != undefined) {
                        this.condition = data.condition;
                    }
                    if ("schedule" in data && data.schedule != undefined) {
                        this.schedule = data.schedule;
                    }
                    if ("game_ids" in data && data.game_ids != undefined) {
                        this.game_ids = data.game_ids;
                    }
                    if ("pay_types" in data && data.pay_types != undefined) {
                        this.pay_types = data.pay_types;
                    }
                }
            }

            /** 
              任务类型
               **/
            get task_item() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }

            /** 
              任务类型
               **/
            set task_item(value: string) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              任务条件
               **/
            get condition() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              任务条件
               **/
            set condition(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              任务进度
               **/
            get schedule() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              任务进度
               **/
            set schedule(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              下注任务需要下注的游戏
               **/
            get game_ids() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
            }

            /** 
              下注任务需要下注的游戏
               **/
            set game_ids(value: number[]) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              充值任务需要的充值类型
               **/
            get pay_types() {
                return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
            }

            /** 
              充值任务需要的充值类型
               **/
            set pay_types(value: number[]) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                task_item?: string;
                condition?: number;
                schedule?: number;
                game_ids?: number[];
                pay_types?: number[];
            }): ScheduleInfo {
                const message = new ScheduleInfo({});
                if (data.task_item != null) {
                    message.task_item = data.task_item;
                }
                if (data.condition != null) {
                    message.condition = data.condition;
                }
                if (data.schedule != null) {
                    message.schedule = data.schedule;
                }
                if (data.game_ids != null) {
                    message.game_ids = data.game_ids;
                }
                if (data.pay_types != null) {
                    message.pay_types = data.pay_types;
                }
                return message;
            }
            toObject() {
                const data: {
                    task_item?: string;
                    condition?: number;
                    schedule?: number;
                    game_ids?: number[];
                    pay_types?: number[];
                } = {};
                if (this.task_item != null) {
                    data.task_item = this.task_item;
                }
                if (this.condition != null) {
                    data.condition = this.condition;
                }
                if (this.schedule != null) {
                    data.schedule = this.schedule;
                }
                if (this.game_ids != null) {
                    data.game_ids = this.game_ids;
                }
                if (this.pay_types != null) {
                    data.pay_types = this.pay_types;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.task_item.length) writer.writeString(1, this.task_item);
                if (this.condition != 0) writer.writeInt64(2, this.condition);
                if (this.schedule != 0) writer.writeInt64(3, this.schedule);
                if (this.game_ids.length) writer.writePackedInt32(4, this.game_ids);
                if (this.pay_types.length) writer.writePackedInt32(5, this.pay_types);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScheduleInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ScheduleInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.task_item = reader.readString();
                            break;
                        case 2:
                            message.condition = reader.readInt64();
                            break;
                        case 3:
                            message.schedule = reader.readInt64();
                            break;
                        case 4:
                            message.game_ids = reader.readPackedInt32();
                            break;
                        case 5:
                            message.pay_types = reader.readPackedInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ScheduleInfo {
                return ScheduleInfo.deserialize(bytes);
            }
        }
        export class TaskCard extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          task_id?: string;
                          left_ts?: number;
                          star_level?: TaskCenterInfoResp.TaskStarLevel;
                          round_info?: TaskCenterInfoResp.StageInfo;
                          stage_info?: TaskCenterInfoResp.StageInfo;
                          bonus_info?: TaskCenterInfoResp.BonusInfo[];
                          schedule_info?: TaskCenterInfoResp.ScheduleInfo[];
                          desc?: string;
                          banner?: string;
                          id?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [6, 7],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("task_id" in data && data.task_id != undefined) {
                        this.task_id = data.task_id;
                    }
                    if ("left_ts" in data && data.left_ts != undefined) {
                        this.left_ts = data.left_ts;
                    }
                    if ("star_level" in data && data.star_level != undefined) {
                        this.star_level = data.star_level;
                    }
                    if ("round_info" in data && data.round_info != undefined) {
                        this.round_info = data.round_info;
                    }
                    if ("stage_info" in data && data.stage_info != undefined) {
                        this.stage_info = data.stage_info;
                    }
                    if ("bonus_info" in data && data.bonus_info != undefined) {
                        this.bonus_info = data.bonus_info;
                    }
                    if ("schedule_info" in data && data.schedule_info != undefined) {
                        this.schedule_info = data.schedule_info;
                    }
                    if ("desc" in data && data.desc != undefined) {
                        this.desc = data.desc;
                    }
                    if ("banner" in data && data.banner != undefined) {
                        this.banner = data.banner;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get task_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set task_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              剩余时间 时间戳
               **/
            get left_ts() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              剩余时间 时间戳
               **/
            set left_ts(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              星级
               **/
            get star_level() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    3,
                    TaskCenterInfoResp.TaskStarLevel.DEFAULT
                ) as TaskCenterInfoResp.TaskStarLevel;
            }

            /** 
              星级
               **/
            set star_level(value: TaskCenterInfoResp.TaskStarLevel) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              重复任务
               **/
            get round_info() {
                return pb_1.Message.getWrapperField(
                    this,
                    TaskCenterInfoResp.StageInfo,
                    4
                ) as TaskCenterInfoResp.StageInfo;
            }

            /** 
              重复任务
               **/
            set round_info(value: TaskCenterInfoResp.StageInfo) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_round_info() {
                return pb_1.Message.getField(this, 4) != null;
            }

            /** 
              连环任务
               **/
            get stage_info() {
                return pb_1.Message.getWrapperField(
                    this,
                    TaskCenterInfoResp.StageInfo,
                    5
                ) as TaskCenterInfoResp.StageInfo;
            }

            /** 
              连环任务
               **/
            set stage_info(value: TaskCenterInfoResp.StageInfo) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_stage_info() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get bonus_info() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    TaskCenterInfoResp.BonusInfo,
                    6
                ) as TaskCenterInfoResp.BonusInfo[];
            }
            set bonus_info(value: TaskCenterInfoResp.BonusInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 6, value);
            }
            get schedule_info() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    TaskCenterInfoResp.ScheduleInfo,
                    7
                ) as TaskCenterInfoResp.ScheduleInfo[];
            }
            set schedule_info(value: TaskCenterInfoResp.ScheduleInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 7, value);
            }

            /** 
              完成条件说明 如果不是空字符串 就使用这个显示说明 否则就自己拼接
               **/
            get desc() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }

            /** 
              完成条件说明 如果不是空字符串 就使用这个显示说明 否则就自己拼接
               **/
            set desc(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get banner() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set banner(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 10, value);
            }
            static fromObject(data: {
                task_id?: string;
                left_ts?: number;
                star_level?: TaskCenterInfoResp.TaskStarLevel;
                round_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;
                stage_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;
                bonus_info?: ReturnType<typeof TaskCenterInfoResp.BonusInfo.prototype.toObject>[];
                schedule_info?: ReturnType<
                    typeof TaskCenterInfoResp.ScheduleInfo.prototype.toObject
                >[];
                desc?: string;
                banner?: string;
                id?: string;
            }): TaskCard {
                const message = new TaskCard({});
                if (data.task_id != null) {
                    message.task_id = data.task_id;
                }
                if (data.left_ts != null) {
                    message.left_ts = data.left_ts;
                }
                if (data.star_level != null) {
                    message.star_level = data.star_level;
                }
                if (data.round_info != null) {
                    message.round_info = TaskCenterInfoResp.StageInfo.fromObject(data.round_info);
                }
                if (data.stage_info != null) {
                    message.stage_info = TaskCenterInfoResp.StageInfo.fromObject(data.stage_info);
                }
                if (data.bonus_info != null) {
                    message.bonus_info = data.bonus_info.map((item) =>
                        TaskCenterInfoResp.BonusInfo.fromObject(item)
                    );
                }
                if (data.schedule_info != null) {
                    message.schedule_info = data.schedule_info.map((item) =>
                        TaskCenterInfoResp.ScheduleInfo.fromObject(item)
                    );
                }
                if (data.desc != null) {
                    message.desc = data.desc;
                }
                if (data.banner != null) {
                    message.banner = data.banner;
                }
                if (data.id != null) {
                    message.id = data.id;
                }
                return message;
            }
            toObject() {
                const data: {
                    task_id?: string;
                    left_ts?: number;
                    star_level?: TaskCenterInfoResp.TaskStarLevel;
                    round_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;
                    stage_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;
                    bonus_info?: ReturnType<
                        typeof TaskCenterInfoResp.BonusInfo.prototype.toObject
                    >[];
                    schedule_info?: ReturnType<
                        typeof TaskCenterInfoResp.ScheduleInfo.prototype.toObject
                    >[];
                    desc?: string;
                    banner?: string;
                    id?: string;
                } = {};
                if (this.task_id != null) {
                    data.task_id = this.task_id;
                }
                if (this.left_ts != null) {
                    data.left_ts = this.left_ts;
                }
                if (this.star_level != null) {
                    data.star_level = this.star_level;
                }
                if (this.round_info != null) {
                    data.round_info = this.round_info.toObject();
                }
                if (this.stage_info != null) {
                    data.stage_info = this.stage_info.toObject();
                }
                if (this.bonus_info != null) {
                    data.bonus_info = this.bonus_info.map((item: TaskCenterInfoResp.BonusInfo) =>
                        item.toObject()
                    );
                }
                if (this.schedule_info != null) {
                    data.schedule_info = this.schedule_info.map(
                        (item: TaskCenterInfoResp.ScheduleInfo) => item.toObject()
                    );
                }
                if (this.desc != null) {
                    data.desc = this.desc;
                }
                if (this.banner != null) {
                    data.banner = this.banner;
                }
                if (this.id != null) {
                    data.id = this.id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.task_id.length) writer.writeString(1, this.task_id);
                if (this.left_ts != 0) writer.writeInt64(2, this.left_ts);
                if (this.star_level != TaskCenterInfoResp.TaskStarLevel.DEFAULT)
                    writer.writeEnum(3, this.star_level);
                if (this.has_round_info)
                    writer.writeMessage(4, this.round_info, () =>
                        this.round_info.serialize(writer)
                    );
                if (this.has_stage_info)
                    writer.writeMessage(5, this.stage_info, () =>
                        this.stage_info.serialize(writer)
                    );
                if (this.bonus_info.length)
                    writer.writeRepeatedMessage(
                        6,
                        this.bonus_info,
                        (item: TaskCenterInfoResp.BonusInfo) => item.serialize(writer)
                    );
                if (this.schedule_info.length)
                    writer.writeRepeatedMessage(
                        7,
                        this.schedule_info,
                        (item: TaskCenterInfoResp.ScheduleInfo) => item.serialize(writer)
                    );
                if (this.desc.length) writer.writeString(8, this.desc);
                if (this.banner.length) writer.writeString(9, this.banner);
                if (this.id.length) writer.writeString(10, this.id);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCard {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new TaskCard();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.task_id = reader.readString();
                            break;
                        case 2:
                            message.left_ts = reader.readInt64();
                            break;
                        case 3:
                            message.star_level = reader.readEnum();
                            break;
                        case 4:
                            reader.readMessage(
                                message.round_info,
                                () =>
                                    (message.round_info =
                                        TaskCenterInfoResp.StageInfo.deserialize(reader))
                            );
                            break;
                        case 5:
                            reader.readMessage(
                                message.stage_info,
                                () =>
                                    (message.stage_info =
                                        TaskCenterInfoResp.StageInfo.deserialize(reader))
                            );
                            break;
                        case 6:
                            reader.readMessage(message.bonus_info, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    6,
                                    TaskCenterInfoResp.BonusInfo.deserialize(reader),
                                    TaskCenterInfoResp.BonusInfo
                                )
                            );
                            break;
                        case 7:
                            reader.readMessage(message.schedule_info, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    7,
                                    TaskCenterInfoResp.ScheduleInfo.deserialize(reader),
                                    TaskCenterInfoResp.ScheduleInfo
                                )
                            );
                            break;
                        case 8:
                            message.desc = reader.readString();
                            break;
                        case 9:
                            message.banner = reader.readString();
                            break;
                        case 10:
                            message.id = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TaskCard {
                return TaskCard.deserialize(bytes);
            }
        }
    }

    /** 
      每日签到
       act/daily_bonus/info/
       **/
    export class DailyBonusConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      check_in_coefs?: string[];
                      desc?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("check_in_coefs" in data && data.check_in_coefs != undefined) {
                    this.check_in_coefs = data.check_in_coefs;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          连续签到倍数 length == 7
           **/
        get check_in_coefs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }

        /** 
          连续签到倍数 length == 7
           **/
        set check_in_coefs(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            check_in_coefs?: string[];
            desc?: string;
        }): DailyBonusConf {
            const message = new DailyBonusConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.check_in_coefs != null) {
                message.check_in_coefs = data.check_in_coefs;
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                check_in_coefs?: string[];
                desc?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.check_in_coefs != null) {
                data.check_in_coefs = this.check_in_coefs;
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.check_in_coefs.length) writer.writeRepeatedString(2, this.check_in_coefs);
            if (this.desc.length) writer.writeString(3, this.desc);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBonusConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBonusConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.desc = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBonusConf {
            return DailyBonusConf.deserialize(bytes);
        }
    }
    export class DailyBonusInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): DailyBonusInfoReq {
            const message = new DailyBonusInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBonusInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBonusInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBonusInfoReq {
            return DailyBonusInfoReq.deserialize(bytes);
        }
    }
    export class DailyBonusInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: DailyBonusInfoResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                DailyBonusInfoResp.RespData,
                2
            ) as DailyBonusInfoResp.RespData;
        }
        set data(value: DailyBonusInfoResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof DailyBonusInfoResp.RespData.prototype.toObject>;
        }): DailyBonusInfoResp {
            const message = new DailyBonusInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = DailyBonusInfoResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof DailyBonusInfoResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBonusInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBonusInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = DailyBonusInfoResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBonusInfoResp {
            return DailyBonusInfoResp.deserialize(bytes);
        }
    }
    export namespace DailyBonusInfoResp {
        export class DailyStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: string;
                          base_bonus_amount?: number;
                          consecutive_days_no?: number;
                          check_in_coef?: string;
                          recharge_coef?: string;
                          upper_recharge_amount?: number;
                          status?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("base_bonus_amount" in data && data.base_bonus_amount != undefined) {
                        this.base_bonus_amount = data.base_bonus_amount;
                    }
                    if ("consecutive_days_no" in data && data.consecutive_days_no != undefined) {
                        this.consecutive_days_no = data.consecutive_days_no;
                    }
                    if ("check_in_coef" in data && data.check_in_coef != undefined) {
                        this.check_in_coef = data.check_in_coef;
                    }
                    if ("recharge_coef" in data && data.recharge_coef != undefined) {
                        this.recharge_coef = data.recharge_coef;
                    }
                    if (
                        "upper_recharge_amount" in data &&
                        data.upper_recharge_amount != undefined
                    ) {
                        this.upper_recharge_amount = data.upper_recharge_amount;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get base_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set base_bonus_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              连续签到天数
               **/
            get consecutive_days_no() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              连续签到天数
               **/
            set consecutive_days_no(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              签到翻倍系数
               **/
            get check_in_coef() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }

            /** 
              签到翻倍系数
               **/
            set check_in_coef(value: string) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              充值翻倍系数
               **/
            get recharge_coef() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }

            /** 
              充值翻倍系数
               **/
            set recharge_coef(value: string) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              达到充值翻倍所需充值金额
               **/
            get upper_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }

            /** 
              达到充值翻倍所需充值金额
               **/
            set upper_recharge_amount(value: number) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              0:未领取 1:已领取
               **/
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }

            /** 
              0:未领取 1:已领取
               **/
            set status(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                id?: string;
                base_bonus_amount?: number;
                consecutive_days_no?: number;
                check_in_coef?: string;
                recharge_coef?: string;
                upper_recharge_amount?: number;
                status?: number;
            }): DailyStat {
                const message = new DailyStat({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.base_bonus_amount != null) {
                    message.base_bonus_amount = data.base_bonus_amount;
                }
                if (data.consecutive_days_no != null) {
                    message.consecutive_days_no = data.consecutive_days_no;
                }
                if (data.check_in_coef != null) {
                    message.check_in_coef = data.check_in_coef;
                }
                if (data.recharge_coef != null) {
                    message.recharge_coef = data.recharge_coef;
                }
                if (data.upper_recharge_amount != null) {
                    message.upper_recharge_amount = data.upper_recharge_amount;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    base_bonus_amount?: number;
                    consecutive_days_no?: number;
                    check_in_coef?: string;
                    recharge_coef?: string;
                    upper_recharge_amount?: number;
                    status?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.base_bonus_amount != null) {
                    data.base_bonus_amount = this.base_bonus_amount;
                }
                if (this.consecutive_days_no != null) {
                    data.consecutive_days_no = this.consecutive_days_no;
                }
                if (this.check_in_coef != null) {
                    data.check_in_coef = this.check_in_coef;
                }
                if (this.recharge_coef != null) {
                    data.recharge_coef = this.recharge_coef;
                }
                if (this.upper_recharge_amount != null) {
                    data.upper_recharge_amount = this.upper_recharge_amount;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length) writer.writeString(1, this.id);
                if (this.base_bonus_amount != 0) writer.writeInt64(2, this.base_bonus_amount);
                if (this.consecutive_days_no != 0) writer.writeInt32(3, this.consecutive_days_no);
                if (this.check_in_coef.length) writer.writeString(4, this.check_in_coef);
                if (this.recharge_coef.length) writer.writeString(5, this.recharge_coef);
                if (this.upper_recharge_amount != 0)
                    writer.writeInt64(6, this.upper_recharge_amount);
                if (this.status != 0) writer.writeInt32(7, this.status);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new DailyStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.base_bonus_amount = reader.readInt64();
                            break;
                        case 3:
                            message.consecutive_days_no = reader.readInt32();
                            break;
                        case 4:
                            message.check_in_coef = reader.readString();
                            break;
                        case 5:
                            message.recharge_coef = reader.readString();
                            break;
                        case 6:
                            message.upper_recharge_amount = reader.readInt64();
                            break;
                        case 7:
                            message.status = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DailyStat {
                return DailyStat.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          daily_stats?: DailyBonusInfoResp.DailyStat[];
                          conf?: DailyBonusConf;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("daily_stats" in data && data.daily_stats != undefined) {
                        this.daily_stats = data.daily_stats;
                    }
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                }
            }

            /** 
              length == consecutive_days_no
               **/
            get daily_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    DailyBonusInfoResp.DailyStat,
                    1
                ) as DailyBonusInfoResp.DailyStat[];
            }

            /** 
              length == consecutive_days_no
               **/
            set daily_stats(value: DailyBonusInfoResp.DailyStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get conf() {
                return pb_1.Message.getWrapperField(this, DailyBonusConf, 2) as DailyBonusConf;
            }
            set conf(value: DailyBonusConf) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                daily_stats?: ReturnType<typeof DailyBonusInfoResp.DailyStat.prototype.toObject>[];
                conf?: ReturnType<typeof DailyBonusConf.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.daily_stats != null) {
                    message.daily_stats = data.daily_stats.map((item) =>
                        DailyBonusInfoResp.DailyStat.fromObject(item)
                    );
                }
                if (data.conf != null) {
                    message.conf = DailyBonusConf.fromObject(data.conf);
                }
                return message;
            }
            toObject() {
                const data: {
                    daily_stats?: ReturnType<
                        typeof DailyBonusInfoResp.DailyStat.prototype.toObject
                    >[];
                    conf?: ReturnType<typeof DailyBonusConf.prototype.toObject>;
                } = {};
                if (this.daily_stats != null) {
                    data.daily_stats = this.daily_stats.map((item: DailyBonusInfoResp.DailyStat) =>
                        item.toObject()
                    );
                }
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.daily_stats.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.daily_stats,
                        (item: DailyBonusInfoResp.DailyStat) => item.serialize(writer)
                    );
                if (this.has_conf)
                    writer.writeMessage(2, this.conf, () => this.conf.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.daily_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    DailyBonusInfoResp.DailyStat.deserialize(reader),
                                    DailyBonusInfoResp.DailyStat
                                )
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = DailyBonusConf.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/daily_bonus/receive/
       **/
    export class DailyBonusReceiveReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            id?: string;
        }): DailyBonusReceiveReq {
            const message = new DailyBonusReceiveReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.id.length) writer.writeString(2, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBonusReceiveReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBonusReceiveReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBonusReceiveReq {
            return DailyBonusReceiveReq.deserialize(bytes);
        }
    }
    export class DailyBonusReceiveResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): DailyBonusReceiveResp {
            const message = new DailyBonusReceiveResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyBonusReceiveResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DailyBonusReceiveResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyBonusReceiveResp {
            return DailyBonusReceiveResp.deserialize(bytes);
        }
    }

    /** 
      在线抽奖
       act/online_raffle/info/
       **/
    export class OnlineRaffleConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      bonus_rules?: OnlineRaffleConf.BonusRule[];
                      joker_bonus_amount?: number;
                      effected_at?: number;
                      duration?: number;
                      desc?: string;
                      effect_left_mts?: number;
                      cum_recharge_cond?: OnlineRaffleConf.RaffleCond;
                      today_recharge_cond?: OnlineRaffleConf.RaffleCond;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("bonus_rules" in data && data.bonus_rules != undefined) {
                    this.bonus_rules = data.bonus_rules;
                }
                if ("joker_bonus_amount" in data && data.joker_bonus_amount != undefined) {
                    this.joker_bonus_amount = data.joker_bonus_amount;
                }
                if ("effected_at" in data && data.effected_at != undefined) {
                    this.effected_at = data.effected_at;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("effect_left_mts" in data && data.effect_left_mts != undefined) {
                    this.effect_left_mts = data.effect_left_mts;
                }
                if ("cum_recharge_cond" in data && data.cum_recharge_cond != undefined) {
                    this.cum_recharge_cond = data.cum_recharge_cond;
                }
                if ("today_recharge_cond" in data && data.today_recharge_cond != undefined) {
                    this.today_recharge_cond = data.today_recharge_cond;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bonus_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                OnlineRaffleConf.BonusRule,
                2
            ) as OnlineRaffleConf.BonusRule[];
        }
        set bonus_rules(value: OnlineRaffleConf.BonusRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get joker_bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set joker_bonus_amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get effected_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set effected_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get effect_left_mts() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set effect_left_mts(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get cum_recharge_cond() {
            return pb_1.Message.getWrapperField(
                this,
                OnlineRaffleConf.RaffleCond,
                8
            ) as OnlineRaffleConf.RaffleCond;
        }
        set cum_recharge_cond(value: OnlineRaffleConf.RaffleCond) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_cum_recharge_cond() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get today_recharge_cond() {
            return pb_1.Message.getWrapperField(
                this,
                OnlineRaffleConf.RaffleCond,
                9
            ) as OnlineRaffleConf.RaffleCond;
        }
        set today_recharge_cond(value: OnlineRaffleConf.RaffleCond) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_today_recharge_cond() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            id?: string;
            bonus_rules?: ReturnType<typeof OnlineRaffleConf.BonusRule.prototype.toObject>[];
            joker_bonus_amount?: number;
            effected_at?: number;
            duration?: number;
            desc?: string;
            effect_left_mts?: number;
            cum_recharge_cond?: ReturnType<typeof OnlineRaffleConf.RaffleCond.prototype.toObject>;
            today_recharge_cond?: ReturnType<typeof OnlineRaffleConf.RaffleCond.prototype.toObject>;
        }): OnlineRaffleConf {
            const message = new OnlineRaffleConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.bonus_rules != null) {
                message.bonus_rules = data.bonus_rules.map((item) =>
                    OnlineRaffleConf.BonusRule.fromObject(item)
                );
            }
            if (data.joker_bonus_amount != null) {
                message.joker_bonus_amount = data.joker_bonus_amount;
            }
            if (data.effected_at != null) {
                message.effected_at = data.effected_at;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.effect_left_mts != null) {
                message.effect_left_mts = data.effect_left_mts;
            }
            if (data.cum_recharge_cond != null) {
                message.cum_recharge_cond = OnlineRaffleConf.RaffleCond.fromObject(
                    data.cum_recharge_cond
                );
            }
            if (data.today_recharge_cond != null) {
                message.today_recharge_cond = OnlineRaffleConf.RaffleCond.fromObject(
                    data.today_recharge_cond
                );
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                bonus_rules?: ReturnType<typeof OnlineRaffleConf.BonusRule.prototype.toObject>[];
                joker_bonus_amount?: number;
                effected_at?: number;
                duration?: number;
                desc?: string;
                effect_left_mts?: number;
                cum_recharge_cond?: ReturnType<
                    typeof OnlineRaffleConf.RaffleCond.prototype.toObject
                >;
                today_recharge_cond?: ReturnType<
                    typeof OnlineRaffleConf.RaffleCond.prototype.toObject
                >;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.bonus_rules != null) {
                data.bonus_rules = this.bonus_rules.map((item: OnlineRaffleConf.BonusRule) =>
                    item.toObject()
                );
            }
            if (this.joker_bonus_amount != null) {
                data.joker_bonus_amount = this.joker_bonus_amount;
            }
            if (this.effected_at != null) {
                data.effected_at = this.effected_at;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.effect_left_mts != null) {
                data.effect_left_mts = this.effect_left_mts;
            }
            if (this.cum_recharge_cond != null) {
                data.cum_recharge_cond = this.cum_recharge_cond.toObject();
            }
            if (this.today_recharge_cond != null) {
                data.today_recharge_cond = this.today_recharge_cond.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.bonus_rules.length)
                writer.writeRepeatedMessage(
                    2,
                    this.bonus_rules,
                    (item: OnlineRaffleConf.BonusRule) => item.serialize(writer)
                );
            if (this.joker_bonus_amount != 0) writer.writeInt64(3, this.joker_bonus_amount);
            if (this.effected_at != 0) writer.writeInt64(4, this.effected_at);
            if (this.duration != 0) writer.writeInt32(5, this.duration);
            if (this.desc.length) writer.writeString(6, this.desc);
            if (this.effect_left_mts != 0) writer.writeInt64(7, this.effect_left_mts);
            if (this.has_cum_recharge_cond)
                writer.writeMessage(8, this.cum_recharge_cond, () =>
                    this.cum_recharge_cond.serialize(writer)
                );
            if (this.has_today_recharge_cond)
                writer.writeMessage(9, this.today_recharge_cond, () =>
                    this.today_recharge_cond.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineRaffleConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineRaffleConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.bonus_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                OnlineRaffleConf.BonusRule.deserialize(reader),
                                OnlineRaffleConf.BonusRule
                            )
                        );
                        break;
                    case 3:
                        message.joker_bonus_amount = reader.readInt64();
                        break;
                    case 4:
                        message.effected_at = reader.readInt64();
                        break;
                    case 5:
                        message.duration = reader.readInt32();
                        break;
                    case 6:
                        message.desc = reader.readString();
                        break;
                    case 7:
                        message.effect_left_mts = reader.readInt64();
                        break;
                    case 8:
                        reader.readMessage(
                            message.cum_recharge_cond,
                            () =>
                                (message.cum_recharge_cond =
                                    OnlineRaffleConf.RaffleCond.deserialize(reader))
                        );
                        break;
                    case 9:
                        reader.readMessage(
                            message.today_recharge_cond,
                            () =>
                                (message.today_recharge_cond =
                                    OnlineRaffleConf.RaffleCond.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineRaffleConf {
            return OnlineRaffleConf.deserialize(bytes);
        }
    }
    export namespace OnlineRaffleConf {
        export class BonusRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_bonus_amount?: number;
                          max_bonus_amount?: number;
                          card?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_bonus_amount" in data && data.min_bonus_amount != undefined) {
                        this.min_bonus_amount = data.min_bonus_amount;
                    }
                    if ("max_bonus_amount" in data && data.max_bonus_amount != undefined) {
                        this.max_bonus_amount = data.max_bonus_amount;
                    }
                    if ("card" in data && data.card != undefined) {
                        this.card = data.card;
                    }
                }
            }
            get min_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_bonus_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_bonus_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get card() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set card(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                min_bonus_amount?: number;
                max_bonus_amount?: number;
                card?: number;
            }): BonusRule {
                const message = new BonusRule({});
                if (data.min_bonus_amount != null) {
                    message.min_bonus_amount = data.min_bonus_amount;
                }
                if (data.max_bonus_amount != null) {
                    message.max_bonus_amount = data.max_bonus_amount;
                }
                if (data.card != null) {
                    message.card = data.card;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_bonus_amount?: number;
                    max_bonus_amount?: number;
                    card?: number;
                } = {};
                if (this.min_bonus_amount != null) {
                    data.min_bonus_amount = this.min_bonus_amount;
                }
                if (this.max_bonus_amount != null) {
                    data.max_bonus_amount = this.max_bonus_amount;
                }
                if (this.card != null) {
                    data.card = this.card;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_bonus_amount != 0) writer.writeInt64(1, this.min_bonus_amount);
                if (this.max_bonus_amount != 0) writer.writeInt64(2, this.max_bonus_amount);
                if (this.card != 0) writer.writeInt32(3, this.card);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new BonusRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_bonus_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_bonus_amount = reader.readInt64();
                            break;
                        case 3:
                            message.card = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BonusRule {
                return BonusRule.deserialize(bytes);
            }
        }
        export class RaffleCond extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          target?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                }
            }
            get target() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set target(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: { target?: number }): RaffleCond {
                const message = new RaffleCond({});
                if (data.target != null) {
                    message.target = data.target;
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: number;
                } = {};
                if (this.target != null) {
                    data.target = this.target;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.target != 0) writer.writeInt64(1, this.target);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RaffleCond {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RaffleCond();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.target = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RaffleCond {
                return RaffleCond.deserialize(bytes);
            }
        }
    }
    export class OnlineRaffleInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      refresh_user_stat?: boolean;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("refresh_user_stat" in data && data.refresh_user_stat != undefined) {
                    this.refresh_user_stat = data.refresh_user_stat;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          充值后更新用户抽奖次数时使用
           **/
        get refresh_user_stat() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }

        /** 
          充值后更新用户抽奖次数时使用
           **/
        set refresh_user_stat(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            refresh_user_stat?: boolean;
            act_id?: string;
        }): OnlineRaffleInfoReq {
            const message = new OnlineRaffleInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.refresh_user_stat != null) {
                message.refresh_user_stat = data.refresh_user_stat;
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                refresh_user_stat?: boolean;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.refresh_user_stat != null) {
                data.refresh_user_stat = this.refresh_user_stat;
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.refresh_user_stat != false) writer.writeBool(2, this.refresh_user_stat);
            if (this.act_id.length) writer.writeString(3, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineRaffleInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineRaffleInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.refresh_user_stat = reader.readBool();
                        break;
                    case 3:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineRaffleInfoReq {
            return OnlineRaffleInfoReq.deserialize(bytes);
        }
    }
    export class OnlineRaffleInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: OnlineRaffleInfoResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                OnlineRaffleInfoResp.RespData,
                2
            ) as OnlineRaffleInfoResp.RespData;
        }
        set data(value: OnlineRaffleInfoResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof OnlineRaffleInfoResp.RespData.prototype.toObject>;
        }): OnlineRaffleInfoResp {
            const message = new OnlineRaffleInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = OnlineRaffleInfoResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof OnlineRaffleInfoResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineRaffleInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineRaffleInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = OnlineRaffleInfoResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineRaffleInfoResp {
            return OnlineRaffleInfoResp.deserialize(bytes);
        }
    }
    export namespace OnlineRaffleInfoResp {
        export class UserStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: number;
                          cum_recharge_amount?: number;
                          cum_target_recharge_amount?: number;
                          today_recharge_amount?: number;
                          today_target_recharge_amount?: number;
                          raffle_count?: number;
                          remain_raffle_count?: number;
                          cumulative_bonus_amount?: number;
                          hit_idxes?: number[];
                          hit_bonus_amount?: number[];
                          click_idxes?: number[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [9, 10, 11],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("cum_recharge_amount" in data && data.cum_recharge_amount != undefined) {
                        this.cum_recharge_amount = data.cum_recharge_amount;
                    }
                    if (
                        "cum_target_recharge_amount" in data &&
                        data.cum_target_recharge_amount != undefined
                    ) {
                        this.cum_target_recharge_amount = data.cum_target_recharge_amount;
                    }
                    if (
                        "today_recharge_amount" in data &&
                        data.today_recharge_amount != undefined
                    ) {
                        this.today_recharge_amount = data.today_recharge_amount;
                    }
                    if (
                        "today_target_recharge_amount" in data &&
                        data.today_target_recharge_amount != undefined
                    ) {
                        this.today_target_recharge_amount = data.today_target_recharge_amount;
                    }
                    if ("raffle_count" in data && data.raffle_count != undefined) {
                        this.raffle_count = data.raffle_count;
                    }
                    if ("remain_raffle_count" in data && data.remain_raffle_count != undefined) {
                        this.remain_raffle_count = data.remain_raffle_count;
                    }
                    if (
                        "cumulative_bonus_amount" in data &&
                        data.cumulative_bonus_amount != undefined
                    ) {
                        this.cumulative_bonus_amount = data.cumulative_bonus_amount;
                    }
                    if ("hit_idxes" in data && data.hit_idxes != undefined) {
                        this.hit_idxes = data.hit_idxes;
                    }
                    if ("hit_bonus_amount" in data && data.hit_bonus_amount != undefined) {
                        this.hit_bonus_amount = data.hit_bonus_amount;
                    }
                    if ("click_idxes" in data && data.click_idxes != undefined) {
                        this.click_idxes = data.click_idxes;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              三月累积充值
               **/
            get cum_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              三月累积充值
               **/
            set cum_recharge_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              三月所需累积充值
               **/
            get cum_target_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              三月所需累积充值
               **/
            set cum_target_recharge_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              单日充值
               **/
            get today_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              单日充值
               **/
            set today_recharge_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              当日所需充值
               **/
            get today_target_recharge_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }

            /** 
              当日所需充值
               **/
            set today_target_recharge_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              可用次数
               **/
            get raffle_count() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }

            /** 
              可用次数
               **/
            set raffle_count(value: number) {
                pb_1.Message.setField(this, 6, value);
            }

            /** 
              剩余可用次数
               **/
            get remain_raffle_count() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }

            /** 
              剩余可用次数
               **/
            set remain_raffle_count(value: number) {
                pb_1.Message.setField(this, 7, value);
            }

            /** 
              累积获奖金额
               **/
            get cumulative_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }

            /** 
              累积获奖金额
               **/
            set cumulative_bonus_amount(value: number) {
                pb_1.Message.setField(this, 8, value);
            }

            /** 
              抽中的牌
               **/
            get hit_idxes() {
                return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
            }

            /** 
              抽中的牌
               **/
            set hit_idxes(value: number[]) {
                pb_1.Message.setField(this, 9, value);
            }

            /** 
              抽中的牌的奖励
               **/
            get hit_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
            }

            /** 
              抽中的牌的奖励
               **/
            set hit_bonus_amount(value: number[]) {
                pb_1.Message.setField(this, 10, value);
            }

            /** 
              点击的牌的位置
               **/
            get click_idxes() {
                return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
            }

            /** 
              点击的牌的位置
               **/
            set click_idxes(value: number[]) {
                pb_1.Message.setField(this, 11, value);
            }
            static fromObject(data: {
                id?: number;
                cum_recharge_amount?: number;
                cum_target_recharge_amount?: number;
                today_recharge_amount?: number;
                today_target_recharge_amount?: number;
                raffle_count?: number;
                remain_raffle_count?: number;
                cumulative_bonus_amount?: number;
                hit_idxes?: number[];
                hit_bonus_amount?: number[];
                click_idxes?: number[];
            }): UserStat {
                const message = new UserStat({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.cum_recharge_amount != null) {
                    message.cum_recharge_amount = data.cum_recharge_amount;
                }
                if (data.cum_target_recharge_amount != null) {
                    message.cum_target_recharge_amount = data.cum_target_recharge_amount;
                }
                if (data.today_recharge_amount != null) {
                    message.today_recharge_amount = data.today_recharge_amount;
                }
                if (data.today_target_recharge_amount != null) {
                    message.today_target_recharge_amount = data.today_target_recharge_amount;
                }
                if (data.raffle_count != null) {
                    message.raffle_count = data.raffle_count;
                }
                if (data.remain_raffle_count != null) {
                    message.remain_raffle_count = data.remain_raffle_count;
                }
                if (data.cumulative_bonus_amount != null) {
                    message.cumulative_bonus_amount = data.cumulative_bonus_amount;
                }
                if (data.hit_idxes != null) {
                    message.hit_idxes = data.hit_idxes;
                }
                if (data.hit_bonus_amount != null) {
                    message.hit_bonus_amount = data.hit_bonus_amount;
                }
                if (data.click_idxes != null) {
                    message.click_idxes = data.click_idxes;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    cum_recharge_amount?: number;
                    cum_target_recharge_amount?: number;
                    today_recharge_amount?: number;
                    today_target_recharge_amount?: number;
                    raffle_count?: number;
                    remain_raffle_count?: number;
                    cumulative_bonus_amount?: number;
                    hit_idxes?: number[];
                    hit_bonus_amount?: number[];
                    click_idxes?: number[];
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.cum_recharge_amount != null) {
                    data.cum_recharge_amount = this.cum_recharge_amount;
                }
                if (this.cum_target_recharge_amount != null) {
                    data.cum_target_recharge_amount = this.cum_target_recharge_amount;
                }
                if (this.today_recharge_amount != null) {
                    data.today_recharge_amount = this.today_recharge_amount;
                }
                if (this.today_target_recharge_amount != null) {
                    data.today_target_recharge_amount = this.today_target_recharge_amount;
                }
                if (this.raffle_count != null) {
                    data.raffle_count = this.raffle_count;
                }
                if (this.remain_raffle_count != null) {
                    data.remain_raffle_count = this.remain_raffle_count;
                }
                if (this.cumulative_bonus_amount != null) {
                    data.cumulative_bonus_amount = this.cumulative_bonus_amount;
                }
                if (this.hit_idxes != null) {
                    data.hit_idxes = this.hit_idxes;
                }
                if (this.hit_bonus_amount != null) {
                    data.hit_bonus_amount = this.hit_bonus_amount;
                }
                if (this.click_idxes != null) {
                    data.click_idxes = this.click_idxes;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0) writer.writeInt64(1, this.id);
                if (this.cum_recharge_amount != 0) writer.writeInt64(2, this.cum_recharge_amount);
                if (this.cum_target_recharge_amount != 0)
                    writer.writeInt64(3, this.cum_target_recharge_amount);
                if (this.today_recharge_amount != 0)
                    writer.writeInt64(4, this.today_recharge_amount);
                if (this.today_target_recharge_amount != 0)
                    writer.writeInt64(5, this.today_target_recharge_amount);
                if (this.raffle_count != 0) writer.writeInt32(6, this.raffle_count);
                if (this.remain_raffle_count != 0) writer.writeInt32(7, this.remain_raffle_count);
                if (this.cumulative_bonus_amount != 0)
                    writer.writeInt64(8, this.cumulative_bonus_amount);
                if (this.hit_idxes.length) writer.writePackedInt32(9, this.hit_idxes);
                if (this.hit_bonus_amount.length)
                    writer.writePackedInt64(10, this.hit_bonus_amount);
                if (this.click_idxes.length) writer.writePackedInt32(11, this.click_idxes);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new UserStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt64();
                            break;
                        case 2:
                            message.cum_recharge_amount = reader.readInt64();
                            break;
                        case 3:
                            message.cum_target_recharge_amount = reader.readInt64();
                            break;
                        case 4:
                            message.today_recharge_amount = reader.readInt64();
                            break;
                        case 5:
                            message.today_target_recharge_amount = reader.readInt64();
                            break;
                        case 6:
                            message.raffle_count = reader.readInt32();
                            break;
                        case 7:
                            message.remain_raffle_count = reader.readInt32();
                            break;
                        case 8:
                            message.cumulative_bonus_amount = reader.readInt64();
                            break;
                        case 9:
                            message.hit_idxes = reader.readPackedInt32();
                            break;
                        case 10:
                            message.hit_bonus_amount = reader.readPackedInt64();
                            break;
                        case 11:
                            message.click_idxes = reader.readPackedInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UserStat {
                return UserStat.deserialize(bytes);
            }
        }
        export class CumulativeStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          cumulative_bonus_amount?: number;
                          joker_info?: OnlineRaffleInfoResp.CumulativeStat.JokerInfo;
                          id?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if (
                        "cumulative_bonus_amount" in data &&
                        data.cumulative_bonus_amount != undefined
                    ) {
                        this.cumulative_bonus_amount = data.cumulative_bonus_amount;
                    }
                    if ("joker_info" in data && data.joker_info != undefined) {
                        this.joker_info = data.joker_info;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get cumulative_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set cumulative_bonus_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get joker_info() {
                return pb_1.Message.getWrapperField(
                    this,
                    OnlineRaffleInfoResp.CumulativeStat.JokerInfo,
                    2
                ) as OnlineRaffleInfoResp.CumulativeStat.JokerInfo;
            }
            set joker_info(value: OnlineRaffleInfoResp.CumulativeStat.JokerInfo) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_joker_info() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                cumulative_bonus_amount?: number;
                joker_info?: ReturnType<
                    typeof OnlineRaffleInfoResp.CumulativeStat.JokerInfo.prototype.toObject
                >;
                id?: string;
            }): CumulativeStat {
                const message = new CumulativeStat({});
                if (data.cumulative_bonus_amount != null) {
                    message.cumulative_bonus_amount = data.cumulative_bonus_amount;
                }
                if (data.joker_info != null) {
                    message.joker_info = OnlineRaffleInfoResp.CumulativeStat.JokerInfo.fromObject(
                        data.joker_info
                    );
                }
                if (data.id != null) {
                    message.id = data.id;
                }
                return message;
            }
            toObject() {
                const data: {
                    cumulative_bonus_amount?: number;
                    joker_info?: ReturnType<
                        typeof OnlineRaffleInfoResp.CumulativeStat.JokerInfo.prototype.toObject
                    >;
                    id?: string;
                } = {};
                if (this.cumulative_bonus_amount != null) {
                    data.cumulative_bonus_amount = this.cumulative_bonus_amount;
                }
                if (this.joker_info != null) {
                    data.joker_info = this.joker_info.toObject();
                }
                if (this.id != null) {
                    data.id = this.id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.cumulative_bonus_amount != 0)
                    writer.writeInt64(1, this.cumulative_bonus_amount);
                if (this.has_joker_info)
                    writer.writeMessage(2, this.joker_info, () =>
                        this.joker_info.serialize(writer)
                    );
                if (this.id.length) writer.writeString(3, this.id);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CumulativeStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new CumulativeStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.cumulative_bonus_amount = reader.readInt64();
                            break;
                        case 2:
                            reader.readMessage(
                                message.joker_info,
                                () =>
                                    (message.joker_info =
                                        OnlineRaffleInfoResp.CumulativeStat.JokerInfo.deserialize(
                                            reader
                                        ))
                            );
                            break;
                        case 3:
                            message.id = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CumulativeStat {
                return CumulativeStat.deserialize(bytes);
            }
        }
        export namespace CumulativeStat {
            export class JokerInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(
                    data?:
                        | any[]
                        | {
                              user_id?: number;
                              username?: string;
                              avatar?: number;
                              gender?: GENDER;
                              joker_bonus_amount?: number;
                          }
                ) {
                    super();
                    pb_1.Message.initialize(
                        this,
                        Array.isArray(data) ? data : [],
                        0,
                        -1,
                        [],
                        this.#one_of_decls
                    );
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("user_id" in data && data.user_id != undefined) {
                            this.user_id = data.user_id;
                        }
                        if ("username" in data && data.username != undefined) {
                            this.username = data.username;
                        }
                        if ("avatar" in data && data.avatar != undefined) {
                            this.avatar = data.avatar;
                        }
                        if ("gender" in data && data.gender != undefined) {
                            this.gender = data.gender;
                        }
                        if ("joker_bonus_amount" in data && data.joker_bonus_amount != undefined) {
                            this.joker_bonus_amount = data.joker_bonus_amount;
                        }
                    }
                }
                get user_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set user_id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get username() {
                    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                }
                set username(value: string) {
                    pb_1.Message.setField(this, 2, value);
                }
                get avatar() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set avatar(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get gender() {
                    return pb_1.Message.getFieldWithDefault(
                        this,
                        4,
                        GENDER.GENDER_UNKNOWN
                    ) as GENDER;
                }
                set gender(value: GENDER) {
                    pb_1.Message.setField(this, 4, value);
                }
                get joker_bonus_amount() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set joker_bonus_amount(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                static fromObject(data: {
                    user_id?: number;
                    username?: string;
                    avatar?: number;
                    gender?: GENDER;
                    joker_bonus_amount?: number;
                }): JokerInfo {
                    const message = new JokerInfo({});
                    if (data.user_id != null) {
                        message.user_id = data.user_id;
                    }
                    if (data.username != null) {
                        message.username = data.username;
                    }
                    if (data.avatar != null) {
                        message.avatar = data.avatar;
                    }
                    if (data.gender != null) {
                        message.gender = data.gender;
                    }
                    if (data.joker_bonus_amount != null) {
                        message.joker_bonus_amount = data.joker_bonus_amount;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        user_id?: number;
                        username?: string;
                        avatar?: number;
                        gender?: GENDER;
                        joker_bonus_amount?: number;
                    } = {};
                    if (this.user_id != null) {
                        data.user_id = this.user_id;
                    }
                    if (this.username != null) {
                        data.username = this.username;
                    }
                    if (this.avatar != null) {
                        data.avatar = this.avatar;
                    }
                    if (this.gender != null) {
                        data.gender = this.gender;
                    }
                    if (this.joker_bonus_amount != null) {
                        data.joker_bonus_amount = this.joker_bonus_amount;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.user_id != 0) writer.writeInt64(1, this.user_id);
                    if (this.username.length) writer.writeString(2, this.username);
                    if (this.avatar != 0) writer.writeInt32(3, this.avatar);
                    if (this.gender != GENDER.GENDER_UNKNOWN) writer.writeEnum(4, this.gender);
                    if (this.joker_bonus_amount != 0) writer.writeInt64(5, this.joker_bonus_amount);
                    if (!w) return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JokerInfo {
                    const reader =
                            bytes instanceof pb_1.BinaryReader
                                ? bytes
                                : new pb_1.BinaryReader(bytes),
                        message = new JokerInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup()) break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.user_id = reader.readInt64();
                                break;
                            case 2:
                                message.username = reader.readString();
                                break;
                            case 3:
                                message.avatar = reader.readInt32();
                                break;
                            case 4:
                                message.gender = reader.readEnum();
                                break;
                            case 5:
                                message.joker_bonus_amount = reader.readInt64();
                                break;
                            default:
                                reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): JokerInfo {
                    return JokerInfo.deserialize(bytes);
                }
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          user_stat?: OnlineRaffleInfoResp.UserStat;
                          conf?: OnlineRaffleConf;
                          cum_stat?: OnlineRaffleInfoResp.CumulativeStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_stat" in data && data.user_stat != undefined) {
                        this.user_stat = data.user_stat;
                    }
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("cum_stat" in data && data.cum_stat != undefined) {
                        this.cum_stat = data.cum_stat;
                    }
                }
            }
            get user_stat() {
                return pb_1.Message.getWrapperField(
                    this,
                    OnlineRaffleInfoResp.UserStat,
                    1
                ) as OnlineRaffleInfoResp.UserStat;
            }
            set user_stat(value: OnlineRaffleInfoResp.UserStat) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_user_stat() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get conf() {
                return pb_1.Message.getWrapperField(this, OnlineRaffleConf, 2) as OnlineRaffleConf;
            }
            set conf(value: OnlineRaffleConf) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get cum_stat() {
                return pb_1.Message.getWrapperField(
                    this,
                    OnlineRaffleInfoResp.CumulativeStat,
                    3
                ) as OnlineRaffleInfoResp.CumulativeStat;
            }
            set cum_stat(value: OnlineRaffleInfoResp.CumulativeStat) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_cum_stat() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                user_stat?: ReturnType<typeof OnlineRaffleInfoResp.UserStat.prototype.toObject>;
                conf?: ReturnType<typeof OnlineRaffleConf.prototype.toObject>;
                cum_stat?: ReturnType<
                    typeof OnlineRaffleInfoResp.CumulativeStat.prototype.toObject
                >;
            }): RespData {
                const message = new RespData({});
                if (data.user_stat != null) {
                    message.user_stat = OnlineRaffleInfoResp.UserStat.fromObject(data.user_stat);
                }
                if (data.conf != null) {
                    message.conf = OnlineRaffleConf.fromObject(data.conf);
                }
                if (data.cum_stat != null) {
                    message.cum_stat = OnlineRaffleInfoResp.CumulativeStat.fromObject(
                        data.cum_stat
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    user_stat?: ReturnType<typeof OnlineRaffleInfoResp.UserStat.prototype.toObject>;
                    conf?: ReturnType<typeof OnlineRaffleConf.prototype.toObject>;
                    cum_stat?: ReturnType<
                        typeof OnlineRaffleInfoResp.CumulativeStat.prototype.toObject
                    >;
                } = {};
                if (this.user_stat != null) {
                    data.user_stat = this.user_stat.toObject();
                }
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.cum_stat != null) {
                    data.cum_stat = this.cum_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_user_stat)
                    writer.writeMessage(1, this.user_stat, () => this.user_stat.serialize(writer));
                if (this.has_conf)
                    writer.writeMessage(2, this.conf, () => this.conf.serialize(writer));
                if (this.has_cum_stat)
                    writer.writeMessage(3, this.cum_stat, () => this.cum_stat.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.user_stat,
                                () =>
                                    (message.user_stat =
                                        OnlineRaffleInfoResp.UserStat.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = OnlineRaffleConf.deserialize(reader))
                            );
                            break;
                        case 3:
                            reader.readMessage(
                                message.cum_stat,
                                () =>
                                    (message.cum_stat =
                                        OnlineRaffleInfoResp.CumulativeStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/online_raffle/receive/
       **/
    export class OnlineRaffleReceiveReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                      click_idxes?: number[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [3],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
                if ("click_idxes" in data && data.click_idxes != undefined) {
                    this.click_idxes = data.click_idxes;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          conf.id
           **/
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          conf.id
           **/
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get click_idxes() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set click_idxes(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
            click_idxes?: number[];
        }): OnlineRaffleReceiveReq {
            const message = new OnlineRaffleReceiveReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            if (data.click_idxes != null) {
                message.click_idxes = data.click_idxes;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
                click_idxes?: number[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            if (this.click_idxes != null) {
                data.click_idxes = this.click_idxes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (this.click_idxes.length) writer.writePackedInt32(3, this.click_idxes);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineRaffleReceiveReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineRaffleReceiveReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    case 3:
                        message.click_idxes = reader.readPackedInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineRaffleReceiveReq {
            return OnlineRaffleReceiveReq.deserialize(bytes);
        }
    }
    export class OnlineRaffleReceiveResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: OnlineRaffleReceiveResp.BonusData[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                OnlineRaffleReceiveResp.BonusData,
                2
            ) as OnlineRaffleReceiveResp.BonusData[];
        }
        set data(value: OnlineRaffleReceiveResp.BonusData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof OnlineRaffleReceiveResp.BonusData.prototype.toObject>[];
        }): OnlineRaffleReceiveResp {
            const message = new OnlineRaffleReceiveResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) =>
                    OnlineRaffleReceiveResp.BonusData.fromObject(item)
                );
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof OnlineRaffleReceiveResp.BonusData.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: OnlineRaffleReceiveResp.BonusData) =>
                    item.toObject()
                );
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(
                    2,
                    this.data,
                    (item: OnlineRaffleReceiveResp.BonusData) => item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineRaffleReceiveResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new OnlineRaffleReceiveResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                OnlineRaffleReceiveResp.BonusData.deserialize(reader),
                                OnlineRaffleReceiveResp.BonusData
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineRaffleReceiveResp {
            return OnlineRaffleReceiveResp.deserialize(bytes);
        }
    }
    export namespace OnlineRaffleReceiveResp {
        export class BonusData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          amount?: number;
                          hit_idx?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("hit_idx" in data && data.hit_idx != undefined) {
                        this.hit_idx = data.hit_idx;
                    }
                }
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              0 1 2 3 joker: 4
               **/
            get hit_idx() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              0 1 2 3 joker: 4
               **/
            set hit_idx(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { amount?: number; hit_idx?: number }): BonusData {
                const message = new BonusData({});
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.hit_idx != null) {
                    message.hit_idx = data.hit_idx;
                }
                return message;
            }
            toObject() {
                const data: {
                    amount?: number;
                    hit_idx?: number;
                } = {};
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.hit_idx != null) {
                    data.hit_idx = this.hit_idx;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.amount != 0) writer.writeInt64(1, this.amount);
                if (this.hit_idx != 0) writer.writeInt32(2, this.hit_idx);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new BonusData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.amount = reader.readInt64();
                            break;
                        case 2:
                            message.hit_idx = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BonusData {
                return BonusData.deserialize(bytes);
            }
        }
    }
    export class WeeklyCardConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      banner_url?: string;
                      daily_free_bonus_rule?: WeeklyCardConf.DailyFreeBonusRule;
                      weekly_card_rules?: WeeklyCardConf.WeeklyCardRule[];
                      desc?: string;
                      enabled?: boolean;
                      deleted?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("banner_url" in data && data.banner_url != undefined) {
                    this.banner_url = data.banner_url;
                }
                if ("daily_free_bonus_rule" in data && data.daily_free_bonus_rule != undefined) {
                    this.daily_free_bonus_rule = data.daily_free_bonus_rule;
                }
                if ("weekly_card_rules" in data && data.weekly_card_rules != undefined) {
                    this.weekly_card_rules = data.weekly_card_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get banner_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set banner_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get daily_free_bonus_rule() {
            return pb_1.Message.getWrapperField(
                this,
                WeeklyCardConf.DailyFreeBonusRule,
                3
            ) as WeeklyCardConf.DailyFreeBonusRule;
        }
        set daily_free_bonus_rule(value: WeeklyCardConf.DailyFreeBonusRule) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_daily_free_bonus_rule() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get weekly_card_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                WeeklyCardConf.WeeklyCardRule,
                4
            ) as WeeklyCardConf.WeeklyCardRule[];
        }
        set weekly_card_rules(value: WeeklyCardConf.WeeklyCardRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get deleted() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set deleted(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            banner_url?: string;
            daily_free_bonus_rule?: ReturnType<
                typeof WeeklyCardConf.DailyFreeBonusRule.prototype.toObject
            >;
            weekly_card_rules?: ReturnType<
                typeof WeeklyCardConf.WeeklyCardRule.prototype.toObject
            >[];
            desc?: string;
            enabled?: boolean;
            deleted?: boolean;
        }): WeeklyCardConf {
            const message = new WeeklyCardConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.banner_url != null) {
                message.banner_url = data.banner_url;
            }
            if (data.daily_free_bonus_rule != null) {
                message.daily_free_bonus_rule = WeeklyCardConf.DailyFreeBonusRule.fromObject(
                    data.daily_free_bonus_rule
                );
            }
            if (data.weekly_card_rules != null) {
                message.weekly_card_rules = data.weekly_card_rules.map((item) =>
                    WeeklyCardConf.WeeklyCardRule.fromObject(item)
                );
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.deleted != null) {
                message.deleted = data.deleted;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                banner_url?: string;
                daily_free_bonus_rule?: ReturnType<
                    typeof WeeklyCardConf.DailyFreeBonusRule.prototype.toObject
                >;
                weekly_card_rules?: ReturnType<
                    typeof WeeklyCardConf.WeeklyCardRule.prototype.toObject
                >[];
                desc?: string;
                enabled?: boolean;
                deleted?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.banner_url != null) {
                data.banner_url = this.banner_url;
            }
            if (this.daily_free_bonus_rule != null) {
                data.daily_free_bonus_rule = this.daily_free_bonus_rule.toObject();
            }
            if (this.weekly_card_rules != null) {
                data.weekly_card_rules = this.weekly_card_rules.map(
                    (item: WeeklyCardConf.WeeklyCardRule) => item.toObject()
                );
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.deleted != null) {
                data.deleted = this.deleted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.banner_url.length) writer.writeString(2, this.banner_url);
            if (this.has_daily_free_bonus_rule)
                writer.writeMessage(3, this.daily_free_bonus_rule, () =>
                    this.daily_free_bonus_rule.serialize(writer)
                );
            if (this.weekly_card_rules.length)
                writer.writeRepeatedMessage(
                    4,
                    this.weekly_card_rules,
                    (item: WeeklyCardConf.WeeklyCardRule) => item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(5, this.desc);
            if (this.enabled != false) writer.writeBool(6, this.enabled);
            if (this.deleted != false) writer.writeBool(7, this.deleted);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WeeklyCardConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.banner_url = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(
                            message.daily_free_bonus_rule,
                            () =>
                                (message.daily_free_bonus_rule =
                                    WeeklyCardConf.DailyFreeBonusRule.deserialize(reader))
                        );
                        break;
                    case 4:
                        reader.readMessage(message.weekly_card_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                WeeklyCardConf.WeeklyCardRule.deserialize(reader),
                                WeeklyCardConf.WeeklyCardRule
                            )
                        );
                        break;
                    case 5:
                        message.desc = reader.readString();
                        break;
                    case 6:
                        message.enabled = reader.readBool();
                        break;
                    case 7:
                        message.deleted = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WeeklyCardConf {
            return WeeklyCardConf.deserialize(bytes);
        }
    }
    export namespace WeeklyCardConf {
        export class DailyFreeBonusRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          min_bonus_amount?: number;
                          max_bonus_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_bonus_amount" in data && data.min_bonus_amount != undefined) {
                        this.min_bonus_amount = data.min_bonus_amount;
                    }
                    if ("max_bonus_amount" in data && data.max_bonus_amount != undefined) {
                        this.max_bonus_amount = data.max_bonus_amount;
                    }
                }
            }
            get min_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min_bonus_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max_bonus_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                min_bonus_amount?: number;
                max_bonus_amount?: number;
            }): DailyFreeBonusRule {
                const message = new DailyFreeBonusRule({});
                if (data.min_bonus_amount != null) {
                    message.min_bonus_amount = data.min_bonus_amount;
                }
                if (data.max_bonus_amount != null) {
                    message.max_bonus_amount = data.max_bonus_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    min_bonus_amount?: number;
                    max_bonus_amount?: number;
                } = {};
                if (this.min_bonus_amount != null) {
                    data.min_bonus_amount = this.min_bonus_amount;
                }
                if (this.max_bonus_amount != null) {
                    data.max_bonus_amount = this.max_bonus_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min_bonus_amount != 0) writer.writeInt64(1, this.min_bonus_amount);
                if (this.max_bonus_amount != 0) writer.writeInt64(2, this.max_bonus_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyFreeBonusRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new DailyFreeBonusRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min_bonus_amount = reader.readInt64();
                            break;
                        case 2:
                            message.max_bonus_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DailyFreeBonusRule {
                return DailyFreeBonusRule.deserialize(bytes);
            }
        }
        export class WeeklyCardRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          card_type?: CardType;
                          tag?: WeeklyCardTagType;
                          price?: number;
                          rebate_rate?: string;
                          daily_bonus_amount?: number;
                          immediate_bonus_amount?: number;
                          total_bonus_amount?: number;
                          period?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("card_type" in data && data.card_type != undefined) {
                        this.card_type = data.card_type;
                    }
                    if ("tag" in data && data.tag != undefined) {
                        this.tag = data.tag;
                    }
                    if ("price" in data && data.price != undefined) {
                        this.price = data.price;
                    }
                    if ("rebate_rate" in data && data.rebate_rate != undefined) {
                        this.rebate_rate = data.rebate_rate;
                    }
                    if ("daily_bonus_amount" in data && data.daily_bonus_amount != undefined) {
                        this.daily_bonus_amount = data.daily_bonus_amount;
                    }
                    if (
                        "immediate_bonus_amount" in data &&
                        data.immediate_bonus_amount != undefined
                    ) {
                        this.immediate_bonus_amount = data.immediate_bonus_amount;
                    }
                    if ("total_bonus_amount" in data && data.total_bonus_amount != undefined) {
                        this.total_bonus_amount = data.total_bonus_amount;
                    }
                    if ("period" in data && data.period != undefined) {
                        this.period = data.period;
                    }
                }
            }
            get card_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    1,
                    CardType.CARD_TYPE_UNSPECIFIED
                ) as CardType;
            }
            set card_type(value: CardType) {
                pb_1.Message.setField(this, 1, value);
            }
            get tag() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    WeeklyCardTagType.WEEKLY_CARD_TAG_TYPE_UNSPECIFIED
                ) as WeeklyCardTagType;
            }
            set tag(value: WeeklyCardTagType) {
                pb_1.Message.setField(this, 2, value);
            }
            get price() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set price(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get rebate_rate() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set rebate_rate(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get daily_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set daily_bonus_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }

            /** 
              即时奖励金额
               **/
            get immediate_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }

            /** 
              即时奖励金额
               **/
            set immediate_bonus_amount(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get total_bonus_amount() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set total_bonus_amount(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get period() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set period(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                card_type?: CardType;
                tag?: WeeklyCardTagType;
                price?: number;
                rebate_rate?: string;
                daily_bonus_amount?: number;
                immediate_bonus_amount?: number;
                total_bonus_amount?: number;
                period?: number;
            }): WeeklyCardRule {
                const message = new WeeklyCardRule({});
                if (data.card_type != null) {
                    message.card_type = data.card_type;
                }
                if (data.tag != null) {
                    message.tag = data.tag;
                }
                if (data.price != null) {
                    message.price = data.price;
                }
                if (data.rebate_rate != null) {
                    message.rebate_rate = data.rebate_rate;
                }
                if (data.daily_bonus_amount != null) {
                    message.daily_bonus_amount = data.daily_bonus_amount;
                }
                if (data.immediate_bonus_amount != null) {
                    message.immediate_bonus_amount = data.immediate_bonus_amount;
                }
                if (data.total_bonus_amount != null) {
                    message.total_bonus_amount = data.total_bonus_amount;
                }
                if (data.period != null) {
                    message.period = data.period;
                }
                return message;
            }
            toObject() {
                const data: {
                    card_type?: CardType;
                    tag?: WeeklyCardTagType;
                    price?: number;
                    rebate_rate?: string;
                    daily_bonus_amount?: number;
                    immediate_bonus_amount?: number;
                    total_bonus_amount?: number;
                    period?: number;
                } = {};
                if (this.card_type != null) {
                    data.card_type = this.card_type;
                }
                if (this.tag != null) {
                    data.tag = this.tag;
                }
                if (this.price != null) {
                    data.price = this.price;
                }
                if (this.rebate_rate != null) {
                    data.rebate_rate = this.rebate_rate;
                }
                if (this.daily_bonus_amount != null) {
                    data.daily_bonus_amount = this.daily_bonus_amount;
                }
                if (this.immediate_bonus_amount != null) {
                    data.immediate_bonus_amount = this.immediate_bonus_amount;
                }
                if (this.total_bonus_amount != null) {
                    data.total_bonus_amount = this.total_bonus_amount;
                }
                if (this.period != null) {
                    data.period = this.period;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.card_type != CardType.CARD_TYPE_UNSPECIFIED)
                    writer.writeEnum(1, this.card_type);
                if (this.tag != WeeklyCardTagType.WEEKLY_CARD_TAG_TYPE_UNSPECIFIED)
                    writer.writeEnum(2, this.tag);
                if (this.price != 0) writer.writeInt64(3, this.price);
                if (this.rebate_rate.length) writer.writeString(4, this.rebate_rate);
                if (this.daily_bonus_amount != 0) writer.writeInt64(5, this.daily_bonus_amount);
                if (this.immediate_bonus_amount != 0)
                    writer.writeInt64(6, this.immediate_bonus_amount);
                if (this.total_bonus_amount != 0) writer.writeInt64(7, this.total_bonus_amount);
                if (this.period != 0) writer.writeInt32(8, this.period);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new WeeklyCardRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.card_type = reader.readEnum();
                            break;
                        case 2:
                            message.tag = reader.readEnum();
                            break;
                        case 3:
                            message.price = reader.readInt64();
                            break;
                        case 4:
                            message.rebate_rate = reader.readString();
                            break;
                        case 5:
                            message.daily_bonus_amount = reader.readInt64();
                            break;
                        case 6:
                            message.immediate_bonus_amount = reader.readInt64();
                            break;
                        case 7:
                            message.total_bonus_amount = reader.readInt64();
                            break;
                        case 8:
                            message.period = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WeeklyCardRule {
                return WeeklyCardRule.deserialize(bytes);
            }
        }
    }
    export class WeeklyCardInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
        }): WeeklyCardInfoReq {
            const message = new WeeklyCardInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WeeklyCardInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WeeklyCardInfoReq {
            return WeeklyCardInfoReq.deserialize(bytes);
        }
    }
    export class WeeklyCardInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WeeklyCardInfoResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WeeklyCardInfoResp.RespData,
                2
            ) as WeeklyCardInfoResp.RespData;
        }
        set data(value: WeeklyCardInfoResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WeeklyCardInfoResp.RespData.prototype.toObject>;
        }): WeeklyCardInfoResp {
            const message = new WeeklyCardInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WeeklyCardInfoResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WeeklyCardInfoResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WeeklyCardInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = WeeklyCardInfoResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WeeklyCardInfoResp {
            return WeeklyCardInfoResp.deserialize(bytes);
        }
    }
    export namespace WeeklyCardInfoResp {
        export class UserStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          id?: number;
                          card_type?: CardType;
                          daily_bonus_is_receivable?: boolean;
                          remain_days?: number;
                          is_expired?: boolean;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("card_type" in data && data.card_type != undefined) {
                        this.card_type = data.card_type;
                    }
                    if (
                        "daily_bonus_is_receivable" in data &&
                        data.daily_bonus_is_receivable != undefined
                    ) {
                        this.daily_bonus_is_receivable = data.daily_bonus_is_receivable;
                    }
                    if ("remain_days" in data && data.remain_days != undefined) {
                        this.remain_days = data.remain_days;
                    }
                    if ("is_expired" in data && data.is_expired != undefined) {
                        this.is_expired = data.is_expired;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get card_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    CardType.CARD_TYPE_UNSPECIFIED
                ) as CardType;
            }
            set card_type(value: CardType) {
                pb_1.Message.setField(this, 2, value);
            }
            get daily_bonus_is_receivable() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set daily_bonus_is_receivable(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get remain_days() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set remain_days(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get is_expired() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set is_expired(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                id?: number;
                card_type?: CardType;
                daily_bonus_is_receivable?: boolean;
                remain_days?: number;
                is_expired?: boolean;
            }): UserStat {
                const message = new UserStat({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.card_type != null) {
                    message.card_type = data.card_type;
                }
                if (data.daily_bonus_is_receivable != null) {
                    message.daily_bonus_is_receivable = data.daily_bonus_is_receivable;
                }
                if (data.remain_days != null) {
                    message.remain_days = data.remain_days;
                }
                if (data.is_expired != null) {
                    message.is_expired = data.is_expired;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    card_type?: CardType;
                    daily_bonus_is_receivable?: boolean;
                    remain_days?: number;
                    is_expired?: boolean;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.card_type != null) {
                    data.card_type = this.card_type;
                }
                if (this.daily_bonus_is_receivable != null) {
                    data.daily_bonus_is_receivable = this.daily_bonus_is_receivable;
                }
                if (this.remain_days != null) {
                    data.remain_days = this.remain_days;
                }
                if (this.is_expired != null) {
                    data.is_expired = this.is_expired;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0) writer.writeInt64(1, this.id);
                if (this.card_type != CardType.CARD_TYPE_UNSPECIFIED)
                    writer.writeEnum(2, this.card_type);
                if (this.daily_bonus_is_receivable != false)
                    writer.writeBool(3, this.daily_bonus_is_receivable);
                if (this.remain_days != 0) writer.writeInt32(4, this.remain_days);
                if (this.is_expired != false) writer.writeBool(5, this.is_expired);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new UserStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt64();
                            break;
                        case 2:
                            message.card_type = reader.readEnum();
                            break;
                        case 3:
                            message.daily_bonus_is_receivable = reader.readBool();
                            break;
                        case 4:
                            message.remain_days = reader.readInt32();
                            break;
                        case 5:
                            message.is_expired = reader.readBool();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UserStat {
                return UserStat.deserialize(bytes);
            }
        }
        export class FreeBonusStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          free_bonus_is_receivable?: boolean;
                          next_bonus_left_mts?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if (
                        "free_bonus_is_receivable" in data &&
                        data.free_bonus_is_receivable != undefined
                    ) {
                        this.free_bonus_is_receivable = data.free_bonus_is_receivable;
                    }
                    if ("next_bonus_left_mts" in data && data.next_bonus_left_mts != undefined) {
                        this.next_bonus_left_mts = data.next_bonus_left_mts;
                    }
                }
            }
            get free_bonus_is_receivable() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set free_bonus_is_receivable(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get next_bonus_left_mts() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set next_bonus_left_mts(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                free_bonus_is_receivable?: boolean;
                next_bonus_left_mts?: number;
            }): FreeBonusStat {
                const message = new FreeBonusStat({});
                if (data.free_bonus_is_receivable != null) {
                    message.free_bonus_is_receivable = data.free_bonus_is_receivable;
                }
                if (data.next_bonus_left_mts != null) {
                    message.next_bonus_left_mts = data.next_bonus_left_mts;
                }
                return message;
            }
            toObject() {
                const data: {
                    free_bonus_is_receivable?: boolean;
                    next_bonus_left_mts?: number;
                } = {};
                if (this.free_bonus_is_receivable != null) {
                    data.free_bonus_is_receivable = this.free_bonus_is_receivable;
                }
                if (this.next_bonus_left_mts != null) {
                    data.next_bonus_left_mts = this.next_bonus_left_mts;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.free_bonus_is_receivable != false)
                    writer.writeBool(1, this.free_bonus_is_receivable);
                if (this.next_bonus_left_mts != 0) writer.writeInt64(2, this.next_bonus_left_mts);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FreeBonusStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new FreeBonusStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.free_bonus_is_receivable = reader.readBool();
                            break;
                        case 2:
                            message.next_bonus_left_mts = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FreeBonusStat {
                return FreeBonusStat.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          register_days?: number;
                          conf?: WeeklyCardConf;
                          user_stats?: WeeklyCardInfoResp.UserStat[];
                          free_bonus_stat?: WeeklyCardInfoResp.FreeBonusStat;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [3],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("register_days" in data && data.register_days != undefined) {
                        this.register_days = data.register_days;
                    }
                    if ("conf" in data && data.conf != undefined) {
                        this.conf = data.conf;
                    }
                    if ("user_stats" in data && data.user_stats != undefined) {
                        this.user_stats = data.user_stats;
                    }
                    if ("free_bonus_stat" in data && data.free_bonus_stat != undefined) {
                        this.free_bonus_stat = data.free_bonus_stat;
                    }
                }
            }
            get register_days() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set register_days(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get conf() {
                return pb_1.Message.getWrapperField(this, WeeklyCardConf, 2) as WeeklyCardConf;
            }
            set conf(value: WeeklyCardConf) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_conf() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get user_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    WeeklyCardInfoResp.UserStat,
                    3
                ) as WeeklyCardInfoResp.UserStat[];
            }
            set user_stats(value: WeeklyCardInfoResp.UserStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get free_bonus_stat() {
                return pb_1.Message.getWrapperField(
                    this,
                    WeeklyCardInfoResp.FreeBonusStat,
                    4
                ) as WeeklyCardInfoResp.FreeBonusStat;
            }
            set free_bonus_stat(value: WeeklyCardInfoResp.FreeBonusStat) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_free_bonus_stat() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                register_days?: number;
                conf?: ReturnType<typeof WeeklyCardConf.prototype.toObject>;
                user_stats?: ReturnType<typeof WeeklyCardInfoResp.UserStat.prototype.toObject>[];
                free_bonus_stat?: ReturnType<
                    typeof WeeklyCardInfoResp.FreeBonusStat.prototype.toObject
                >;
            }): RespData {
                const message = new RespData({});
                if (data.register_days != null) {
                    message.register_days = data.register_days;
                }
                if (data.conf != null) {
                    message.conf = WeeklyCardConf.fromObject(data.conf);
                }
                if (data.user_stats != null) {
                    message.user_stats = data.user_stats.map((item) =>
                        WeeklyCardInfoResp.UserStat.fromObject(item)
                    );
                }
                if (data.free_bonus_stat != null) {
                    message.free_bonus_stat = WeeklyCardInfoResp.FreeBonusStat.fromObject(
                        data.free_bonus_stat
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    register_days?: number;
                    conf?: ReturnType<typeof WeeklyCardConf.prototype.toObject>;
                    user_stats?: ReturnType<
                        typeof WeeklyCardInfoResp.UserStat.prototype.toObject
                    >[];
                    free_bonus_stat?: ReturnType<
                        typeof WeeklyCardInfoResp.FreeBonusStat.prototype.toObject
                    >;
                } = {};
                if (this.register_days != null) {
                    data.register_days = this.register_days;
                }
                if (this.conf != null) {
                    data.conf = this.conf.toObject();
                }
                if (this.user_stats != null) {
                    data.user_stats = this.user_stats.map((item: WeeklyCardInfoResp.UserStat) =>
                        item.toObject()
                    );
                }
                if (this.free_bonus_stat != null) {
                    data.free_bonus_stat = this.free_bonus_stat.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.register_days != 0) writer.writeInt32(1, this.register_days);
                if (this.has_conf)
                    writer.writeMessage(2, this.conf, () => this.conf.serialize(writer));
                if (this.user_stats.length)
                    writer.writeRepeatedMessage(
                        3,
                        this.user_stats,
                        (item: WeeklyCardInfoResp.UserStat) => item.serialize(writer)
                    );
                if (this.has_free_bonus_stat)
                    writer.writeMessage(4, this.free_bonus_stat, () =>
                        this.free_bonus_stat.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.register_days = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(
                                message.conf,
                                () => (message.conf = WeeklyCardConf.deserialize(reader))
                            );
                            break;
                        case 3:
                            reader.readMessage(message.user_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    3,
                                    WeeklyCardInfoResp.UserStat.deserialize(reader),
                                    WeeklyCardInfoResp.UserStat
                                )
                            );
                            break;
                        case 4:
                            reader.readMessage(
                                message.free_bonus_stat,
                                () =>
                                    (message.free_bonus_stat =
                                        WeeklyCardInfoResp.FreeBonusStat.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      act/weekly_card/receive/
       **/
    export class WeeklyCardReceiveReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      act_id?: string;
                      card_type?: CardType;
                      bonus_type?: WeeklyCardBonusType;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("act_id" in data && data.act_id != undefined) {
                    this.act_id = data.act_id;
                }
                if ("card_type" in data && data.card_type != undefined) {
                    this.card_type = data.card_type;
                }
                if ("bonus_type" in data && data.bonus_type != undefined) {
                    this.bonus_type = data.bonus_type;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get act_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set act_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get card_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                3,
                CardType.CARD_TYPE_UNSPECIFIED
            ) as CardType;
        }
        set card_type(value: CardType) {
            pb_1.Message.setField(this, 3, value);
        }
        get bonus_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                4,
                WeeklyCardBonusType.WEEKLY_CARD_BONUS_TYPE_IMMEDIATE_BONUS
            ) as WeeklyCardBonusType;
        }
        set bonus_type(value: WeeklyCardBonusType) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            act_id?: string;
            card_type?: CardType;
            bonus_type?: WeeklyCardBonusType;
        }): WeeklyCardReceiveReq {
            const message = new WeeklyCardReceiveReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.act_id != null) {
                message.act_id = data.act_id;
            }
            if (data.card_type != null) {
                message.card_type = data.card_type;
            }
            if (data.bonus_type != null) {
                message.bonus_type = data.bonus_type;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                act_id?: string;
                card_type?: CardType;
                bonus_type?: WeeklyCardBonusType;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.act_id != null) {
                data.act_id = this.act_id;
            }
            if (this.card_type != null) {
                data.card_type = this.card_type;
            }
            if (this.bonus_type != null) {
                data.bonus_type = this.bonus_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.act_id.length) writer.writeString(2, this.act_id);
            if (this.card_type != CardType.CARD_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.card_type);
            if (this.bonus_type != WeeklyCardBonusType.WEEKLY_CARD_BONUS_TYPE_IMMEDIATE_BONUS)
                writer.writeEnum(4, this.bonus_type);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardReceiveReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WeeklyCardReceiveReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.act_id = reader.readString();
                        break;
                    case 3:
                        message.card_type = reader.readEnum();
                        break;
                    case 4:
                        message.bonus_type = reader.readEnum();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WeeklyCardReceiveReq {
            return WeeklyCardReceiveReq.deserialize(bytes);
        }
    }
    export class WeeklyCardReceiveResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: WeeklyCardReceiveResp.BonusData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                WeeklyCardReceiveResp.BonusData,
                2
            ) as WeeklyCardReceiveResp.BonusData;
        }
        set data(value: WeeklyCardReceiveResp.BonusData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof WeeklyCardReceiveResp.BonusData.prototype.toObject>;
        }): WeeklyCardReceiveResp {
            const message = new WeeklyCardReceiveResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = WeeklyCardReceiveResp.BonusData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof WeeklyCardReceiveResp.BonusData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCardReceiveResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new WeeklyCardReceiveResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = WeeklyCardReceiveResp.BonusData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WeeklyCardReceiveResp {
            return WeeklyCardReceiveResp.deserialize(bytes);
        }
    }
    export namespace WeeklyCardReceiveResp {
        export class BonusData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: { amount?: number }): BonusData {
                const message = new BonusData({});
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    amount?: number;
                } = {};
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.amount != 0) writer.writeInt64(1, this.amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new BonusData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BonusData {
                return BonusData.deserialize(bytes);
            }
        }
    }

    /** 
      支付配置
       pay/pay_conf/
       **/
    export class PayConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): PayConfReq {
            const message = new PayConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PayConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PayConfReq {
            return PayConfReq.deserialize(bytes);
        }
    }
    export class PayConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PayConfResp.PayChannelConf[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                PayConfResp.PayChannelConf,
                2
            ) as PayConfResp.PayChannelConf[];
        }
        set data(value: PayConfResp.PayChannelConf[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PayConfResp.PayChannelConf.prototype.toObject>[];
        }): PayConfResp {
            const message = new PayConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data.map((item) => PayConfResp.PayChannelConf.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PayConfResp.PayChannelConf.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.map((item: PayConfResp.PayChannelConf) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data.length)
                writer.writeRepeatedMessage(2, this.data, (item: PayConfResp.PayChannelConf) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PayConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(message.data, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                PayConfResp.PayChannelConf.deserialize(reader),
                                PayConfResp.PayChannelConf
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PayConfResp {
            return PayConfResp.deserialize(bytes);
        }
    }
    export namespace PayConfResp {
        export enum JumpType {
            DEFAULT = 0,

            /** 
              普通链接
               **/
            NORMAL_LINK = 1,

            /** 
              视频链接
               **/
            VIDEO_LINK = 2,
        }
        export class SubPayTypes extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          code?: string;
                          min_amount?: number;
                          max_amount?: number;
                          name?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("min_amount" in data && data.min_amount != undefined) {
                        this.min_amount = data.min_amount;
                    }
                    if ("max_amount" in data && data.max_amount != undefined) {
                        this.max_amount = data.max_amount;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get min_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set min_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get max_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set max_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                code?: string;
                min_amount?: number;
                max_amount?: number;
                name?: string;
            }): SubPayTypes {
                const message = new SubPayTypes({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.min_amount != null) {
                    message.min_amount = data.min_amount;
                }
                if (data.max_amount != null) {
                    message.max_amount = data.max_amount;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: string;
                    min_amount?: number;
                    max_amount?: number;
                    name?: string;
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.min_amount != null) {
                    data.min_amount = this.min_amount;
                }
                if (this.max_amount != null) {
                    data.max_amount = this.max_amount;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code.length) writer.writeString(1, this.code);
                if (this.min_amount != 0) writer.writeInt64(2, this.min_amount);
                if (this.max_amount != 0) writer.writeInt64(3, this.max_amount);
                if (this.name.length) writer.writeString(4, this.name);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubPayTypes {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new SubPayTypes();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readString();
                            break;
                        case 2:
                            message.min_amount = reader.readInt64();
                            break;
                        case 3:
                            message.max_amount = reader.readInt64();
                            break;
                        case 4:
                            message.name = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SubPayTypes {
                return SubPayTypes.deserialize(bytes);
            }
        }
        export class Bank extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          name?: string;
                          code?: string;
                          icon?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("icon" in data && data.icon != undefined) {
                        this.icon = data.icon;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get icon() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set icon(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: { name?: string; code?: string; icon?: number }): Bank {
                const message = new Bank({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.icon != null) {
                    message.icon = data.icon;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    code?: string;
                    icon?: number;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.icon != null) {
                    data.icon = this.icon;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length) writer.writeString(1, this.name);
                if (this.code.length) writer.writeString(2, this.code);
                if (this.icon != 0) writer.writeInt32(3, this.icon);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Bank();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.code = reader.readString();
                            break;
                        case 3:
                            message.icon = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Bank {
                return Bank.deserialize(bytes);
            }
        }
        export class AmountDetails extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          amount?: number;
                          award_percent?: number;
                          receive_amount?: number;
                          amount_tag?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("award_percent" in data && data.award_percent != undefined) {
                        this.award_percent = data.award_percent;
                    }
                    if ("receive_amount" in data && data.receive_amount != undefined) {
                        this.receive_amount = data.receive_amount;
                    }
                    if ("amount_tag" in data && data.amount_tag != undefined) {
                        this.amount_tag = data.amount_tag;
                    }
                }
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              返利百分比
               **/
            get award_percent() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              返利百分比
               **/
            set award_percent(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              返利后到账的金额
               **/
            get receive_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              返利后到账的金额
               **/
            set receive_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              金额标签 1. 首充 2. 限时
               **/
            get amount_tag() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              金额标签 1. 首充 2. 限时
               **/
            set amount_tag(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                amount?: number;
                award_percent?: number;
                receive_amount?: number;
                amount_tag?: number;
            }): AmountDetails {
                const message = new AmountDetails({});
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.award_percent != null) {
                    message.award_percent = data.award_percent;
                }
                if (data.receive_amount != null) {
                    message.receive_amount = data.receive_amount;
                }
                if (data.amount_tag != null) {
                    message.amount_tag = data.amount_tag;
                }
                return message;
            }
            toObject() {
                const data: {
                    amount?: number;
                    award_percent?: number;
                    receive_amount?: number;
                    amount_tag?: number;
                } = {};
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.award_percent != null) {
                    data.award_percent = this.award_percent;
                }
                if (this.receive_amount != null) {
                    data.receive_amount = this.receive_amount;
                }
                if (this.amount_tag != null) {
                    data.amount_tag = this.amount_tag;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.amount != 0) writer.writeInt64(1, this.amount);
                if (this.award_percent != 0) writer.writeInt32(2, this.award_percent);
                if (this.receive_amount != 0) writer.writeInt64(3, this.receive_amount);
                if (this.amount_tag != 0) writer.writeInt32(4, this.amount_tag);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AmountDetails {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new AmountDetails();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.amount = reader.readInt64();
                            break;
                        case 2:
                            message.award_percent = reader.readInt32();
                            break;
                        case 3:
                            message.receive_amount = reader.readInt64();
                            break;
                        case 4:
                            message.amount_tag = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AmountDetails {
                return AmountDetails.deserialize(bytes);
            }
        }
        export class ActivityRebateRecharge extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          single_recharge?: PayConfResp.ActivityRebateRecharge.SingleRecharge[];
                          first_recharge?: PayConfResp.ActivityRebateRecharge.FirstRecharge[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1, 2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("single_recharge" in data && data.single_recharge != undefined) {
                        this.single_recharge = data.single_recharge;
                    }
                    if ("first_recharge" in data && data.first_recharge != undefined) {
                        this.first_recharge = data.first_recharge;
                    }
                }
            }
            get single_recharge() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayConfResp.ActivityRebateRecharge.SingleRecharge,
                    1
                ) as PayConfResp.ActivityRebateRecharge.SingleRecharge[];
            }
            set single_recharge(value: PayConfResp.ActivityRebateRecharge.SingleRecharge[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get first_recharge() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayConfResp.ActivityRebateRecharge.FirstRecharge,
                    2
                ) as PayConfResp.ActivityRebateRecharge.FirstRecharge[];
            }
            set first_recharge(value: PayConfResp.ActivityRebateRecharge.FirstRecharge[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                single_recharge?: ReturnType<
                    typeof PayConfResp.ActivityRebateRecharge.SingleRecharge.prototype.toObject
                >[];
                first_recharge?: ReturnType<
                    typeof PayConfResp.ActivityRebateRecharge.FirstRecharge.prototype.toObject
                >[];
            }): ActivityRebateRecharge {
                const message = new ActivityRebateRecharge({});
                if (data.single_recharge != null) {
                    message.single_recharge = data.single_recharge.map((item) =>
                        PayConfResp.ActivityRebateRecharge.SingleRecharge.fromObject(item)
                    );
                }
                if (data.first_recharge != null) {
                    message.first_recharge = data.first_recharge.map((item) =>
                        PayConfResp.ActivityRebateRecharge.FirstRecharge.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    single_recharge?: ReturnType<
                        typeof PayConfResp.ActivityRebateRecharge.SingleRecharge.prototype.toObject
                    >[];
                    first_recharge?: ReturnType<
                        typeof PayConfResp.ActivityRebateRecharge.FirstRecharge.prototype.toObject
                    >[];
                } = {};
                if (this.single_recharge != null) {
                    data.single_recharge = this.single_recharge.map(
                        (item: PayConfResp.ActivityRebateRecharge.SingleRecharge) => item.toObject()
                    );
                }
                if (this.first_recharge != null) {
                    data.first_recharge = this.first_recharge.map(
                        (item: PayConfResp.ActivityRebateRecharge.FirstRecharge) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.single_recharge.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.single_recharge,
                        (item: PayConfResp.ActivityRebateRecharge.SingleRecharge) =>
                            item.serialize(writer)
                    );
                if (this.first_recharge.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.first_recharge,
                        (item: PayConfResp.ActivityRebateRecharge.FirstRecharge) =>
                            item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityRebateRecharge {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ActivityRebateRecharge();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.single_recharge, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    PayConfResp.ActivityRebateRecharge.SingleRecharge.deserialize(
                                        reader
                                    ),
                                    PayConfResp.ActivityRebateRecharge.SingleRecharge
                                )
                            );
                            break;
                        case 2:
                            reader.readMessage(message.first_recharge, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PayConfResp.ActivityRebateRecharge.FirstRecharge.deserialize(
                                        reader
                                    ),
                                    PayConfResp.ActivityRebateRecharge.FirstRecharge
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActivityRebateRecharge {
                return ActivityRebateRecharge.deserialize(bytes);
            }
        }
        export namespace ActivityRebateRecharge {
            /** 
              这里定义各种活动类型的详细字段
               **/
            export class SingleRecharge extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(
                    data?:
                        | any[]
                        | {
                              recharge_amounts?: number[];
                              award_percents?: string[];
                              expired_at?: number;
                              remain_times?: number;
                          }
                ) {
                    super();
                    pb_1.Message.initialize(
                        this,
                        Array.isArray(data) ? data : [],
                        0,
                        -1,
                        [1, 2],
                        this.#one_of_decls
                    );
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("recharge_amounts" in data && data.recharge_amounts != undefined) {
                            this.recharge_amounts = data.recharge_amounts;
                        }
                        if ("award_percents" in data && data.award_percents != undefined) {
                            this.award_percents = data.award_percents;
                        }
                        if ("expired_at" in data && data.expired_at != undefined) {
                            this.expired_at = data.expired_at;
                        }
                        if ("remain_times" in data && data.remain_times != undefined) {
                            this.remain_times = data.remain_times;
                        }
                    }
                }

                /** 
                  [1000, 5000]
                   **/
                get recharge_amounts() {
                    return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
                }

                /** 
                  [1000, 5000]
                   **/
                set recharge_amounts(value: number[]) {
                    pb_1.Message.setField(this, 1, value);
                }

                /** 
                  ["0.1000", "0.1000"] 返利百分比区间
                   **/
                get award_percents() {
                    return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
                }

                /** 
                  ["0.1000", "0.1000"] 返利百分比区间
                   **/
                set award_percents(value: string[]) {
                    pb_1.Message.setField(this, 2, value);
                }

                /** 
                  活动过期时间
                   **/
                get expired_at() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }

                /** 
                  活动过期时间
                   **/
                set expired_at(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }

                /** 
                  剩余次数
                   **/
                get remain_times() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }

                /** 
                  剩余次数
                   **/
                set remain_times(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                static fromObject(data: {
                    recharge_amounts?: number[];
                    award_percents?: string[];
                    expired_at?: number;
                    remain_times?: number;
                }): SingleRecharge {
                    const message = new SingleRecharge({});
                    if (data.recharge_amounts != null) {
                        message.recharge_amounts = data.recharge_amounts;
                    }
                    if (data.award_percents != null) {
                        message.award_percents = data.award_percents;
                    }
                    if (data.expired_at != null) {
                        message.expired_at = data.expired_at;
                    }
                    if (data.remain_times != null) {
                        message.remain_times = data.remain_times;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        recharge_amounts?: number[];
                        award_percents?: string[];
                        expired_at?: number;
                        remain_times?: number;
                    } = {};
                    if (this.recharge_amounts != null) {
                        data.recharge_amounts = this.recharge_amounts;
                    }
                    if (this.award_percents != null) {
                        data.award_percents = this.award_percents;
                    }
                    if (this.expired_at != null) {
                        data.expired_at = this.expired_at;
                    }
                    if (this.remain_times != null) {
                        data.remain_times = this.remain_times;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.recharge_amounts.length)
                        writer.writePackedInt64(1, this.recharge_amounts);
                    if (this.award_percents.length)
                        writer.writeRepeatedString(2, this.award_percents);
                    if (this.expired_at != 0) writer.writeInt64(3, this.expired_at);
                    if (this.remain_times != 0) writer.writeInt64(4, this.remain_times);
                    if (!w) return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleRecharge {
                    const reader =
                            bytes instanceof pb_1.BinaryReader
                                ? bytes
                                : new pb_1.BinaryReader(bytes),
                        message = new SingleRecharge();
                    while (reader.nextField()) {
                        if (reader.isEndGroup()) break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.recharge_amounts = reader.readPackedInt64();
                                break;
                            case 2:
                                pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                                break;
                            case 3:
                                message.expired_at = reader.readInt64();
                                break;
                            case 4:
                                message.remain_times = reader.readInt64();
                                break;
                            default:
                                reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): SingleRecharge {
                    return SingleRecharge.deserialize(bytes);
                }
            }
            export class FirstRecharge extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(
                    data?:
                        | any[]
                        | {
                              recharge_amounts?: number[];
                              award_percents?: string[];
                              amount_tag?: PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag;
                          }
                ) {
                    super();
                    pb_1.Message.initialize(
                        this,
                        Array.isArray(data) ? data : [],
                        0,
                        -1,
                        [1, 2],
                        this.#one_of_decls
                    );
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("recharge_amounts" in data && data.recharge_amounts != undefined) {
                            this.recharge_amounts = data.recharge_amounts;
                        }
                        if ("award_percents" in data && data.award_percents != undefined) {
                            this.award_percents = data.award_percents;
                        }
                        if ("amount_tag" in data && data.amount_tag != undefined) {
                            this.amount_tag = data.amount_tag;
                        }
                    }
                }
                get recharge_amounts() {
                    return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
                }
                set recharge_amounts(value: number[]) {
                    pb_1.Message.setField(this, 1, value);
                }
                get award_percents() {
                    return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
                }
                set award_percents(value: string[]) {
                    pb_1.Message.setField(this, 2, value);
                }
                get amount_tag() {
                    return pb_1.Message.getFieldWithDefault(
                        this,
                        3,
                        PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag.DEFAULT
                    ) as PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag;
                }
                set amount_tag(value: PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag) {
                    pb_1.Message.setField(this, 3, value);
                }
                static fromObject(data: {
                    recharge_amounts?: number[];
                    award_percents?: string[];
                    amount_tag?: PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag;
                }): FirstRecharge {
                    const message = new FirstRecharge({});
                    if (data.recharge_amounts != null) {
                        message.recharge_amounts = data.recharge_amounts;
                    }
                    if (data.award_percents != null) {
                        message.award_percents = data.award_percents;
                    }
                    if (data.amount_tag != null) {
                        message.amount_tag = data.amount_tag;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        recharge_amounts?: number[];
                        award_percents?: string[];
                        amount_tag?: PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag;
                    } = {};
                    if (this.recharge_amounts != null) {
                        data.recharge_amounts = this.recharge_amounts;
                    }
                    if (this.award_percents != null) {
                        data.award_percents = this.award_percents;
                    }
                    if (this.amount_tag != null) {
                        data.amount_tag = this.amount_tag;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.recharge_amounts.length)
                        writer.writePackedInt64(1, this.recharge_amounts);
                    if (this.award_percents.length)
                        writer.writeRepeatedString(2, this.award_percents);
                    if (
                        this.amount_tag !=
                        PayConfResp.ActivityRebateRecharge.FirstRecharge.AmountTag.DEFAULT
                    )
                        writer.writeEnum(3, this.amount_tag);
                    if (!w) return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FirstRecharge {
                    const reader =
                            bytes instanceof pb_1.BinaryReader
                                ? bytes
                                : new pb_1.BinaryReader(bytes),
                        message = new FirstRecharge();
                    while (reader.nextField()) {
                        if (reader.isEndGroup()) break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.recharge_amounts = reader.readPackedInt64();
                                break;
                            case 2:
                                pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                                break;
                            case 3:
                                message.amount_tag = reader.readEnum();
                                break;
                            default:
                                reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): FirstRecharge {
                    return FirstRecharge.deserialize(bytes);
                }
            }
            export namespace FirstRecharge {
                export enum AmountTag {
                    DEFAULT = 0,
                    FIRST_RECHARGE = 1,
                    LIMITED_TIME = 2,
                }
            }
        }
        export class PayChannelConf extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          name?: string;
                          pay_type?: number;
                          amount_list?: number[];
                          min_amount?: number;
                          max_amount?: number;
                          base?: number;
                          tag?: number;
                          comment?: string;
                          android_url?: string;
                          ios_url?: string;
                          banks?: PayConfResp.Bank[];
                          tag_tip?: string;
                          jump_type?: PayConfResp.JumpType;
                          amount_details?: PayConfResp.AmountDetails[];
                          code?: string;
                          with_sub_types?: boolean;
                          sub_pay_types?: PayConfResp.SubPayTypes[];
                          kyc_enabled?: boolean;
                          user_is_kyc?: boolean;
                          pay_channel_conf_id?: string;
                          activity_type?: PayConfResp.PayChannelConf.ActivityType;
                          activity_rebate_recharge?: PayConfResp.ActivityRebateRecharge;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [3, 11, 14, 17],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("pay_type" in data && data.pay_type != undefined) {
                        this.pay_type = data.pay_type;
                    }
                    if ("amount_list" in data && data.amount_list != undefined) {
                        this.amount_list = data.amount_list;
                    }
                    if ("min_amount" in data && data.min_amount != undefined) {
                        this.min_amount = data.min_amount;
                    }
                    if ("max_amount" in data && data.max_amount != undefined) {
                        this.max_amount = data.max_amount;
                    }
                    if ("base" in data && data.base != undefined) {
                        this.base = data.base;
                    }
                    if ("tag" in data && data.tag != undefined) {
                        this.tag = data.tag;
                    }
                    if ("comment" in data && data.comment != undefined) {
                        this.comment = data.comment;
                    }
                    if ("android_url" in data && data.android_url != undefined) {
                        this.android_url = data.android_url;
                    }
                    if ("ios_url" in data && data.ios_url != undefined) {
                        this.ios_url = data.ios_url;
                    }
                    if ("banks" in data && data.banks != undefined) {
                        this.banks = data.banks;
                    }
                    if ("tag_tip" in data && data.tag_tip != undefined) {
                        this.tag_tip = data.tag_tip;
                    }
                    if ("jump_type" in data && data.jump_type != undefined) {
                        this.jump_type = data.jump_type;
                    }
                    if ("amount_details" in data && data.amount_details != undefined) {
                        this.amount_details = data.amount_details;
                    }
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("with_sub_types" in data && data.with_sub_types != undefined) {
                        this.with_sub_types = data.with_sub_types;
                    }
                    if ("sub_pay_types" in data && data.sub_pay_types != undefined) {
                        this.sub_pay_types = data.sub_pay_types;
                    }
                    if ("kyc_enabled" in data && data.kyc_enabled != undefined) {
                        this.kyc_enabled = data.kyc_enabled;
                    }
                    if ("user_is_kyc" in data && data.user_is_kyc != undefined) {
                        this.user_is_kyc = data.user_is_kyc;
                    }
                    if ("pay_channel_conf_id" in data && data.pay_channel_conf_id != undefined) {
                        this.pay_channel_conf_id = data.pay_channel_conf_id;
                    }
                    if ("activity_type" in data && data.activity_type != undefined) {
                        this.activity_type = data.activity_type;
                    }
                    if (
                        "activity_rebate_recharge" in data &&
                        data.activity_rebate_recharge != undefined
                    ) {
                        this.activity_rebate_recharge = data.activity_rebate_recharge;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get pay_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set pay_type(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get amount_list() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set amount_list(value: number[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get min_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set min_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get max_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set max_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get base() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set base(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get tag() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set tag(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get comment() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set comment(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get android_url() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set android_url(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get ios_url() {
                return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
            }
            set ios_url(value: string) {
                pb_1.Message.setField(this, 10, value);
            }
            get banks() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayConfResp.Bank,
                    11
                ) as PayConfResp.Bank[];
            }
            set banks(value: PayConfResp.Bank[]) {
                pb_1.Message.setRepeatedWrapperField(this, 11, value);
            }
            get tag_tip() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set tag_tip(value: string) {
                pb_1.Message.setField(this, 12, value);
            }
            get jump_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    13,
                    PayConfResp.JumpType.DEFAULT
                ) as PayConfResp.JumpType;
            }
            set jump_type(value: PayConfResp.JumpType) {
                pb_1.Message.setField(this, 13, value);
            }
            get amount_details() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayConfResp.AmountDetails,
                    14
                ) as PayConfResp.AmountDetails[];
            }
            set amount_details(value: PayConfResp.AmountDetails[]) {
                pb_1.Message.setRepeatedWrapperField(this, 14, value);
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 15, value);
            }
            get with_sub_types() {
                return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
            }
            set with_sub_types(value: boolean) {
                pb_1.Message.setField(this, 16, value);
            }
            get sub_pay_types() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayConfResp.SubPayTypes,
                    17
                ) as PayConfResp.SubPayTypes[];
            }
            set sub_pay_types(value: PayConfResp.SubPayTypes[]) {
                pb_1.Message.setRepeatedWrapperField(this, 17, value);
            }
            get kyc_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
            }
            set kyc_enabled(value: boolean) {
                pb_1.Message.setField(this, 18, value);
            }
            get user_is_kyc() {
                return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
            }
            set user_is_kyc(value: boolean) {
                pb_1.Message.setField(this, 19, value);
            }
            get pay_channel_conf_id() {
                return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
            }
            set pay_channel_conf_id(value: string) {
                pb_1.Message.setField(this, 20, value);
            }
            get activity_type() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    21,
                    PayConfResp.PayChannelConf.ActivityType.DEFAULT
                ) as PayConfResp.PayChannelConf.ActivityType;
            }
            set activity_type(value: PayConfResp.PayChannelConf.ActivityType) {
                pb_1.Message.setField(this, 21, value);
            }
            get activity_rebate_recharge() {
                return pb_1.Message.getWrapperField(
                    this,
                    PayConfResp.ActivityRebateRecharge,
                    22
                ) as PayConfResp.ActivityRebateRecharge;
            }
            set activity_rebate_recharge(value: PayConfResp.ActivityRebateRecharge) {
                pb_1.Message.setWrapperField(this, 22, value);
            }
            get has_activity_rebate_recharge() {
                return pb_1.Message.getField(this, 22) != null;
            }
            static fromObject(data: {
                name?: string;
                pay_type?: number;
                amount_list?: number[];
                min_amount?: number;
                max_amount?: number;
                base?: number;
                tag?: number;
                comment?: string;
                android_url?: string;
                ios_url?: string;
                banks?: ReturnType<typeof PayConfResp.Bank.prototype.toObject>[];
                tag_tip?: string;
                jump_type?: PayConfResp.JumpType;
                amount_details?: ReturnType<typeof PayConfResp.AmountDetails.prototype.toObject>[];
                code?: string;
                with_sub_types?: boolean;
                sub_pay_types?: ReturnType<typeof PayConfResp.SubPayTypes.prototype.toObject>[];
                kyc_enabled?: boolean;
                user_is_kyc?: boolean;
                pay_channel_conf_id?: string;
                activity_type?: PayConfResp.PayChannelConf.ActivityType;
                activity_rebate_recharge?: ReturnType<
                    typeof PayConfResp.ActivityRebateRecharge.prototype.toObject
                >;
            }): PayChannelConf {
                const message = new PayChannelConf({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.pay_type != null) {
                    message.pay_type = data.pay_type;
                }
                if (data.amount_list != null) {
                    message.amount_list = data.amount_list;
                }
                if (data.min_amount != null) {
                    message.min_amount = data.min_amount;
                }
                if (data.max_amount != null) {
                    message.max_amount = data.max_amount;
                }
                if (data.base != null) {
                    message.base = data.base;
                }
                if (data.tag != null) {
                    message.tag = data.tag;
                }
                if (data.comment != null) {
                    message.comment = data.comment;
                }
                if (data.android_url != null) {
                    message.android_url = data.android_url;
                }
                if (data.ios_url != null) {
                    message.ios_url = data.ios_url;
                }
                if (data.banks != null) {
                    message.banks = data.banks.map((item) => PayConfResp.Bank.fromObject(item));
                }
                if (data.tag_tip != null) {
                    message.tag_tip = data.tag_tip;
                }
                if (data.jump_type != null) {
                    message.jump_type = data.jump_type;
                }
                if (data.amount_details != null) {
                    message.amount_details = data.amount_details.map((item) =>
                        PayConfResp.AmountDetails.fromObject(item)
                    );
                }
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.with_sub_types != null) {
                    message.with_sub_types = data.with_sub_types;
                }
                if (data.sub_pay_types != null) {
                    message.sub_pay_types = data.sub_pay_types.map((item) =>
                        PayConfResp.SubPayTypes.fromObject(item)
                    );
                }
                if (data.kyc_enabled != null) {
                    message.kyc_enabled = data.kyc_enabled;
                }
                if (data.user_is_kyc != null) {
                    message.user_is_kyc = data.user_is_kyc;
                }
                if (data.pay_channel_conf_id != null) {
                    message.pay_channel_conf_id = data.pay_channel_conf_id;
                }
                if (data.activity_type != null) {
                    message.activity_type = data.activity_type;
                }
                if (data.activity_rebate_recharge != null) {
                    message.activity_rebate_recharge =
                        PayConfResp.ActivityRebateRecharge.fromObject(
                            data.activity_rebate_recharge
                        );
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    pay_type?: number;
                    amount_list?: number[];
                    min_amount?: number;
                    max_amount?: number;
                    base?: number;
                    tag?: number;
                    comment?: string;
                    android_url?: string;
                    ios_url?: string;
                    banks?: ReturnType<typeof PayConfResp.Bank.prototype.toObject>[];
                    tag_tip?: string;
                    jump_type?: PayConfResp.JumpType;
                    amount_details?: ReturnType<
                        typeof PayConfResp.AmountDetails.prototype.toObject
                    >[];
                    code?: string;
                    with_sub_types?: boolean;
                    sub_pay_types?: ReturnType<typeof PayConfResp.SubPayTypes.prototype.toObject>[];
                    kyc_enabled?: boolean;
                    user_is_kyc?: boolean;
                    pay_channel_conf_id?: string;
                    activity_type?: PayConfResp.PayChannelConf.ActivityType;
                    activity_rebate_recharge?: ReturnType<
                        typeof PayConfResp.ActivityRebateRecharge.prototype.toObject
                    >;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.pay_type != null) {
                    data.pay_type = this.pay_type;
                }
                if (this.amount_list != null) {
                    data.amount_list = this.amount_list;
                }
                if (this.min_amount != null) {
                    data.min_amount = this.min_amount;
                }
                if (this.max_amount != null) {
                    data.max_amount = this.max_amount;
                }
                if (this.base != null) {
                    data.base = this.base;
                }
                if (this.tag != null) {
                    data.tag = this.tag;
                }
                if (this.comment != null) {
                    data.comment = this.comment;
                }
                if (this.android_url != null) {
                    data.android_url = this.android_url;
                }
                if (this.ios_url != null) {
                    data.ios_url = this.ios_url;
                }
                if (this.banks != null) {
                    data.banks = this.banks.map((item: PayConfResp.Bank) => item.toObject());
                }
                if (this.tag_tip != null) {
                    data.tag_tip = this.tag_tip;
                }
                if (this.jump_type != null) {
                    data.jump_type = this.jump_type;
                }
                if (this.amount_details != null) {
                    data.amount_details = this.amount_details.map(
                        (item: PayConfResp.AmountDetails) => item.toObject()
                    );
                }
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.with_sub_types != null) {
                    data.with_sub_types = this.with_sub_types;
                }
                if (this.sub_pay_types != null) {
                    data.sub_pay_types = this.sub_pay_types.map((item: PayConfResp.SubPayTypes) =>
                        item.toObject()
                    );
                }
                if (this.kyc_enabled != null) {
                    data.kyc_enabled = this.kyc_enabled;
                }
                if (this.user_is_kyc != null) {
                    data.user_is_kyc = this.user_is_kyc;
                }
                if (this.pay_channel_conf_id != null) {
                    data.pay_channel_conf_id = this.pay_channel_conf_id;
                }
                if (this.activity_type != null) {
                    data.activity_type = this.activity_type;
                }
                if (this.activity_rebate_recharge != null) {
                    data.activity_rebate_recharge = this.activity_rebate_recharge.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length) writer.writeString(1, this.name);
                if (this.pay_type != 0) writer.writeInt32(2, this.pay_type);
                if (this.amount_list.length) writer.writePackedInt64(3, this.amount_list);
                if (this.min_amount != 0) writer.writeInt64(4, this.min_amount);
                if (this.max_amount != 0) writer.writeInt64(5, this.max_amount);
                if (this.base != 0) writer.writeInt64(6, this.base);
                if (this.tag != 0) writer.writeInt32(7, this.tag);
                if (this.comment.length) writer.writeString(8, this.comment);
                if (this.android_url.length) writer.writeString(9, this.android_url);
                if (this.ios_url.length) writer.writeString(10, this.ios_url);
                if (this.banks.length)
                    writer.writeRepeatedMessage(11, this.banks, (item: PayConfResp.Bank) =>
                        item.serialize(writer)
                    );
                if (this.tag_tip.length) writer.writeString(12, this.tag_tip);
                if (this.jump_type != PayConfResp.JumpType.DEFAULT)
                    writer.writeEnum(13, this.jump_type);
                if (this.amount_details.length)
                    writer.writeRepeatedMessage(
                        14,
                        this.amount_details,
                        (item: PayConfResp.AmountDetails) => item.serialize(writer)
                    );
                if (this.code.length) writer.writeString(15, this.code);
                if (this.with_sub_types != false) writer.writeBool(16, this.with_sub_types);
                if (this.sub_pay_types.length)
                    writer.writeRepeatedMessage(
                        17,
                        this.sub_pay_types,
                        (item: PayConfResp.SubPayTypes) => item.serialize(writer)
                    );
                if (this.kyc_enabled != false) writer.writeBool(18, this.kyc_enabled);
                if (this.user_is_kyc != false) writer.writeBool(19, this.user_is_kyc);
                if (this.pay_channel_conf_id.length)
                    writer.writeString(20, this.pay_channel_conf_id);
                if (this.activity_type != PayConfResp.PayChannelConf.ActivityType.DEFAULT)
                    writer.writeEnum(21, this.activity_type);
                if (this.has_activity_rebate_recharge)
                    writer.writeMessage(22, this.activity_rebate_recharge, () =>
                        this.activity_rebate_recharge.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayChannelConf {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new PayChannelConf();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.pay_type = reader.readInt32();
                            break;
                        case 3:
                            message.amount_list = reader.readPackedInt64();
                            break;
                        case 4:
                            message.min_amount = reader.readInt64();
                            break;
                        case 5:
                            message.max_amount = reader.readInt64();
                            break;
                        case 6:
                            message.base = reader.readInt64();
                            break;
                        case 7:
                            message.tag = reader.readInt32();
                            break;
                        case 8:
                            message.comment = reader.readString();
                            break;
                        case 9:
                            message.android_url = reader.readString();
                            break;
                        case 10:
                            message.ios_url = reader.readString();
                            break;
                        case 11:
                            reader.readMessage(message.banks, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    11,
                                    PayConfResp.Bank.deserialize(reader),
                                    PayConfResp.Bank
                                )
                            );
                            break;
                        case 12:
                            message.tag_tip = reader.readString();
                            break;
                        case 13:
                            message.jump_type = reader.readEnum();
                            break;
                        case 14:
                            reader.readMessage(message.amount_details, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    14,
                                    PayConfResp.AmountDetails.deserialize(reader),
                                    PayConfResp.AmountDetails
                                )
                            );
                            break;
                        case 15:
                            message.code = reader.readString();
                            break;
                        case 16:
                            message.with_sub_types = reader.readBool();
                            break;
                        case 17:
                            reader.readMessage(message.sub_pay_types, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    17,
                                    PayConfResp.SubPayTypes.deserialize(reader),
                                    PayConfResp.SubPayTypes
                                )
                            );
                            break;
                        case 18:
                            message.kyc_enabled = reader.readBool();
                            break;
                        case 19:
                            message.user_is_kyc = reader.readBool();
                            break;
                        case 20:
                            message.pay_channel_conf_id = reader.readString();
                            break;
                        case 21:
                            message.activity_type = reader.readEnum();
                            break;
                        case 22:
                            reader.readMessage(
                                message.activity_rebate_recharge,
                                () =>
                                    (message.activity_rebate_recharge =
                                        PayConfResp.ActivityRebateRecharge.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PayChannelConf {
                return PayChannelConf.deserialize(bytes);
            }
        }
        export namespace PayChannelConf {
            export enum ActivityType {
                DEFAULT = 0,

                /** 
                  首充(迎新三重礼)
                   **/
                FIRST_RECHARGE = 1,

                /** 
                  单笔充值
                   **/
                SINGLE_RECHARGE = 2,
            }
        }
    }
    export class AdjustInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      appid?: string;
                      adjust_id?: string;
                      idfa?: string;
                      gps_adid?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appid" in data && data.appid != undefined) {
                    this.appid = data.appid;
                }
                if ("adjust_id" in data && data.adjust_id != undefined) {
                    this.adjust_id = data.adjust_id;
                }
                if ("idfa" in data && data.idfa != undefined) {
                    this.idfa = data.idfa;
                }
                if ("gps_adid" in data && data.gps_adid != undefined) {
                    this.gps_adid = data.gps_adid;
                }
            }
        }
        get appid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get adjust_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set adjust_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          IOS广告ID
           **/
        get idfa() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }

        /** 
          IOS广告ID
           **/
        set idfa(value: string) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          Google广告ID
           **/
        get gps_adid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }

        /** 
          Google广告ID
           **/
        set gps_adid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            appid?: string;
            adjust_id?: string;
            idfa?: string;
            gps_adid?: string;
        }): AdjustInfo {
            const message = new AdjustInfo({});
            if (data.appid != null) {
                message.appid = data.appid;
            }
            if (data.adjust_id != null) {
                message.adjust_id = data.adjust_id;
            }
            if (data.idfa != null) {
                message.idfa = data.idfa;
            }
            if (data.gps_adid != null) {
                message.gps_adid = data.gps_adid;
            }
            return message;
        }
        toObject() {
            const data: {
                appid?: string;
                adjust_id?: string;
                idfa?: string;
                gps_adid?: string;
            } = {};
            if (this.appid != null) {
                data.appid = this.appid;
            }
            if (this.adjust_id != null) {
                data.adjust_id = this.adjust_id;
            }
            if (this.idfa != null) {
                data.idfa = this.idfa;
            }
            if (this.gps_adid != null) {
                data.gps_adid = this.gps_adid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appid.length) writer.writeString(1, this.appid);
            if (this.adjust_id.length) writer.writeString(2, this.adjust_id);
            if (this.idfa.length) writer.writeString(3, this.idfa);
            if (this.gps_adid.length) writer.writeString(4, this.gps_adid);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustInfo {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new AdjustInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appid = reader.readString();
                        break;
                    case 2:
                        message.adjust_id = reader.readString();
                        break;
                    case 3:
                        message.idfa = reader.readString();
                        break;
                    case 4:
                        message.gps_adid = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdjustInfo {
            return AdjustInfo.deserialize(bytes);
        }
    }

    /** 
      提交订单
       pay/submit
       **/
    export class PaySubmitReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      pay_type?: number;
                      pay_amount?: number;
                      bank_code?: string;
                      adjust_info?: AdjustInfo;
                      pay_name?: string;
                      sub_pay_code?: string;
                      recharge_scene?: number;
                      recharge_from?: PaySubmitReq.RechargeFrom;
                      scenes_extra?: PaySubmitReq.ScenesExtra;
                      pay_channel_conf_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("pay_type" in data && data.pay_type != undefined) {
                    this.pay_type = data.pay_type;
                }
                if ("pay_amount" in data && data.pay_amount != undefined) {
                    this.pay_amount = data.pay_amount;
                }
                if ("bank_code" in data && data.bank_code != undefined) {
                    this.bank_code = data.bank_code;
                }
                if ("adjust_info" in data && data.adjust_info != undefined) {
                    this.adjust_info = data.adjust_info;
                }
                if ("pay_name" in data && data.pay_name != undefined) {
                    this.pay_name = data.pay_name;
                }
                if ("sub_pay_code" in data && data.sub_pay_code != undefined) {
                    this.sub_pay_code = data.sub_pay_code;
                }
                if ("recharge_scene" in data && data.recharge_scene != undefined) {
                    this.recharge_scene = data.recharge_scene;
                }
                if ("recharge_from" in data && data.recharge_from != undefined) {
                    this.recharge_from = data.recharge_from;
                }
                if ("scenes_extra" in data && data.scenes_extra != undefined) {
                    this.scenes_extra = data.scenes_extra;
                }
                if ("pay_channel_conf_id" in data && data.pay_channel_conf_id != undefined) {
                    this.pay_channel_conf_id = data.pay_channel_conf_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pay_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pay_type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pay_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pay_amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bank_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set bank_code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get adjust_info() {
            return pb_1.Message.getWrapperField(this, AdjustInfo, 5) as AdjustInfo;
        }
        set adjust_info(value: AdjustInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_adjust_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get pay_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set pay_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sub_pay_code() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sub_pay_code(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get recharge_scene() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set recharge_scene(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get recharge_from() {
            return pb_1.Message.getFieldWithDefault(
                this,
                9,
                PaySubmitReq.RechargeFrom.UNSPECIFIED
            ) as PaySubmitReq.RechargeFrom;
        }
        set recharge_from(value: PaySubmitReq.RechargeFrom) {
            pb_1.Message.setField(this, 9, value);
        }
        get scenes_extra() {
            return pb_1.Message.getWrapperField(
                this,
                PaySubmitReq.ScenesExtra,
                10
            ) as PaySubmitReq.ScenesExtra;
        }
        set scenes_extra(value: PaySubmitReq.ScenesExtra) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_scenes_extra() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get pay_channel_conf_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set pay_channel_conf_id(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            pay_type?: number;
            pay_amount?: number;
            bank_code?: string;
            adjust_info?: ReturnType<typeof AdjustInfo.prototype.toObject>;
            pay_name?: string;
            sub_pay_code?: string;
            recharge_scene?: number;
            recharge_from?: PaySubmitReq.RechargeFrom;
            scenes_extra?: ReturnType<typeof PaySubmitReq.ScenesExtra.prototype.toObject>;
            pay_channel_conf_id?: string;
        }): PaySubmitReq {
            const message = new PaySubmitReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.pay_type != null) {
                message.pay_type = data.pay_type;
            }
            if (data.pay_amount != null) {
                message.pay_amount = data.pay_amount;
            }
            if (data.bank_code != null) {
                message.bank_code = data.bank_code;
            }
            if (data.adjust_info != null) {
                message.adjust_info = AdjustInfo.fromObject(data.adjust_info);
            }
            if (data.pay_name != null) {
                message.pay_name = data.pay_name;
            }
            if (data.sub_pay_code != null) {
                message.sub_pay_code = data.sub_pay_code;
            }
            if (data.recharge_scene != null) {
                message.recharge_scene = data.recharge_scene;
            }
            if (data.recharge_from != null) {
                message.recharge_from = data.recharge_from;
            }
            if (data.scenes_extra != null) {
                message.scenes_extra = PaySubmitReq.ScenesExtra.fromObject(data.scenes_extra);
            }
            if (data.pay_channel_conf_id != null) {
                message.pay_channel_conf_id = data.pay_channel_conf_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                pay_type?: number;
                pay_amount?: number;
                bank_code?: string;
                adjust_info?: ReturnType<typeof AdjustInfo.prototype.toObject>;
                pay_name?: string;
                sub_pay_code?: string;
                recharge_scene?: number;
                recharge_from?: PaySubmitReq.RechargeFrom;
                scenes_extra?: ReturnType<typeof PaySubmitReq.ScenesExtra.prototype.toObject>;
                pay_channel_conf_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.pay_type != null) {
                data.pay_type = this.pay_type;
            }
            if (this.pay_amount != null) {
                data.pay_amount = this.pay_amount;
            }
            if (this.bank_code != null) {
                data.bank_code = this.bank_code;
            }
            if (this.adjust_info != null) {
                data.adjust_info = this.adjust_info.toObject();
            }
            if (this.pay_name != null) {
                data.pay_name = this.pay_name;
            }
            if (this.sub_pay_code != null) {
                data.sub_pay_code = this.sub_pay_code;
            }
            if (this.recharge_scene != null) {
                data.recharge_scene = this.recharge_scene;
            }
            if (this.recharge_from != null) {
                data.recharge_from = this.recharge_from;
            }
            if (this.scenes_extra != null) {
                data.scenes_extra = this.scenes_extra.toObject();
            }
            if (this.pay_channel_conf_id != null) {
                data.pay_channel_conf_id = this.pay_channel_conf_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.pay_type != 0) writer.writeUint32(2, this.pay_type);
            if (this.pay_amount != 0) writer.writeUint64(3, this.pay_amount);
            if (this.bank_code.length) writer.writeString(4, this.bank_code);
            if (this.has_adjust_info)
                writer.writeMessage(5, this.adjust_info, () => this.adjust_info.serialize(writer));
            if (this.pay_name.length) writer.writeString(6, this.pay_name);
            if (this.sub_pay_code.length) writer.writeString(7, this.sub_pay_code);
            if (this.recharge_scene != 0) writer.writeInt64(8, this.recharge_scene);
            if (this.recharge_from != PaySubmitReq.RechargeFrom.UNSPECIFIED)
                writer.writeEnum(9, this.recharge_from);
            if (this.has_scenes_extra)
                writer.writeMessage(10, this.scenes_extra, () =>
                    this.scenes_extra.serialize(writer)
                );
            if (this.pay_channel_conf_id.length) writer.writeString(11, this.pay_channel_conf_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaySubmitReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PaySubmitReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.pay_type = reader.readUint32();
                        break;
                    case 3:
                        message.pay_amount = reader.readUint64();
                        break;
                    case 4:
                        message.bank_code = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(
                            message.adjust_info,
                            () => (message.adjust_info = AdjustInfo.deserialize(reader))
                        );
                        break;
                    case 6:
                        message.pay_name = reader.readString();
                        break;
                    case 7:
                        message.sub_pay_code = reader.readString();
                        break;
                    case 8:
                        message.recharge_scene = reader.readInt64();
                        break;
                    case 9:
                        message.recharge_from = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(
                            message.scenes_extra,
                            () =>
                                (message.scenes_extra =
                                    PaySubmitReq.ScenesExtra.deserialize(reader))
                        );
                        break;
                    case 11:
                        message.pay_channel_conf_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaySubmitReq {
            return PaySubmitReq.deserialize(bytes);
        }
    }
    export namespace PaySubmitReq {
        export enum RechargeFrom {
            /** 
              默认不指定
               **/
            UNSPECIFIED = 0,

            /** 
              顶部充值按钮
               **/
            TOP_RECHARGE_BUTTON = 1,

            /** 
              底部充值按钮
               **/
            BOTTOM_RECHARGE_BUTTON = 2,

            /** 
              首充活动（迎新三重礼）
               **/
            FIRST_RECHARGE = 3,

            /** 
              单笔充值返利
               **/
            REBATE_SINGLE_RECHARGE = 4,

            /** 
              奇遇任务
               **/
            TASK_CARD = 5,

            /** 
              在线抽奖
               **/
            ONLINE_RAFFLE = 6,

            /** 
              周卡
               **/
            WEEKLY_CARD = 7,

            /** 
              余额不足
               **/
            INSUFFICIENT_BALANCE = 8,

            /** 
              子游戏充值按钮
               **/
            GAME_RECHARGE_BUTTON = 9,

            /** 
              子游戏结算余额不足
               **/
            GAME_INSUFFICIENT_SETTLEMENT_BALANCE = 10,

            /** 
              子游戏下注余额不足
               **/
            GAME_INSUFFICIENT_BETTING_BALANCE = 11,

            /** 
              子游戏进入房间余额不足
               **/
            GAME_INSUFFICIENT_BALANCE_CANNOT_ENTER_THE_ROOM = 12,

            /** 
              每日签到
               **/
            DAILY_BONUS = 13,

            /** 
              VIP
               **/
            VIP = 14,

            /** 
              公告跳转
               **/
            BULLETIN_JUMP = 15,

            /** 
              公告牌跳转
               **/
            BULLETIN_BOARD_JUMP = 16,

            /** 
              每日充值返利
               **/
            REBATE_DAILY_RECHARGE = 17,

            /** 
              多日活跃
               **/
            REBATE_MULTI_ACTIVE = 18,
        }
        export class ScenesExtra extends pb_1.Message {
            #one_of_decls: number[][] = [[1]];
            constructor(
                data?:
                    | any[]
                    | ({} & {
                          weekly_card?: PaySubmitReq.ScenesExtra.WeeklyCard;
                      })
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("weekly_card" in data && data.weekly_card != undefined) {
                        this.weekly_card = data.weekly_card;
                    }
                }
            }
            get weekly_card() {
                return pb_1.Message.getWrapperField(
                    this,
                    PaySubmitReq.ScenesExtra.WeeklyCard,
                    1
                ) as PaySubmitReq.ScenesExtra.WeeklyCard;
            }
            set weekly_card(value: PaySubmitReq.ScenesExtra.WeeklyCard) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_weekly_card() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get extra_info() {
                const cases: {
                    [index: number]: "none" | "weekly_card";
                } = {
                    0: "none",
                    1: "weekly_card",
                };
                return cases[pb_1.Message.computeOneofCase(this, [1])];
            }
            static fromObject(data: {
                weekly_card?: ReturnType<
                    typeof PaySubmitReq.ScenesExtra.WeeklyCard.prototype.toObject
                >;
            }): ScenesExtra {
                const message = new ScenesExtra({});
                if (data.weekly_card != null) {
                    message.weekly_card = PaySubmitReq.ScenesExtra.WeeklyCard.fromObject(
                        data.weekly_card
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    weekly_card?: ReturnType<
                        typeof PaySubmitReq.ScenesExtra.WeeklyCard.prototype.toObject
                    >;
                } = {};
                if (this.weekly_card != null) {
                    data.weekly_card = this.weekly_card.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_weekly_card)
                    writer.writeMessage(1, this.weekly_card, () =>
                        this.weekly_card.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScenesExtra {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ScenesExtra();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.weekly_card,
                                () =>
                                    (message.weekly_card =
                                        PaySubmitReq.ScenesExtra.WeeklyCard.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ScenesExtra {
                return ScenesExtra.deserialize(bytes);
            }
        }
        export namespace ScenesExtra {
            export class WeeklyCard extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(
                    data?:
                        | any[]
                        | {
                              act_id?: string;
                              card_type?: number;
                          }
                ) {
                    super();
                    pb_1.Message.initialize(
                        this,
                        Array.isArray(data) ? data : [],
                        0,
                        -1,
                        [],
                        this.#one_of_decls
                    );
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("act_id" in data && data.act_id != undefined) {
                            this.act_id = data.act_id;
                        }
                        if ("card_type" in data && data.card_type != undefined) {
                            this.card_type = data.card_type;
                        }
                    }
                }
                get act_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set act_id(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get card_type() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set card_type(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                static fromObject(data: { act_id?: string; card_type?: number }): WeeklyCard {
                    const message = new WeeklyCard({});
                    if (data.act_id != null) {
                        message.act_id = data.act_id;
                    }
                    if (data.card_type != null) {
                        message.card_type = data.card_type;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        act_id?: string;
                        card_type?: number;
                    } = {};
                    if (this.act_id != null) {
                        data.act_id = this.act_id;
                    }
                    if (this.card_type != null) {
                        data.card_type = this.card_type;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.act_id.length) writer.writeString(1, this.act_id);
                    if (this.card_type != 0) writer.writeInt32(2, this.card_type);
                    if (!w) return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeeklyCard {
                    const reader =
                            bytes instanceof pb_1.BinaryReader
                                ? bytes
                                : new pb_1.BinaryReader(bytes),
                        message = new WeeklyCard();
                    while (reader.nextField()) {
                        if (reader.isEndGroup()) break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.act_id = reader.readString();
                                break;
                            case 2:
                                message.card_type = reader.readInt32();
                                break;
                            default:
                                reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): WeeklyCard {
                    return WeeklyCard.deserialize(bytes);
                }
            }
        }
    }
    export class PaySubmitResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PaySubmitResp.Submit;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PaySubmitResp.Submit,
                2
            ) as PaySubmitResp.Submit;
        }
        set data(value: PaySubmitResp.Submit) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PaySubmitResp.Submit.prototype.toObject>;
        }): PaySubmitResp {
            const message = new PaySubmitResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PaySubmitResp.Submit.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PaySubmitResp.Submit.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaySubmitResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PaySubmitResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = PaySubmitResp.Submit.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaySubmitResp {
            return PaySubmitResp.deserialize(bytes);
        }
    }
    export namespace PaySubmitResp {
        export class Submit extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          pay_id?: string;
                          open_type?: string;
                          url?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("pay_id" in data && data.pay_id != undefined) {
                        this.pay_id = data.pay_id;
                    }
                    if ("open_type" in data && data.open_type != undefined) {
                        this.open_type = data.open_type;
                    }
                    if ("url" in data && data.url != undefined) {
                        this.url = data.url;
                    }
                }
            }
            get pay_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set pay_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get open_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set open_type(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get url() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set url(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: { pay_id?: string; open_type?: string; url?: string }): Submit {
                const message = new Submit({});
                if (data.pay_id != null) {
                    message.pay_id = data.pay_id;
                }
                if (data.open_type != null) {
                    message.open_type = data.open_type;
                }
                if (data.url != null) {
                    message.url = data.url;
                }
                return message;
            }
            toObject() {
                const data: {
                    pay_id?: string;
                    open_type?: string;
                    url?: string;
                } = {};
                if (this.pay_id != null) {
                    data.pay_id = this.pay_id;
                }
                if (this.open_type != null) {
                    data.open_type = this.open_type;
                }
                if (this.url != null) {
                    data.url = this.url;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.pay_id.length) writer.writeString(1, this.pay_id);
                if (this.open_type.length) writer.writeString(2, this.open_type);
                if (this.url.length) writer.writeString(3, this.url);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Submit {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Submit();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.pay_id = reader.readString();
                            break;
                        case 2:
                            message.open_type = reader.readString();
                            break;
                        case 3:
                            message.url = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Submit {
                return Submit.deserialize(bytes);
            }
        }
    }
    export class ReportAgencyReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      agency_account?: string;
                      desc?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("agency_account" in data && data.agency_account != undefined) {
                    this.agency_account = data.agency_account;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get agency_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set agency_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            agency_account?: string;
            desc?: string;
        }): ReportAgencyReq {
            const message = new ReportAgencyReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.agency_account != null) {
                message.agency_account = data.agency_account;
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                agency_account?: string;
                desc?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.agency_account != null) {
                data.agency_account = this.agency_account;
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.agency_account.length) writer.writeString(2, this.agency_account);
            if (this.desc.length) writer.writeString(3, this.desc);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportAgencyReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ReportAgencyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.agency_account = reader.readString();
                        break;
                    case 3:
                        message.desc = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportAgencyReq {
            return ReportAgencyReq.deserialize(bytes);
        }
    }
    export class ReportAgencyResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): ReportAgencyResp {
            const message = new ReportAgencyResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportAgencyResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ReportAgencyResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportAgencyResp {
            return ReportAgencyResp.deserialize(bytes);
        }
    }
    export class PayRecordListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      filter_type?: PayRecordListReq.FilterType;
                      page?: number;
                      size?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("filter_type" in data && data.filter_type != undefined) {
                    this.filter_type = data.filter_type;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get filter_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                PayRecordListReq.FilterType.ALL
            ) as PayRecordListReq.FilterType;
        }
        set filter_type(value: PayRecordListReq.FilterType) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            filter_type?: PayRecordListReq.FilterType;
            page?: number;
            size?: number;
        }): PayRecordListReq {
            const message = new PayRecordListReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.filter_type != null) {
                message.filter_type = data.filter_type;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                filter_type?: PayRecordListReq.FilterType;
                page?: number;
                size?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.filter_type != null) {
                data.filter_type = this.filter_type;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.filter_type != PayRecordListReq.FilterType.ALL)
                writer.writeEnum(2, this.filter_type);
            if (this.page != 0) writer.writeInt32(3, this.page);
            if (this.size != 0) writer.writeInt32(4, this.size);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecordListReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PayRecordListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.filter_type = reader.readEnum();
                        break;
                    case 3:
                        message.page = reader.readInt32();
                        break;
                    case 4:
                        message.size = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PayRecordListReq {
            return PayRecordListReq.deserialize(bytes);
        }
    }
    export namespace PayRecordListReq {
        export enum FilterType {
            ALL = 0,
            CAN_COMMENT = 1,
            COMMENTED = 2,
        }
    }
    export class PayRecordListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PayRecordListResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PayRecordListResp.RespData,
                2
            ) as PayRecordListResp.RespData;
        }
        set data(value: PayRecordListResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PayRecordListResp.RespData.prototype.toObject>;
        }): PayRecordListResp {
            const message = new PayRecordListResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PayRecordListResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PayRecordListResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecordListResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PayRecordListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = PayRecordListResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PayRecordListResp {
            return PayRecordListResp.deserialize(bytes);
        }
    }
    export namespace PayRecordListResp {
        export class PayRecord extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          pay_id?: string;
                          name?: string;
                          pay_type?: number;
                          status?: PayStatus;
                          amount?: number;
                          can_comment?: boolean;
                          comment_star?: number;
                          comment_content?: string;
                          created_at?: number;
                          updated_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("pay_id" in data && data.pay_id != undefined) {
                        this.pay_id = data.pay_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("pay_type" in data && data.pay_type != undefined) {
                        this.pay_type = data.pay_type;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("can_comment" in data && data.can_comment != undefined) {
                        this.can_comment = data.can_comment;
                    }
                    if ("comment_star" in data && data.comment_star != undefined) {
                        this.comment_star = data.comment_star;
                    }
                    if ("comment_content" in data && data.comment_content != undefined) {
                        this.comment_content = data.comment_content;
                    }
                    if ("created_at" in data && data.created_at != undefined) {
                        this.created_at = data.created_at;
                    }
                    if ("updated_at" in data && data.updated_at != undefined) {
                        this.updated_at = data.updated_at;
                    }
                }
            }
            get pay_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set pay_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get pay_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set pay_type(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 4, PayStatus.DEFAULT) as PayStatus;
            }
            set status(value: PayStatus) {
                pb_1.Message.setField(this, 4, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get can_comment() {
                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set can_comment(value: boolean) {
                pb_1.Message.setField(this, 11, value);
            }
            get comment_star() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set comment_star(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get comment_content() {
                return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
            }
            set comment_content(value: string) {
                pb_1.Message.setField(this, 13, value);
            }
            get created_at() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set created_at(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get updated_at() {
                return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
            }
            set updated_at(value: number) {
                pb_1.Message.setField(this, 15, value);
            }
            static fromObject(data: {
                pay_id?: string;
                name?: string;
                pay_type?: number;
                status?: PayStatus;
                amount?: number;
                can_comment?: boolean;
                comment_star?: number;
                comment_content?: string;
                created_at?: number;
                updated_at?: number;
            }): PayRecord {
                const message = new PayRecord({});
                if (data.pay_id != null) {
                    message.pay_id = data.pay_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.pay_type != null) {
                    message.pay_type = data.pay_type;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.can_comment != null) {
                    message.can_comment = data.can_comment;
                }
                if (data.comment_star != null) {
                    message.comment_star = data.comment_star;
                }
                if (data.comment_content != null) {
                    message.comment_content = data.comment_content;
                }
                if (data.created_at != null) {
                    message.created_at = data.created_at;
                }
                if (data.updated_at != null) {
                    message.updated_at = data.updated_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    pay_id?: string;
                    name?: string;
                    pay_type?: number;
                    status?: PayStatus;
                    amount?: number;
                    can_comment?: boolean;
                    comment_star?: number;
                    comment_content?: string;
                    created_at?: number;
                    updated_at?: number;
                } = {};
                if (this.pay_id != null) {
                    data.pay_id = this.pay_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.pay_type != null) {
                    data.pay_type = this.pay_type;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.can_comment != null) {
                    data.can_comment = this.can_comment;
                }
                if (this.comment_star != null) {
                    data.comment_star = this.comment_star;
                }
                if (this.comment_content != null) {
                    data.comment_content = this.comment_content;
                }
                if (this.created_at != null) {
                    data.created_at = this.created_at;
                }
                if (this.updated_at != null) {
                    data.updated_at = this.updated_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.pay_id.length) writer.writeString(1, this.pay_id);
                if (this.name.length) writer.writeString(2, this.name);
                if (this.pay_type != 0) writer.writeInt32(3, this.pay_type);
                if (this.status != PayStatus.DEFAULT) writer.writeEnum(4, this.status);
                if (this.amount != 0) writer.writeInt64(5, this.amount);
                if (this.can_comment != false) writer.writeBool(11, this.can_comment);
                if (this.comment_star != 0) writer.writeInt32(12, this.comment_star);
                if (this.comment_content.length) writer.writeString(13, this.comment_content);
                if (this.created_at != 0) writer.writeInt64(14, this.created_at);
                if (this.updated_at != 0) writer.writeInt64(15, this.updated_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecord {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new PayRecord();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.pay_id = reader.readString();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.pay_type = reader.readInt32();
                            break;
                        case 4:
                            message.status = reader.readEnum();
                            break;
                        case 5:
                            message.amount = reader.readInt64();
                            break;
                        case 11:
                            message.can_comment = reader.readBool();
                            break;
                        case 12:
                            message.comment_star = reader.readInt32();
                            break;
                        case 13:
                            message.comment_content = reader.readString();
                            break;
                        case 14:
                            message.created_at = reader.readInt64();
                            break;
                        case 15:
                            message.updated_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PayRecord {
                return PayRecord.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          records?: PayRecordListResp.PayRecord[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PayRecordListResp.PayRecord,
                    2
                ) as PayRecordListResp.PayRecord[];
            }
            set records(value: PayRecordListResp.PayRecord[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                records?: ReturnType<typeof PayRecordListResp.PayRecord.prototype.toObject>[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        PayRecordListResp.PayRecord.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    records?: ReturnType<typeof PayRecordListResp.PayRecord.prototype.toObject>[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.records != null) {
                    data.records = this.records.map((item: PayRecordListResp.PayRecord) =>
                        item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.records,
                        (item: PayRecordListResp.PayRecord) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PayRecordListResp.PayRecord.deserialize(reader),
                                    PayRecordListResp.PayRecord
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      迎新三重礼，获取配置
       **/
    export class NewTripleGiftConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): NewTripleGiftConfReq {
            const message = new NewTripleGiftConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NewTripleGiftConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTripleGiftConfReq {
            return NewTripleGiftConfReq.deserialize(bytes);
        }
    }
    export class NewTripleGiftConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: NewTripleGiftConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                NewTripleGiftConfResp.RespData,
                2
            ) as NewTripleGiftConfResp.RespData;
        }
        set data(value: NewTripleGiftConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof NewTripleGiftConfResp.RespData.prototype.toObject>;
        }): NewTripleGiftConfResp {
            const message = new NewTripleGiftConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = NewTripleGiftConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof NewTripleGiftConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NewTripleGiftConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = NewTripleGiftConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTripleGiftConfResp {
            return NewTripleGiftConfResp.deserialize(bytes);
        }
    }
    export namespace NewTripleGiftConfResp {
        export enum NewTripleGiftStatus {
            /** 
              无用，未开启
               **/
            UN_USED = 0,

            /** 
              进行中
               **/
            PROCESSING = 1,

            /** 
              已经达成，可以领奖
               **/
            ACHIEVED = 2,

            /** 
              已经领取
               **/
            AWARDED = 3,

            /** 
              已经补发邮件
               **/
            REPLENISH_MAIL = 4,
        }
        export class GiftInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          pay_amount?: number;
                          award_percent?: number;
                          receive_amount?: number;
                          status?: NewTripleGiftConfResp.NewTripleGiftStatus;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("pay_amount" in data && data.pay_amount != undefined) {
                        this.pay_amount = data.pay_amount;
                    }
                    if ("award_percent" in data && data.award_percent != undefined) {
                        this.award_percent = data.award_percent;
                    }
                    if ("receive_amount" in data && data.receive_amount != undefined) {
                        this.receive_amount = data.receive_amount;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                }
            }
            get pay_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set pay_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get award_percent() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set award_percent(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get receive_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set receive_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    4,
                    NewTripleGiftConfResp.NewTripleGiftStatus.UN_USED
                ) as NewTripleGiftConfResp.NewTripleGiftStatus;
            }
            set status(value: NewTripleGiftConfResp.NewTripleGiftStatus) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                pay_amount?: number;
                award_percent?: number;
                receive_amount?: number;
                status?: NewTripleGiftConfResp.NewTripleGiftStatus;
            }): GiftInfo {
                const message = new GiftInfo({});
                if (data.pay_amount != null) {
                    message.pay_amount = data.pay_amount;
                }
                if (data.award_percent != null) {
                    message.award_percent = data.award_percent;
                }
                if (data.receive_amount != null) {
                    message.receive_amount = data.receive_amount;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                return message;
            }
            toObject() {
                const data: {
                    pay_amount?: number;
                    award_percent?: number;
                    receive_amount?: number;
                    status?: NewTripleGiftConfResp.NewTripleGiftStatus;
                } = {};
                if (this.pay_amount != null) {
                    data.pay_amount = this.pay_amount;
                }
                if (this.award_percent != null) {
                    data.award_percent = this.award_percent;
                }
                if (this.receive_amount != null) {
                    data.receive_amount = this.receive_amount;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.pay_amount != 0) writer.writeInt64(1, this.pay_amount);
                if (this.award_percent != 0) writer.writeInt64(2, this.award_percent);
                if (this.receive_amount != 0) writer.writeInt64(3, this.receive_amount);
                if (this.status != NewTripleGiftConfResp.NewTripleGiftStatus.UN_USED)
                    writer.writeEnum(4, this.status);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftInfo {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new GiftInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.pay_amount = reader.readInt64();
                            break;
                        case 2:
                            message.award_percent = reader.readInt64();
                            break;
                        case 3:
                            message.receive_amount = reader.readInt64();
                            break;
                        case 4:
                            message.status = reader.readEnum();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GiftInfo {
                return GiftInfo.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          activity_id?: string;
                          gift_info_list?: NewTripleGiftConfResp.GiftInfo[];
                          desc?: string;
                          effected_at?: number;
                          expired_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("activity_id" in data && data.activity_id != undefined) {
                        this.activity_id = data.activity_id;
                    }
                    if ("gift_info_list" in data && data.gift_info_list != undefined) {
                        this.gift_info_list = data.gift_info_list;
                    }
                    if ("desc" in data && data.desc != undefined) {
                        this.desc = data.desc;
                    }
                    if ("effected_at" in data && data.effected_at != undefined) {
                        this.effected_at = data.effected_at;
                    }
                    if ("expired_at" in data && data.expired_at != undefined) {
                        this.expired_at = data.expired_at;
                    }
                }
            }
            get activity_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set activity_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get gift_info_list() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    NewTripleGiftConfResp.GiftInfo,
                    2
                ) as NewTripleGiftConfResp.GiftInfo[];
            }
            set gift_info_list(value: NewTripleGiftConfResp.GiftInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get desc() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set desc(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get effected_at() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set effected_at(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get expired_at() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set expired_at(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                activity_id?: string;
                gift_info_list?: ReturnType<
                    typeof NewTripleGiftConfResp.GiftInfo.prototype.toObject
                >[];
                desc?: string;
                effected_at?: number;
                expired_at?: number;
            }): RespData {
                const message = new RespData({});
                if (data.activity_id != null) {
                    message.activity_id = data.activity_id;
                }
                if (data.gift_info_list != null) {
                    message.gift_info_list = data.gift_info_list.map((item) =>
                        NewTripleGiftConfResp.GiftInfo.fromObject(item)
                    );
                }
                if (data.desc != null) {
                    message.desc = data.desc;
                }
                if (data.effected_at != null) {
                    message.effected_at = data.effected_at;
                }
                if (data.expired_at != null) {
                    message.expired_at = data.expired_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    activity_id?: string;
                    gift_info_list?: ReturnType<
                        typeof NewTripleGiftConfResp.GiftInfo.prototype.toObject
                    >[];
                    desc?: string;
                    effected_at?: number;
                    expired_at?: number;
                } = {};
                if (this.activity_id != null) {
                    data.activity_id = this.activity_id;
                }
                if (this.gift_info_list != null) {
                    data.gift_info_list = this.gift_info_list.map(
                        (item: NewTripleGiftConfResp.GiftInfo) => item.toObject()
                    );
                }
                if (this.desc != null) {
                    data.desc = this.desc;
                }
                if (this.effected_at != null) {
                    data.effected_at = this.effected_at;
                }
                if (this.expired_at != null) {
                    data.expired_at = this.expired_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.activity_id.length) writer.writeString(1, this.activity_id);
                if (this.gift_info_list.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.gift_info_list,
                        (item: NewTripleGiftConfResp.GiftInfo) => item.serialize(writer)
                    );
                if (this.desc.length) writer.writeString(3, this.desc);
                if (this.effected_at != 0) writer.writeInt64(4, this.effected_at);
                if (this.expired_at != 0) writer.writeInt64(5, this.expired_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.activity_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.gift_info_list, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    NewTripleGiftConfResp.GiftInfo.deserialize(reader),
                                    NewTripleGiftConfResp.GiftInfo
                                )
                            );
                            break;
                        case 3:
                            message.desc = reader.readString();
                            break;
                        case 4:
                            message.effected_at = reader.readInt64();
                            break;
                        case 5:
                            message.expired_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      迎新三重礼，获取奖励
       **/
    export class NewTripleGiftAwardReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      activity_id?: string;
                      stage?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("activity_id" in data && data.activity_id != undefined) {
                    this.activity_id = data.activity_id;
                }
                if ("stage" in data && data.stage != undefined) {
                    this.stage = data.stage;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get activity_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set activity_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set stage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            activity_id?: string;
            stage?: number;
        }): NewTripleGiftAwardReq {
            const message = new NewTripleGiftAwardReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.activity_id != null) {
                message.activity_id = data.activity_id;
            }
            if (data.stage != null) {
                message.stage = data.stage;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                activity_id?: string;
                stage?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.activity_id != null) {
                data.activity_id = this.activity_id;
            }
            if (this.stage != null) {
                data.stage = this.stage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.activity_id.length) writer.writeString(2, this.activity_id);
            if (this.stage != 0) writer.writeInt32(3, this.stage);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftAwardReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NewTripleGiftAwardReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.activity_id = reader.readString();
                        break;
                    case 3:
                        message.stage = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTripleGiftAwardReq {
            return NewTripleGiftAwardReq.deserialize(bytes);
        }
    }
    export class NewTripleGiftAwardResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: NewTripleGiftAwardResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                NewTripleGiftAwardResp.RespData,
                2
            ) as NewTripleGiftAwardResp.RespData;
        }
        set data(value: NewTripleGiftAwardResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof NewTripleGiftAwardResp.RespData.prototype.toObject>;
        }): NewTripleGiftAwardResp {
            const message = new NewTripleGiftAwardResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = NewTripleGiftAwardResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof NewTripleGiftAwardResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftAwardResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new NewTripleGiftAwardResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = NewTripleGiftAwardResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTripleGiftAwardResp {
            return NewTripleGiftAwardResp.deserialize(bytes);
        }
    }
    export namespace NewTripleGiftAwardResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          award_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("award_amount" in data && data.award_amount != undefined) {
                        this.award_amount = data.award_amount;
                    }
                }
            }
            get award_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set award_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: { award_amount?: number }): RespData {
                const message = new RespData({});
                if (data.award_amount != null) {
                    message.award_amount = data.award_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    award_amount?: number;
                } = {};
                if (this.award_amount != null) {
                    data.award_amount = this.award_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.award_amount != 0) writer.writeInt64(1, this.award_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.award_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      游戏回放列表
       game/replays/
       **/
    export class GameReplaysReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      game_id?: number;
                      page?: PaginationCriteria;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, PaginationCriteria, 3) as PaginationCriteria;
        }
        set page(value: PaginationCriteria) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            game_id?: number;
            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
        }): GameReplaysReq {
            const message = new GameReplaysReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.page != null) {
                message.page = PaginationCriteria.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                game_id?: number;
                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.game_id != 0) writer.writeInt64(2, this.game_id);
            if (this.has_page) writer.writeMessage(3, this.page, () => this.page.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplaysReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameReplaysReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.game_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(
                            message.page,
                            () => (message.page = PaginationCriteria.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameReplaysReq {
            return GameReplaysReq.deserialize(bytes);
        }
    }
    export class GameReplayRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      name?: string;
                      users?: number[];
                      msgs?: GameReplayRecord.Msgs[];
                      settle_info?: Map<string, GameReplayRecord.SettleDetails>;
                      created_at?: number;
                      ver?: number;
                      base?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [3, 4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("msgs" in data && data.msgs != undefined) {
                    this.msgs = data.msgs;
                }
                if ("settle_info" in data && data.settle_info != undefined) {
                    this.settle_info = data.settle_info;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("ver" in data && data.ver != undefined) {
                    this.ver = data.ver;
                }
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
            }
            if (!this.settle_info) this.settle_info = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get users() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set users(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get msgs() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                GameReplayRecord.Msgs,
                4
            ) as GameReplayRecord.Msgs[];
        }
        set msgs(value: GameReplayRecord.Msgs[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get settle_info() {
            return pb_1.Message.getField(this, 5) as any as Map<
                string,
                GameReplayRecord.SettleDetails
            >;
        }
        set settle_info(value: Map<string, GameReplayRecord.SettleDetails>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get ver() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set ver(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get base() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set base(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            users?: number[];
            msgs?: ReturnType<typeof GameReplayRecord.Msgs.prototype.toObject>[];
            settle_info?: {
                [key: string]: ReturnType<typeof GameReplayRecord.SettleDetails.prototype.toObject>;
            };
            created_at?: number;
            ver?: number;
            base?: number;
        }): GameReplayRecord {
            const message = new GameReplayRecord({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.users != null) {
                message.users = data.users;
            }
            if (data.msgs != null) {
                message.msgs = data.msgs.map((item) => GameReplayRecord.Msgs.fromObject(item));
            }
            if (typeof data.settle_info == "object") {
                message.settle_info = new Map(
                    Object.entries(data.settle_info).map(([key, value]) => [
                        key,
                        GameReplayRecord.SettleDetails.fromObject(value),
                    ])
                );
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.ver != null) {
                message.ver = data.ver;
            }
            if (data.base != null) {
                message.base = data.base;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                users?: number[];
                msgs?: ReturnType<typeof GameReplayRecord.Msgs.prototype.toObject>[];
                settle_info?: {
                    [key: string]: ReturnType<
                        typeof GameReplayRecord.SettleDetails.prototype.toObject
                    >;
                };
                created_at?: number;
                ver?: number;
                base?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.users != null) {
                data.users = this.users;
            }
            if (this.msgs != null) {
                data.msgs = this.msgs.map((item: GameReplayRecord.Msgs) => item.toObject());
            }
            if (this.settle_info.size > 0) {
                data.settle_info = Object.fromEntries(
                    Array.from(this.settle_info).map(([key, value]) => [key, value.toObject()])
                );
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.ver != null) {
                data.ver = this.ver;
            }
            if (this.base != null) {
                data.base = this.base;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.name.length) writer.writeString(2, this.name);
            if (this.users.length) writer.writePackedInt64(3, this.users);
            if (this.msgs.length)
                writer.writeRepeatedMessage(4, this.msgs, (item: GameReplayRecord.Msgs) =>
                    item.serialize(writer)
                );
            for (const [key, value] of this.settle_info) {
                writer.writeMessage(5, this.settle_info, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.created_at != 0) writer.writeInt64(6, this.created_at);
            if (this.ver != 0) writer.writeInt32(7, this.ver);
            if (this.base != 0) writer.writeInt64(8, this.base);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayRecord {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameReplayRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.users = reader.readPackedInt64();
                        break;
                    case 4:
                        reader.readMessage(message.msgs, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                GameReplayRecord.Msgs.deserialize(reader),
                                GameReplayRecord.Msgs
                            )
                        );
                        break;
                    case 5:
                        reader.readMessage(message, () =>
                            pb_1.Map.deserializeBinary(
                                message.settle_info as any,
                                reader,
                                reader.readString,
                                () => {
                                    let value;
                                    reader.readMessage(
                                        message,
                                        () =>
                                            (value =
                                                GameReplayRecord.SettleDetails.deserialize(reader))
                                    );
                                    return value;
                                }
                            )
                        );
                        break;
                    case 6:
                        message.created_at = reader.readInt64();
                        break;
                    case 7:
                        message.ver = reader.readInt32();
                        break;
                    case 8:
                        message.base = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameReplayRecord {
            return GameReplayRecord.deserialize(bytes);
        }
    }
    export namespace GameReplayRecord {
        export class Msgs extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          timestamp?: number;
                          msg_type?: number;
                          user_id?: number;
                          msg_info?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("msg_type" in data && data.msg_type != undefined) {
                        this.msg_type = data.msg_type;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("msg_info" in data && data.msg_info != undefined) {
                        this.msg_info = data.msg_info;
                    }
                }
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set timestamp(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get msg_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set msg_type(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get msg_info() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set msg_info(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                timestamp?: number;
                msg_type?: number;
                user_id?: number;
                msg_info?: string;
            }): Msgs {
                const message = new Msgs({});
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.msg_type != null) {
                    message.msg_type = data.msg_type;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.msg_info != null) {
                    message.msg_info = data.msg_info;
                }
                return message;
            }
            toObject() {
                const data: {
                    timestamp?: number;
                    msg_type?: number;
                    user_id?: number;
                    msg_info?: string;
                } = {};
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.msg_type != null) {
                    data.msg_type = this.msg_type;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.msg_info != null) {
                    data.msg_info = this.msg_info;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.timestamp != 0) writer.writeInt64(1, this.timestamp);
                if (this.msg_type != 0) writer.writeInt64(2, this.msg_type);
                if (this.user_id != 0) writer.writeInt64(3, this.user_id);
                if (this.msg_info.length) writer.writeString(4, this.msg_info);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Msgs {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Msgs();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.timestamp = reader.readInt64();
                            break;
                        case 2:
                            message.msg_type = reader.readInt64();
                            break;
                        case 3:
                            message.user_id = reader.readInt64();
                            break;
                        case 4:
                            message.msg_info = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Msgs {
                return Msgs.deserialize(bytes);
            }
        }
        export class SettleDetails extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          is_banker?: boolean;
                          award?: number;
                          name?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("is_banker" in data && data.is_banker != undefined) {
                        this.is_banker = data.is_banker;
                    }
                    if ("award" in data && data.award != undefined) {
                        this.award = data.award;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get is_banker() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set is_banker(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get award() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set award(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                is_banker?: boolean;
                award?: number;
                name?: string;
            }): SettleDetails {
                const message = new SettleDetails({});
                if (data.is_banker != null) {
                    message.is_banker = data.is_banker;
                }
                if (data.award != null) {
                    message.award = data.award;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    is_banker?: boolean;
                    award?: number;
                    name?: string;
                } = {};
                if (this.is_banker != null) {
                    data.is_banker = this.is_banker;
                }
                if (this.award != null) {
                    data.award = this.award;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.is_banker != false) writer.writeBool(1, this.is_banker);
                if (this.award != 0) writer.writeInt64(2, this.award);
                if (this.name.length) writer.writeString(3, this.name);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SettleDetails {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new SettleDetails();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.is_banker = reader.readBool();
                            break;
                        case 2:
                            message.award = reader.readInt64();
                            break;
                        case 3:
                            message.name = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SettleDetails {
                return SettleDetails.deserialize(bytes);
            }
        }
    }
    export class GameReplaysResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: GameReplaysResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                GameReplaysResp.RespData,
                2
            ) as GameReplaysResp.RespData;
        }
        set data(value: GameReplaysResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof GameReplaysResp.RespData.prototype.toObject>;
        }): GameReplaysResp {
            const message = new GameReplaysResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = GameReplaysResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof GameReplaysResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplaysResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameReplaysResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = GameReplaysResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameReplaysResp {
            return GameReplaysResp.deserialize(bytes);
        }
    }
    export namespace GameReplaysResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          records?: GameReplayRecord[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    GameReplayRecord,
                    2
                ) as GameReplayRecord[];
            }
            set records(value: GameReplayRecord[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                records?: ReturnType<typeof GameReplayRecord.prototype.toObject>[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.records != null) {
                    message.records = data.records.map((item) => GameReplayRecord.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    records?: ReturnType<typeof GameReplayRecord.prototype.toObject>[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.records != null) {
                    data.records = this.records.map((item: GameReplayRecord) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.records.length)
                    writer.writeRepeatedMessage(2, this.records, (item: GameReplayRecord) =>
                        item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    GameReplayRecord.deserialize(reader),
                                    GameReplayRecord
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      游戏回放详情
       game/replay/detail/
       **/
    export class GameReplayDetailReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      game_id?: number;
                      id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            game_id?: number;
            id?: string;
        }): GameReplayDetailReq {
            const message = new GameReplayDetailReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                game_id?: number;
                id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.game_id != 0) writer.writeInt64(2, this.game_id);
            if (this.id.length) writer.writeString(3, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayDetailReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameReplayDetailReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.game_id = reader.readInt64();
                        break;
                    case 3:
                        message.id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameReplayDetailReq {
            return GameReplayDetailReq.deserialize(bytes);
        }
    }
    export class GameReplayDetailResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: GameReplayRecord;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, GameReplayRecord, 2) as GameReplayRecord;
        }
        set data(value: GameReplayRecord) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof GameReplayRecord.prototype.toObject>;
        }): GameReplayDetailResp {
            const message = new GameReplayDetailResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = GameReplayRecord.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof GameReplayRecord.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayDetailResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GameReplayDetailResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = GameReplayRecord.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameReplayDetailResp {
            return GameReplayDetailResp.deserialize(bytes);
        }
    }

    /** 
      ===================== 推广员 ====================
       配置信息
       promoter/product_conf/
       **/
    export class ProductConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      promotional_link?: string;
                      promotional_material_img?: string;
                      promotional_copy?: string;
                      whatsapp_promotional_img?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("promotional_link" in data && data.promotional_link != undefined) {
                    this.promotional_link = data.promotional_link;
                }
                if (
                    "promotional_material_img" in data &&
                    data.promotional_material_img != undefined
                ) {
                    this.promotional_material_img = data.promotional_material_img;
                }
                if ("promotional_copy" in data && data.promotional_copy != undefined) {
                    this.promotional_copy = data.promotional_copy;
                }
                if (
                    "whatsapp_promotional_img" in data &&
                    data.whatsapp_promotional_img != undefined
                ) {
                    this.whatsapp_promotional_img = data.whatsapp_promotional_img;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get promotional_link() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set promotional_link(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get promotional_material_img() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set promotional_material_img(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get promotional_copy() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set promotional_copy(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get whatsapp_promotional_img() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set whatsapp_promotional_img(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            promotional_link?: string;
            promotional_material_img?: string;
            promotional_copy?: string;
            whatsapp_promotional_img?: string;
        }): ProductConf {
            const message = new ProductConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.promotional_link != null) {
                message.promotional_link = data.promotional_link;
            }
            if (data.promotional_material_img != null) {
                message.promotional_material_img = data.promotional_material_img;
            }
            if (data.promotional_copy != null) {
                message.promotional_copy = data.promotional_copy;
            }
            if (data.whatsapp_promotional_img != null) {
                message.whatsapp_promotional_img = data.whatsapp_promotional_img;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                promotional_link?: string;
                promotional_material_img?: string;
                promotional_copy?: string;
                whatsapp_promotional_img?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.promotional_link != null) {
                data.promotional_link = this.promotional_link;
            }
            if (this.promotional_material_img != null) {
                data.promotional_material_img = this.promotional_material_img;
            }
            if (this.promotional_copy != null) {
                data.promotional_copy = this.promotional_copy;
            }
            if (this.whatsapp_promotional_img != null) {
                data.whatsapp_promotional_img = this.whatsapp_promotional_img;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.promotional_link.length) writer.writeString(2, this.promotional_link);
            if (this.promotional_material_img.length)
                writer.writeString(3, this.promotional_material_img);
            if (this.promotional_copy.length) writer.writeString(4, this.promotional_copy);
            if (this.whatsapp_promotional_img.length)
                writer.writeString(5, this.whatsapp_promotional_img);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ProductConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.promotional_link = reader.readString();
                        break;
                    case 3:
                        message.promotional_material_img = reader.readString();
                        break;
                    case 4:
                        message.promotional_copy = reader.readString();
                        break;
                    case 5:
                        message.whatsapp_promotional_img = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProductConf {
            return ProductConf.deserialize(bytes);
        }
    }
    export class PromoterProductConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): PromoterProductConfReq {
            const message = new PromoterProductConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterProductConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterProductConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterProductConfReq {
            return PromoterProductConfReq.deserialize(bytes);
        }
    }
    export class PromoterProductConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: ProductConf;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, ProductConf, 2) as ProductConf;
        }
        set data(value: ProductConf) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof ProductConf.prototype.toObject>;
        }): PromoterProductConfResp {
            const message = new PromoterProductConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = ProductConf.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof ProductConf.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterProductConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterProductConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = ProductConf.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterProductConfResp {
            return PromoterProductConfResp.deserialize(bytes);
        }
    }

    /** 
      promoter/verify_brd/
       **/
    export class PromoterVerifyBrdReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): PromoterVerifyBrdReq {
            const message = new PromoterVerifyBrdReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyBrdReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterVerifyBrdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterVerifyBrdReq {
            return PromoterVerifyBrdReq.deserialize(bytes);
        }
    }
    export class PromoterVerifyBrdResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set data(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: boolean;
        }): PromoterVerifyBrdResp {
            const message = new PromoterVerifyBrdResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: boolean;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data != false) writer.writeBool(2, this.data);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyBrdResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterVerifyBrdResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.data = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterVerifyBrdResp {
            return PromoterVerifyBrdResp.deserialize(bytes);
        }
    }

    /** 
      promoter/verify_refer_id/
       **/
    export class PromoterVerifyReferIdReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      refer_id?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("refer_id" in data && data.refer_id != undefined) {
                    this.refer_id = data.refer_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get refer_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set refer_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            refer_id?: number;
        }): PromoterVerifyReferIdReq {
            const message = new PromoterVerifyReferIdReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.refer_id != null) {
                message.refer_id = data.refer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                refer_id?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.refer_id != null) {
                data.refer_id = this.refer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.refer_id != 0) writer.writeInt64(2, this.refer_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyReferIdReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterVerifyReferIdReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.refer_id = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterVerifyReferIdReq {
            return PromoterVerifyReferIdReq.deserialize(bytes);
        }
    }
    export class PromoterVerifyReferIdResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set data(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: boolean;
        }): PromoterVerifyReferIdResp {
            const message = new PromoterVerifyReferIdResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: boolean;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.data != false) writer.writeBool(2, this.data);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyReferIdResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterVerifyReferIdResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.data = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterVerifyReferIdResp {
            return PromoterVerifyReferIdResp.deserialize(bytes);
        }
    }

    /** 
      promoter/share_conf/ 分享配置
       **/
    export class PromoterShareConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): PromoterShareConfReq {
            const message = new PromoterShareConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterShareConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterShareConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterShareConfReq {
            return PromoterShareConfReq.deserialize(bytes);
        }
    }
    export class PromoterShareConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterShareConfResp.ShareConf;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterShareConfResp.ShareConf,
                2
            ) as PromoterShareConfResp.ShareConf;
        }
        set data(value: PromoterShareConfResp.ShareConf) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterShareConfResp.ShareConf.prototype.toObject>;
        }): PromoterShareConfResp {
            const message = new PromoterShareConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterShareConfResp.ShareConf.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterShareConfResp.ShareConf.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterShareConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterShareConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = PromoterShareConfResp.ShareConf.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterShareConfResp {
            return PromoterShareConfResp.deserialize(bytes);
        }
    }
    export namespace PromoterShareConfResp {
        export class ShareConf extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          facebook_appid?: string;
                          whatsapp_appid?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("facebook_appid" in data && data.facebook_appid != undefined) {
                        this.facebook_appid = data.facebook_appid;
                    }
                    if ("whatsapp_appid" in data && data.whatsapp_appid != undefined) {
                        this.whatsapp_appid = data.whatsapp_appid;
                    }
                }
            }
            get facebook_appid() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set facebook_appid(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get whatsapp_appid() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set whatsapp_appid(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                facebook_appid?: string;
                whatsapp_appid?: string;
            }): ShareConf {
                const message = new ShareConf({});
                if (data.facebook_appid != null) {
                    message.facebook_appid = data.facebook_appid;
                }
                if (data.whatsapp_appid != null) {
                    message.whatsapp_appid = data.whatsapp_appid;
                }
                return message;
            }
            toObject() {
                const data: {
                    facebook_appid?: string;
                    whatsapp_appid?: string;
                } = {};
                if (this.facebook_appid != null) {
                    data.facebook_appid = this.facebook_appid;
                }
                if (this.whatsapp_appid != null) {
                    data.whatsapp_appid = this.whatsapp_appid;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.facebook_appid.length) writer.writeString(1, this.facebook_appid);
                if (this.whatsapp_appid.length) writer.writeString(2, this.whatsapp_appid);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareConf {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new ShareConf();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.facebook_appid = reader.readString();
                            break;
                        case 2:
                            message.whatsapp_appid = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShareConf {
                return ShareConf.deserialize(bytes);
            }
        }
    }

    /** 
      deprecated
       **/
    export class LevelSubLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      upper_contribution_amount?: number;
                      medal_sub_level?: MedalSubLevel;
                      level?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if (
                    "upper_contribution_amount" in data &&
                    data.upper_contribution_amount != undefined
                ) {
                    this.upper_contribution_amount = data.upper_contribution_amount;
                }
                if ("medal_sub_level" in data && data.medal_sub_level != undefined) {
                    this.medal_sub_level = data.medal_sub_level;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get upper_contribution_amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set upper_contribution_amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get medal_sub_level() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                MedalSubLevel.MSL_UNKNOWN
            ) as MedalSubLevel;
        }
        set medal_sub_level(value: MedalSubLevel) {
            pb_1.Message.setField(this, 2, value);
        }

        /** 
          MedalLevel | MedalSubLevel 或运算
           **/
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }

        /** 
          MedalLevel | MedalSubLevel 或运算
           **/
        set level(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            upper_contribution_amount?: number;
            medal_sub_level?: MedalSubLevel;
            level?: number;
        }): LevelSubLevel {
            const message = new LevelSubLevel({});
            if (data.upper_contribution_amount != null) {
                message.upper_contribution_amount = data.upper_contribution_amount;
            }
            if (data.medal_sub_level != null) {
                message.medal_sub_level = data.medal_sub_level;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            return message;
        }
        toObject() {
            const data: {
                upper_contribution_amount?: number;
                medal_sub_level?: MedalSubLevel;
                level?: number;
            } = {};
            if (this.upper_contribution_amount != null) {
                data.upper_contribution_amount = this.upper_contribution_amount;
            }
            if (this.medal_sub_level != null) {
                data.medal_sub_level = this.medal_sub_level;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.upper_contribution_amount != 0)
                writer.writeInt64(1, this.upper_contribution_amount);
            if (this.medal_sub_level != MedalSubLevel.MSL_UNKNOWN)
                writer.writeEnum(2, this.medal_sub_level);
            if (this.level != 0) writer.writeInt32(3, this.level);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelSubLevel {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LevelSubLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.upper_contribution_amount = reader.readInt64();
                        break;
                    case 2:
                        message.medal_sub_level = reader.readEnum();
                        break;
                    case 3:
                        message.level = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LevelSubLevel {
            return LevelSubLevel.deserialize(bytes);
        }
    }

    /** 
      deprecated
       **/
    export class LevelRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      medal_level?: MedalLevel;
                      sub_level_rules?: LevelSubLevel[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("medal_level" in data && data.medal_level != undefined) {
                    this.medal_level = data.medal_level;
                }
                if ("sub_level_rules" in data && data.sub_level_rules != undefined) {
                    this.sub_level_rules = data.sub_level_rules;
                }
            }
        }
        get medal_level() {
            return pb_1.Message.getFieldWithDefault(this, 1, MedalLevel.ML_UNKNOWN) as MedalLevel;
        }
        set medal_level(value: MedalLevel) {
            pb_1.Message.setField(this, 1, value);
        }
        get sub_level_rules() {
            return pb_1.Message.getRepeatedWrapperField(this, LevelSubLevel, 2) as LevelSubLevel[];
        }
        set sub_level_rules(value: LevelSubLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            medal_level?: MedalLevel;
            sub_level_rules?: ReturnType<typeof LevelSubLevel.prototype.toObject>[];
        }): LevelRule {
            const message = new LevelRule({});
            if (data.medal_level != null) {
                message.medal_level = data.medal_level;
            }
            if (data.sub_level_rules != null) {
                message.sub_level_rules = data.sub_level_rules.map((item) =>
                    LevelSubLevel.fromObject(item)
                );
            }
            return message;
        }
        toObject() {
            const data: {
                medal_level?: MedalLevel;
                sub_level_rules?: ReturnType<typeof LevelSubLevel.prototype.toObject>[];
            } = {};
            if (this.medal_level != null) {
                data.medal_level = this.medal_level;
            }
            if (this.sub_level_rules != null) {
                data.sub_level_rules = this.sub_level_rules.map((item: LevelSubLevel) =>
                    item.toObject()
                );
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.medal_level != MedalLevel.ML_UNKNOWN) writer.writeEnum(1, this.medal_level);
            if (this.sub_level_rules.length)
                writer.writeRepeatedMessage(2, this.sub_level_rules, (item: LevelSubLevel) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelRule {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LevelRule();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.medal_level = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.sub_level_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                LevelSubLevel.deserialize(reader),
                                LevelSubLevel
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LevelRule {
            return LevelRule.deserialize(bytes);
        }
    }

    /** 
      deprecated
       **/
    export class ContributionLevelConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      level_rules?: LevelRule[];
                      desc?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("level_rules" in data && data.level_rules != undefined) {
                    this.level_rules = data.level_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get level_rules() {
            return pb_1.Message.getRepeatedWrapperField(this, LevelRule, 2) as LevelRule[];
        }
        set level_rules(value: LevelRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            level_rules?: ReturnType<typeof LevelRule.prototype.toObject>[];
            desc?: string;
        }): ContributionLevelConf {
            const message = new ContributionLevelConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.level_rules != null) {
                message.level_rules = data.level_rules.map((item) => LevelRule.fromObject(item));
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                level_rules?: ReturnType<typeof LevelRule.prototype.toObject>[];
                desc?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.level_rules != null) {
                data.level_rules = this.level_rules.map((item: LevelRule) => item.toObject());
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.level_rules.length)
                writer.writeRepeatedMessage(2, this.level_rules, (item: LevelRule) =>
                    item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(3, this.desc);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContributionLevelConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new ContributionLevelConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.level_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                LevelRule.deserialize(reader),
                                LevelRule
                            )
                        );
                        break;
                    case 3:
                        message.desc = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContributionLevelConf {
            return ContributionLevelConf.deserialize(bytes);
        }
    }
    export class TeamBetLevelConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      level_rules?: TeamBetLevelConf.LevelRule[];
                      desc?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [2],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("level_rules" in data && data.level_rules != undefined) {
                    this.level_rules = data.level_rules;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get level_rules() {
            return pb_1.Message.getRepeatedWrapperField(
                this,
                TeamBetLevelConf.LevelRule,
                2
            ) as TeamBetLevelConf.LevelRule[];
        }
        set level_rules(value: TeamBetLevelConf.LevelRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            level_rules?: ReturnType<typeof TeamBetLevelConf.LevelRule.prototype.toObject>[];
            desc?: string;
        }): TeamBetLevelConf {
            const message = new TeamBetLevelConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.level_rules != null) {
                message.level_rules = data.level_rules.map((item) =>
                    TeamBetLevelConf.LevelRule.fromObject(item)
                );
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                level_rules?: ReturnType<typeof TeamBetLevelConf.LevelRule.prototype.toObject>[];
                desc?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.level_rules != null) {
                data.level_rules = this.level_rules.map((item: TeamBetLevelConf.LevelRule) =>
                    item.toObject()
                );
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.level_rules.length)
                writer.writeRepeatedMessage(
                    2,
                    this.level_rules,
                    (item: TeamBetLevelConf.LevelRule) => item.serialize(writer)
                );
            if (this.desc.length) writer.writeString(3, this.desc);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamBetLevelConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new TeamBetLevelConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.level_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                2,
                                TeamBetLevelConf.LevelRule.deserialize(reader),
                                TeamBetLevelConf.LevelRule
                            )
                        );
                        break;
                    case 3:
                        message.desc = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamBetLevelConf {
            return TeamBetLevelConf.deserialize(bytes);
        }
    }
    export namespace TeamBetLevelConf {
        /** 
          deprecated
           **/
        export class LevelSubLevel extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          upper_team_bet_amount?: number;
                          medal_sub_level?: MedalSubLevel;
                          level?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if (
                        "upper_team_bet_amount" in data &&
                        data.upper_team_bet_amount != undefined
                    ) {
                        this.upper_team_bet_amount = data.upper_team_bet_amount;
                    }
                    if ("medal_sub_level" in data && data.medal_sub_level != undefined) {
                        this.medal_sub_level = data.medal_sub_level;
                    }
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                }
            }
            get upper_team_bet_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set upper_team_bet_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get medal_sub_level() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    2,
                    MedalSubLevel.MSL_UNKNOWN
                ) as MedalSubLevel;
            }
            set medal_sub_level(value: MedalSubLevel) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              MedalLevel | MedalSubLevel 或运算
               **/
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              MedalLevel | MedalSubLevel 或运算
               **/
            set level(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                upper_team_bet_amount?: number;
                medal_sub_level?: MedalSubLevel;
                level?: number;
            }): LevelSubLevel {
                const message = new LevelSubLevel({});
                if (data.upper_team_bet_amount != null) {
                    message.upper_team_bet_amount = data.upper_team_bet_amount;
                }
                if (data.medal_sub_level != null) {
                    message.medal_sub_level = data.medal_sub_level;
                }
                if (data.level != null) {
                    message.level = data.level;
                }
                return message;
            }
            toObject() {
                const data: {
                    upper_team_bet_amount?: number;
                    medal_sub_level?: MedalSubLevel;
                    level?: number;
                } = {};
                if (this.upper_team_bet_amount != null) {
                    data.upper_team_bet_amount = this.upper_team_bet_amount;
                }
                if (this.medal_sub_level != null) {
                    data.medal_sub_level = this.medal_sub_level;
                }
                if (this.level != null) {
                    data.level = this.level;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.upper_team_bet_amount != 0)
                    writer.writeInt64(1, this.upper_team_bet_amount);
                if (this.medal_sub_level != MedalSubLevel.MSL_UNKNOWN)
                    writer.writeEnum(2, this.medal_sub_level);
                if (this.level != 0) writer.writeInt32(3, this.level);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelSubLevel {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new LevelSubLevel();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.upper_team_bet_amount = reader.readInt64();
                            break;
                        case 2:
                            message.medal_sub_level = reader.readEnum();
                            break;
                        case 3:
                            message.level = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LevelSubLevel {
                return LevelSubLevel.deserialize(bytes);
            }
        }

        /** 
          deprecated
           **/
        export class LevelRule extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          medal_level?: MedalLevel;
                          sub_level_rules?: TeamBetLevelConf.LevelSubLevel[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("medal_level" in data && data.medal_level != undefined) {
                        this.medal_level = data.medal_level;
                    }
                    if ("sub_level_rules" in data && data.sub_level_rules != undefined) {
                        this.sub_level_rules = data.sub_level_rules;
                    }
                }
            }
            get medal_level() {
                return pb_1.Message.getFieldWithDefault(
                    this,
                    1,
                    MedalLevel.ML_UNKNOWN
                ) as MedalLevel;
            }
            set medal_level(value: MedalLevel) {
                pb_1.Message.setField(this, 1, value);
            }
            get sub_level_rules() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    TeamBetLevelConf.LevelSubLevel,
                    2
                ) as TeamBetLevelConf.LevelSubLevel[];
            }
            set sub_level_rules(value: TeamBetLevelConf.LevelSubLevel[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                medal_level?: MedalLevel;
                sub_level_rules?: ReturnType<
                    typeof TeamBetLevelConf.LevelSubLevel.prototype.toObject
                >[];
            }): LevelRule {
                const message = new LevelRule({});
                if (data.medal_level != null) {
                    message.medal_level = data.medal_level;
                }
                if (data.sub_level_rules != null) {
                    message.sub_level_rules = data.sub_level_rules.map((item) =>
                        TeamBetLevelConf.LevelSubLevel.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    medal_level?: MedalLevel;
                    sub_level_rules?: ReturnType<
                        typeof TeamBetLevelConf.LevelSubLevel.prototype.toObject
                    >[];
                } = {};
                if (this.medal_level != null) {
                    data.medal_level = this.medal_level;
                }
                if (this.sub_level_rules != null) {
                    data.sub_level_rules = this.sub_level_rules.map(
                        (item: TeamBetLevelConf.LevelSubLevel) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.medal_level != MedalLevel.ML_UNKNOWN)
                    writer.writeEnum(1, this.medal_level);
                if (this.sub_level_rules.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.sub_level_rules,
                        (item: TeamBetLevelConf.LevelSubLevel) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelRule {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new LevelRule();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.medal_level = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.sub_level_rules, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    TeamBetLevelConf.LevelSubLevel.deserialize(reader),
                                    TeamBetLevelConf.LevelSubLevel
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LevelRule {
                return LevelRule.deserialize(bytes);
            }
        }
    }
    export class RateRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      level?: number;
                      rate?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("rate" in data && data.rate != undefined) {
                    this.rate = data.rate;
                }
            }
        }

        /** 
          或运算后的等级
           **/
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }

        /** 
          或运算后的等级
           **/
        set level(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rate() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set rate(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { level?: number; rate?: string }): RateRule {
            const message = new RateRule({});
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.rate != null) {
                message.rate = data.rate;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: number;
                rate?: string;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.rate != null) {
                data.rate = this.rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != 0) writer.writeInt32(1, this.level);
            if (this.rate.length) writer.writeString(2, this.rate);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RateRule {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new RateRule();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readInt32();
                        break;
                    case 2:
                        message.rate = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RateRule {
            return RateRule.deserialize(bytes);
        }
    }
    export class CommissionConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: string;
                      group_name?: string;
                      game_ids?: number[];
                      rate_rules?: RateRule[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [3, 4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("game_ids" in data && data.game_ids != undefined) {
                    this.game_ids = data.game_ids;
                }
                if ("rate_rules" in data && data.rate_rules != undefined) {
                    this.rate_rules = data.rate_rules;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }

        /** 
          游戏分组
           **/
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }

        /** 
          游戏分组
           **/
        set group_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get game_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set game_ids(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get rate_rules() {
            return pb_1.Message.getRepeatedWrapperField(this, RateRule, 4) as RateRule[];
        }
        set rate_rules(value: RateRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            group_name?: string;
            game_ids?: number[];
            rate_rules?: ReturnType<typeof RateRule.prototype.toObject>[];
        }): CommissionConf {
            const message = new CommissionConf({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.game_ids != null) {
                message.game_ids = data.game_ids;
            }
            if (data.rate_rules != null) {
                message.rate_rules = data.rate_rules.map((item) => RateRule.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                group_name?: string;
                game_ids?: number[];
                rate_rules?: ReturnType<typeof RateRule.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.game_ids != null) {
                data.game_ids = this.game_ids;
            }
            if (this.rate_rules != null) {
                data.rate_rules = this.rate_rules.map((item: RateRule) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length) writer.writeString(1, this.id);
            if (this.group_name.length) writer.writeString(2, this.group_name);
            if (this.game_ids.length) writer.writePackedInt32(3, this.game_ids);
            if (this.rate_rules.length)
                writer.writeRepeatedMessage(4, this.rate_rules, (item: RateRule) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CommissionConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.group_name = reader.readString();
                        break;
                    case 3:
                        message.game_ids = reader.readPackedInt32();
                        break;
                    case 4:
                        reader.readMessage(message.rate_rules, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                RateRule.deserialize(reader),
                                RateRule
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommissionConf {
            return CommissionConf.deserialize(bytes);
        }
    }
    export class GetCommissionConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): GetCommissionConfReq {
            const message = new GetCommissionConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetCommissionConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommissionConfReq {
            return GetCommissionConfReq.deserialize(bytes);
        }
    }
    export class GetCommissionConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: GetCommissionConfResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                GetCommissionConfResp.RespData,
                2
            ) as GetCommissionConfResp.RespData;
        }
        set data(value: GetCommissionConfResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof GetCommissionConfResp.RespData.prototype.toObject>;
        }): GetCommissionConfResp {
            const message = new GetCommissionConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = GetCommissionConfResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof GetCommissionConfResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetCommissionConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data = GetCommissionConfResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommissionConfResp {
            return GetCommissionConfResp.deserialize(bytes);
        }
    }
    export namespace GetCommissionConfResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          contribution_level_conf?: ContributionLevelConf;
                          commission_confs?: CommissionConf[];
                          team_bet_level_conf?: TeamBetLevelConf;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if (
                        "contribution_level_conf" in data &&
                        data.contribution_level_conf != undefined
                    ) {
                        this.contribution_level_conf = data.contribution_level_conf;
                    }
                    if ("commission_confs" in data && data.commission_confs != undefined) {
                        this.commission_confs = data.commission_confs;
                    }
                    if ("team_bet_level_conf" in data && data.team_bet_level_conf != undefined) {
                        this.team_bet_level_conf = data.team_bet_level_conf;
                    }
                }
            }

            /** 
              deprecated
               **/
            get contribution_level_conf() {
                return pb_1.Message.getWrapperField(
                    this,
                    ContributionLevelConf,
                    1
                ) as ContributionLevelConf;
            }

            /** 
              deprecated
               **/
            set contribution_level_conf(value: ContributionLevelConf) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_contribution_level_conf() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get commission_confs() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    CommissionConf,
                    2
                ) as CommissionConf[];
            }
            set commission_confs(value: CommissionConf[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get team_bet_level_conf() {
                return pb_1.Message.getWrapperField(this, TeamBetLevelConf, 3) as TeamBetLevelConf;
            }
            set team_bet_level_conf(value: TeamBetLevelConf) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_team_bet_level_conf() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                contribution_level_conf?: ReturnType<
                    typeof ContributionLevelConf.prototype.toObject
                >;
                commission_confs?: ReturnType<typeof CommissionConf.prototype.toObject>[];
                team_bet_level_conf?: ReturnType<typeof TeamBetLevelConf.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.contribution_level_conf != null) {
                    message.contribution_level_conf = ContributionLevelConf.fromObject(
                        data.contribution_level_conf
                    );
                }
                if (data.commission_confs != null) {
                    message.commission_confs = data.commission_confs.map((item) =>
                        CommissionConf.fromObject(item)
                    );
                }
                if (data.team_bet_level_conf != null) {
                    message.team_bet_level_conf = TeamBetLevelConf.fromObject(
                        data.team_bet_level_conf
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    contribution_level_conf?: ReturnType<
                        typeof ContributionLevelConf.prototype.toObject
                    >;
                    commission_confs?: ReturnType<typeof CommissionConf.prototype.toObject>[];
                    team_bet_level_conf?: ReturnType<typeof TeamBetLevelConf.prototype.toObject>;
                } = {};
                if (this.contribution_level_conf != null) {
                    data.contribution_level_conf = this.contribution_level_conf.toObject();
                }
                if (this.commission_confs != null) {
                    data.commission_confs = this.commission_confs.map((item: CommissionConf) =>
                        item.toObject()
                    );
                }
                if (this.team_bet_level_conf != null) {
                    data.team_bet_level_conf = this.team_bet_level_conf.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_contribution_level_conf)
                    writer.writeMessage(1, this.contribution_level_conf, () =>
                        this.contribution_level_conf.serialize(writer)
                    );
                if (this.commission_confs.length)
                    writer.writeRepeatedMessage(2, this.commission_confs, (item: CommissionConf) =>
                        item.serialize(writer)
                    );
                if (this.has_team_bet_level_conf)
                    writer.writeMessage(3, this.team_bet_level_conf, () =>
                        this.team_bet_level_conf.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(
                                message.contribution_level_conf,
                                () =>
                                    (message.contribution_level_conf =
                                        ContributionLevelConf.deserialize(reader))
                            );
                            break;
                        case 2:
                            reader.readMessage(message.commission_confs, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    CommissionConf.deserialize(reader),
                                    CommissionConf
                                )
                            );
                            break;
                        case 3:
                            reader.readMessage(
                                message.team_bet_level_conf,
                                () =>
                                    (message.team_bet_level_conf =
                                        TeamBetLevelConf.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      promoter/commission_desc_conf/ 佣金等级配置
       **/
    export class Question extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      question?: string;
                      answer?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
            }
        }
        get question() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set question(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get answer() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set answer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { question?: string; answer?: string }): Question {
            const message = new Question({});
            if (data.question != null) {
                message.question = data.question;
            }
            if (data.answer != null) {
                message.answer = data.answer;
            }
            return message;
        }
        toObject() {
            const data: {
                question?: string;
                answer?: string;
            } = {};
            if (this.question != null) {
                data.question = this.question;
            }
            if (this.answer != null) {
                data.answer = this.answer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question.length) writer.writeString(1, this.question);
            if (this.answer.length) writer.writeString(2, this.answer);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Question {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Question();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question = reader.readString();
                        break;
                    case 2:
                        message.answer = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Question {
            return Question.deserialize(bytes);
        }
    }
    export class CommissionDescConf extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      commission_calc_desc_img?: string;
                      share_desc_img?: string;
                      terms_conditions?: string;
                      questions?: Question[];
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [4],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if (
                    "commission_calc_desc_img" in data &&
                    data.commission_calc_desc_img != undefined
                ) {
                    this.commission_calc_desc_img = data.commission_calc_desc_img;
                }
                if ("share_desc_img" in data && data.share_desc_img != undefined) {
                    this.share_desc_img = data.share_desc_img;
                }
                if ("terms_conditions" in data && data.terms_conditions != undefined) {
                    this.terms_conditions = data.terms_conditions;
                }
                if ("questions" in data && data.questions != undefined) {
                    this.questions = data.questions;
                }
            }
        }
        get commission_calc_desc_img() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set commission_calc_desc_img(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get share_desc_img() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set share_desc_img(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get terms_conditions() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set terms_conditions(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get questions() {
            return pb_1.Message.getRepeatedWrapperField(this, Question, 4) as Question[];
        }
        set questions(value: Question[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            commission_calc_desc_img?: string;
            share_desc_img?: string;
            terms_conditions?: string;
            questions?: ReturnType<typeof Question.prototype.toObject>[];
        }): CommissionDescConf {
            const message = new CommissionDescConf({});
            if (data.commission_calc_desc_img != null) {
                message.commission_calc_desc_img = data.commission_calc_desc_img;
            }
            if (data.share_desc_img != null) {
                message.share_desc_img = data.share_desc_img;
            }
            if (data.terms_conditions != null) {
                message.terms_conditions = data.terms_conditions;
            }
            if (data.questions != null) {
                message.questions = data.questions.map((item) => Question.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                commission_calc_desc_img?: string;
                share_desc_img?: string;
                terms_conditions?: string;
                questions?: ReturnType<typeof Question.prototype.toObject>[];
            } = {};
            if (this.commission_calc_desc_img != null) {
                data.commission_calc_desc_img = this.commission_calc_desc_img;
            }
            if (this.share_desc_img != null) {
                data.share_desc_img = this.share_desc_img;
            }
            if (this.terms_conditions != null) {
                data.terms_conditions = this.terms_conditions;
            }
            if (this.questions != null) {
                data.questions = this.questions.map((item: Question) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commission_calc_desc_img.length)
                writer.writeString(1, this.commission_calc_desc_img);
            if (this.share_desc_img.length) writer.writeString(2, this.share_desc_img);
            if (this.terms_conditions.length) writer.writeString(3, this.terms_conditions);
            if (this.questions.length)
                writer.writeRepeatedMessage(4, this.questions, (item: Question) =>
                    item.serialize(writer)
                );
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionDescConf {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CommissionDescConf();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commission_calc_desc_img = reader.readString();
                        break;
                    case 2:
                        message.share_desc_img = reader.readString();
                        break;
                    case 3:
                        message.terms_conditions = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.questions, () =>
                            pb_1.Message.addToRepeatedWrapperField(
                                message,
                                4,
                                Question.deserialize(reader),
                                Question
                            )
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommissionDescConf {
            return CommissionDescConf.deserialize(bytes);
        }
    }
    export class GetCommissionDescConfReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): GetCommissionDescConfReq {
            const message = new GetCommissionDescConfReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionDescConfReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetCommissionDescConfReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommissionDescConfReq {
            return GetCommissionDescConfReq.deserialize(bytes);
        }
    }
    export class GetCommissionDescConfResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: CommissionDescConf;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, CommissionDescConf, 2) as CommissionDescConf;
        }
        set data(value: CommissionDescConf) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof CommissionDescConf.prototype.toObject>;
        }): GetCommissionDescConfResp {
            const message = new GetCommissionDescConfResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = CommissionDescConf.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof CommissionDescConf.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionDescConfResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetCommissionDescConfResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = CommissionDescConf.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommissionDescConfResp {
            return GetCommissionDescConfResp.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                      parent?: User;
                      sub_user_count?: number;
                      cumulative_commission_amount?: number;
                      available_commission_amount?: number;
                      daily_contribution_amount?: number;
                      total_contribution_amount?: number;
                      contribution_level?: number;
                      upper_contribution_amount?: number;
                      child_user_count?: number;
                      ceiling_contribution_amount?: number;
                      daily_team_bet_amount?: number;
                      total_team_bet_amount?: number;
                      upper_team_bet_amount?: number;
                      ceiling_team_bet_amount?: number;
                      team_bet_level?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("sub_user_count" in data && data.sub_user_count != undefined) {
                    this.sub_user_count = data.sub_user_count;
                }
                if (
                    "cumulative_commission_amount" in data &&
                    data.cumulative_commission_amount != undefined
                ) {
                    this.cumulative_commission_amount = data.cumulative_commission_amount;
                }
                if (
                    "available_commission_amount" in data &&
                    data.available_commission_amount != undefined
                ) {
                    this.available_commission_amount = data.available_commission_amount;
                }
                if (
                    "daily_contribution_amount" in data &&
                    data.daily_contribution_amount != undefined
                ) {
                    this.daily_contribution_amount = data.daily_contribution_amount;
                }
                if (
                    "total_contribution_amount" in data &&
                    data.total_contribution_amount != undefined
                ) {
                    this.total_contribution_amount = data.total_contribution_amount;
                }
                if ("contribution_level" in data && data.contribution_level != undefined) {
                    this.contribution_level = data.contribution_level;
                }
                if (
                    "upper_contribution_amount" in data &&
                    data.upper_contribution_amount != undefined
                ) {
                    this.upper_contribution_amount = data.upper_contribution_amount;
                }
                if ("child_user_count" in data && data.child_user_count != undefined) {
                    this.child_user_count = data.child_user_count;
                }
                if (
                    "ceiling_contribution_amount" in data &&
                    data.ceiling_contribution_amount != undefined
                ) {
                    this.ceiling_contribution_amount = data.ceiling_contribution_amount;
                }
                if ("daily_team_bet_amount" in data && data.daily_team_bet_amount != undefined) {
                    this.daily_team_bet_amount = data.daily_team_bet_amount;
                }
                if ("total_team_bet_amount" in data && data.total_team_bet_amount != undefined) {
                    this.total_team_bet_amount = data.total_team_bet_amount;
                }
                if ("upper_team_bet_amount" in data && data.upper_team_bet_amount != undefined) {
                    this.upper_team_bet_amount = data.upper_team_bet_amount;
                }
                if (
                    "ceiling_team_bet_amount" in data &&
                    data.ceiling_team_bet_amount != undefined
                ) {
                    this.ceiling_team_bet_amount = data.ceiling_team_bet_amount;
                }
                if ("team_bet_level" in data && data.team_bet_level != undefined) {
                    this.team_bet_level = data.team_bet_level;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get parent() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set parent(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_parent() {
            return pb_1.Message.getField(this, 2) != null;
        }

        /** 
          下属数量
           **/
        get sub_user_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }

        /** 
          下属数量
           **/
        set sub_user_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          累计佣金
           **/
        get cumulative_commission_amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }

        /** 
          累计佣金
           **/
        set cumulative_commission_amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          可领取佣金
           **/
        get available_commission_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }

        /** 
          可领取佣金
           **/
        set available_commission_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }

        /** 
          每日业绩 deprecated
           **/
        get daily_contribution_amount() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }

        /** 
          每日业绩 deprecated
           **/
        set daily_contribution_amount(value: number) {
            pb_1.Message.setField(this, 6, value);
        }

        /** 
          总业绩 deprecated
           **/
        get total_contribution_amount() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }

        /** 
          总业绩 deprecated
           **/
        set total_contribution_amount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }

        /** 
          业绩等级 deprecated
           **/
        get contribution_level() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }

        /** 
          业绩等级 deprecated
           **/
        set contribution_level(value: number) {
            pb_1.Message.setField(this, 8, value);
        }

        /** 
          下一等级所需业绩 deprecated
           **/
        get upper_contribution_amount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }

        /** 
          下一等级所需业绩 deprecated
           **/
        set upper_contribution_amount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }

        /** 
          直属数量
           **/
        get child_user_count() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }

        /** 
          直属数量
           **/
        set child_user_count(value: number) {
            pb_1.Message.setField(this, 10, value);
        }

        /** 
          满级所需业绩 deprecated
           **/
        get ceiling_contribution_amount() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }

        /** 
          满级所需业绩 deprecated
           **/
        set ceiling_contribution_amount(value: number) {
            pb_1.Message.setField(this, 11, value);
        }

        /** 
          每日团队下注
           **/
        get daily_team_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }

        /** 
          每日团队下注
           **/
        set daily_team_bet_amount(value: number) {
            pb_1.Message.setField(this, 12, value);
        }

        /** 
          总团队下注
           **/
        get total_team_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }

        /** 
          总团队下注
           **/
        set total_team_bet_amount(value: number) {
            pb_1.Message.setField(this, 13, value);
        }

        /** 
          下一等级所需团队下注
           **/
        get upper_team_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }

        /** 
          下一等级所需团队下注
           **/
        set upper_team_bet_amount(value: number) {
            pb_1.Message.setField(this, 14, value);
        }

        /** 
          满级所需团队下注
           **/
        get ceiling_team_bet_amount() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }

        /** 
          满级所需团队下注
           **/
        set ceiling_team_bet_amount(value: number) {
            pb_1.Message.setField(this, 15, value);
        }

        /** 
          团队下注等级
           **/
        get team_bet_level() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }

        /** 
          团队下注等级
           **/
        set team_bet_level(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        static fromObject(data: {
            id?: number;
            parent?: ReturnType<typeof User.prototype.toObject>;
            sub_user_count?: number;
            cumulative_commission_amount?: number;
            available_commission_amount?: number;
            daily_contribution_amount?: number;
            total_contribution_amount?: number;
            contribution_level?: number;
            upper_contribution_amount?: number;
            child_user_count?: number;
            ceiling_contribution_amount?: number;
            daily_team_bet_amount?: number;
            total_team_bet_amount?: number;
            upper_team_bet_amount?: number;
            ceiling_team_bet_amount?: number;
            team_bet_level?: number;
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.parent != null) {
                message.parent = User.fromObject(data.parent);
            }
            if (data.sub_user_count != null) {
                message.sub_user_count = data.sub_user_count;
            }
            if (data.cumulative_commission_amount != null) {
                message.cumulative_commission_amount = data.cumulative_commission_amount;
            }
            if (data.available_commission_amount != null) {
                message.available_commission_amount = data.available_commission_amount;
            }
            if (data.daily_contribution_amount != null) {
                message.daily_contribution_amount = data.daily_contribution_amount;
            }
            if (data.total_contribution_amount != null) {
                message.total_contribution_amount = data.total_contribution_amount;
            }
            if (data.contribution_level != null) {
                message.contribution_level = data.contribution_level;
            }
            if (data.upper_contribution_amount != null) {
                message.upper_contribution_amount = data.upper_contribution_amount;
            }
            if (data.child_user_count != null) {
                message.child_user_count = data.child_user_count;
            }
            if (data.ceiling_contribution_amount != null) {
                message.ceiling_contribution_amount = data.ceiling_contribution_amount;
            }
            if (data.daily_team_bet_amount != null) {
                message.daily_team_bet_amount = data.daily_team_bet_amount;
            }
            if (data.total_team_bet_amount != null) {
                message.total_team_bet_amount = data.total_team_bet_amount;
            }
            if (data.upper_team_bet_amount != null) {
                message.upper_team_bet_amount = data.upper_team_bet_amount;
            }
            if (data.ceiling_team_bet_amount != null) {
                message.ceiling_team_bet_amount = data.ceiling_team_bet_amount;
            }
            if (data.team_bet_level != null) {
                message.team_bet_level = data.team_bet_level;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                parent?: ReturnType<typeof User.prototype.toObject>;
                sub_user_count?: number;
                cumulative_commission_amount?: number;
                available_commission_amount?: number;
                daily_contribution_amount?: number;
                total_contribution_amount?: number;
                contribution_level?: number;
                upper_contribution_amount?: number;
                child_user_count?: number;
                ceiling_contribution_amount?: number;
                daily_team_bet_amount?: number;
                total_team_bet_amount?: number;
                upper_team_bet_amount?: number;
                ceiling_team_bet_amount?: number;
                team_bet_level?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.parent != null) {
                data.parent = this.parent.toObject();
            }
            if (this.sub_user_count != null) {
                data.sub_user_count = this.sub_user_count;
            }
            if (this.cumulative_commission_amount != null) {
                data.cumulative_commission_amount = this.cumulative_commission_amount;
            }
            if (this.available_commission_amount != null) {
                data.available_commission_amount = this.available_commission_amount;
            }
            if (this.daily_contribution_amount != null) {
                data.daily_contribution_amount = this.daily_contribution_amount;
            }
            if (this.total_contribution_amount != null) {
                data.total_contribution_amount = this.total_contribution_amount;
            }
            if (this.contribution_level != null) {
                data.contribution_level = this.contribution_level;
            }
            if (this.upper_contribution_amount != null) {
                data.upper_contribution_amount = this.upper_contribution_amount;
            }
            if (this.child_user_count != null) {
                data.child_user_count = this.child_user_count;
            }
            if (this.ceiling_contribution_amount != null) {
                data.ceiling_contribution_amount = this.ceiling_contribution_amount;
            }
            if (this.daily_team_bet_amount != null) {
                data.daily_team_bet_amount = this.daily_team_bet_amount;
            }
            if (this.total_team_bet_amount != null) {
                data.total_team_bet_amount = this.total_team_bet_amount;
            }
            if (this.upper_team_bet_amount != null) {
                data.upper_team_bet_amount = this.upper_team_bet_amount;
            }
            if (this.ceiling_team_bet_amount != null) {
                data.ceiling_team_bet_amount = this.ceiling_team_bet_amount;
            }
            if (this.team_bet_level != null) {
                data.team_bet_level = this.team_bet_level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt64(1, this.id);
            if (this.has_parent)
                writer.writeMessage(2, this.parent, () => this.parent.serialize(writer));
            if (this.sub_user_count != 0) writer.writeInt32(3, this.sub_user_count);
            if (this.cumulative_commission_amount != 0)
                writer.writeInt64(4, this.cumulative_commission_amount);
            if (this.available_commission_amount != 0)
                writer.writeInt64(5, this.available_commission_amount);
            if (this.daily_contribution_amount != 0)
                writer.writeInt64(6, this.daily_contribution_amount);
            if (this.total_contribution_amount != 0)
                writer.writeInt64(7, this.total_contribution_amount);
            if (this.contribution_level != 0) writer.writeInt64(8, this.contribution_level);
            if (this.upper_contribution_amount != 0)
                writer.writeInt64(9, this.upper_contribution_amount);
            if (this.child_user_count != 0) writer.writeInt32(10, this.child_user_count);
            if (this.ceiling_contribution_amount != 0)
                writer.writeInt64(11, this.ceiling_contribution_amount);
            if (this.daily_team_bet_amount != 0) writer.writeInt64(12, this.daily_team_bet_amount);
            if (this.total_team_bet_amount != 0) writer.writeInt64(13, this.total_team_bet_amount);
            if (this.upper_team_bet_amount != 0) writer.writeInt64(14, this.upper_team_bet_amount);
            if (this.ceiling_team_bet_amount != 0)
                writer.writeInt64(15, this.ceiling_team_bet_amount);
            if (this.team_bet_level != 0) writer.writeInt64(16, this.team_bet_level);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(
                            message.parent,
                            () => (message.parent = User.deserialize(reader))
                        );
                        break;
                    case 3:
                        message.sub_user_count = reader.readInt32();
                        break;
                    case 4:
                        message.cumulative_commission_amount = reader.readInt64();
                        break;
                    case 5:
                        message.available_commission_amount = reader.readInt64();
                        break;
                    case 6:
                        message.daily_contribution_amount = reader.readInt64();
                        break;
                    case 7:
                        message.total_contribution_amount = reader.readInt64();
                        break;
                    case 8:
                        message.contribution_level = reader.readInt64();
                        break;
                    case 9:
                        message.upper_contribution_amount = reader.readInt64();
                        break;
                    case 10:
                        message.child_user_count = reader.readInt32();
                        break;
                    case 11:
                        message.ceiling_contribution_amount = reader.readInt64();
                        break;
                    case 12:
                        message.daily_team_bet_amount = reader.readInt64();
                        break;
                    case 13:
                        message.total_team_bet_amount = reader.readInt64();
                        break;
                    case 14:
                        message.upper_team_bet_amount = reader.readInt64();
                        break;
                    case 15:
                        message.ceiling_team_bet_amount = reader.readInt64();
                        break;
                    case 16:
                        message.team_bet_level = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }

    /** 
      个人配置及汇总信息
       promoter/info/
       **/
    export class PromoterInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      detail?: boolean;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }

        /** 
          是否展示详细信息（大厅只需要返回 enable 字段时，可以设置此字段为 false）
           **/
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }

        /** 
          是否展示详细信息（大厅只需要返回 enable 字段时，可以设置此字段为 false）
           **/
        set detail(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            detail?: boolean;
        }): PromoterInfoReq {
            const message = new PromoterInfoReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                detail?: boolean;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.detail != false) writer.writeBool(2, this.detail);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterInfoReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.detail = reader.readBool();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterInfoReq {
            return PromoterInfoReq.deserialize(bytes);
        }
    }
    export class PromoterInfoResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterInfoResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterInfoResp.RespData,
                2
            ) as PromoterInfoResp.RespData;
        }
        set data(value: PromoterInfoResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterInfoResp.RespData.prototype.toObject>;
        }): PromoterInfoResp {
            const message = new PromoterInfoResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterInfoResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterInfoResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterInfoResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterInfoResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () => (message.data = PromoterInfoResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterInfoResp {
            return PromoterInfoResp.deserialize(bytes);
        }
    }
    export namespace PromoterInfoResp {
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          enable?: boolean;
                          product_conf?: ProductConf;
                          user?: User;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("enable" in data && data.enable != undefined) {
                        this.enable = data.enable;
                    }
                    if ("product_conf" in data && data.product_conf != undefined) {
                        this.product_conf = data.product_conf;
                    }
                    if ("user" in data && data.user != undefined) {
                        this.user = data.user;
                    }
                }
            }
            get enable() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set enable(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get product_conf() {
                return pb_1.Message.getWrapperField(this, ProductConf, 2) as ProductConf;
            }
            set product_conf(value: ProductConf) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_product_conf() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get user() {
                return pb_1.Message.getWrapperField(this, User, 3) as User;
            }
            set user(value: User) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_user() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                enable?: boolean;
                product_conf?: ReturnType<typeof ProductConf.prototype.toObject>;
                user?: ReturnType<typeof User.prototype.toObject>;
            }): RespData {
                const message = new RespData({});
                if (data.enable != null) {
                    message.enable = data.enable;
                }
                if (data.product_conf != null) {
                    message.product_conf = ProductConf.fromObject(data.product_conf);
                }
                if (data.user != null) {
                    message.user = User.fromObject(data.user);
                }
                return message;
            }
            toObject() {
                const data: {
                    enable?: boolean;
                    product_conf?: ReturnType<typeof ProductConf.prototype.toObject>;
                    user?: ReturnType<typeof User.prototype.toObject>;
                } = {};
                if (this.enable != null) {
                    data.enable = this.enable;
                }
                if (this.product_conf != null) {
                    data.product_conf = this.product_conf.toObject();
                }
                if (this.user != null) {
                    data.user = this.user.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.enable != false) writer.writeBool(1, this.enable);
                if (this.has_product_conf)
                    writer.writeMessage(2, this.product_conf, () =>
                        this.product_conf.serialize(writer)
                    );
                if (this.has_user)
                    writer.writeMessage(3, this.user, () => this.user.serialize(writer));
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.enable = reader.readBool();
                            break;
                        case 2:
                            reader.readMessage(
                                message.product_conf,
                                () => (message.product_conf = ProductConf.deserialize(reader))
                            );
                            break;
                        case 3:
                            reader.readMessage(
                                message.user,
                                () => (message.user = User.deserialize(reader))
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      领取佣金
       promoter/commission/receive/
       **/
    export class PromoterReceiveCommissionReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
        }): PromoterReceiveCommissionReq {
            const message = new PromoterReceiveCommissionReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterReceiveCommissionReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterReceiveCommissionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterReceiveCommissionReq {
            return PromoterReceiveCommissionReq.deserialize(bytes);
        }
    }
    export class PromoterReceiveCommissionResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): PromoterReceiveCommissionResp {
            const message = new PromoterReceiveCommissionResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterReceiveCommissionResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterReceiveCommissionResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterReceiveCommissionResp {
            return PromoterReceiveCommissionResp.deserialize(bytes);
        }
    }

    /** 
      领取佣金记录
       promoter/commission/receive_records/
       **/
    export class PromoterCommissionRecordsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      start_time?: number;
                      end_time?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            start_time?: number;
            end_time?: number;
        }): PromoterCommissionRecordsReq {
            const message = new PromoterCommissionRecordsReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.start_time != 0) writer.writeInt64(2, this.start_time);
            if (this.end_time != 0) writer.writeInt64(3, this.end_time);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterCommissionRecordsReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterCommissionRecordsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.start_time = reader.readInt64();
                        break;
                    case 3:
                        message.end_time = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterCommissionRecordsReq {
            return PromoterCommissionRecordsReq.deserialize(bytes);
        }
    }
    export class PromoterCommissionRecordsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterCommissionRecordsResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterCommissionRecordsResp.RespData,
                2
            ) as PromoterCommissionRecordsResp.RespData;
        }
        set data(value: PromoterCommissionRecordsResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterCommissionRecordsResp.RespData.prototype.toObject>;
        }): PromoterCommissionRecordsResp {
            const message = new PromoterCommissionRecordsResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterCommissionRecordsResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterCommissionRecordsResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterCommissionRecordsResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterCommissionRecordsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterCommissionRecordsResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterCommissionRecordsResp {
            return PromoterCommissionRecordsResp.deserialize(bytes);
        }
    }
    export namespace PromoterCommissionRecordsResp {
        export class Record extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          amount?: number;
                          created_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("created_at" in data && data.created_at != undefined) {
                        this.created_at = data.created_at;
                    }
                }
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get created_at() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set created_at(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: { amount?: number; created_at?: number }): Record {
                const message = new Record({});
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.created_at != null) {
                    message.created_at = data.created_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    amount?: number;
                    created_at?: number;
                } = {};
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.created_at != null) {
                    data.created_at = this.created_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.amount != 0) writer.writeInt64(1, this.amount);
                if (this.created_at != 0) writer.writeInt64(2, this.created_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Record();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.amount = reader.readInt64();
                            break;
                        case 2:
                            message.created_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Record {
                return Record.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          records?: PromoterCommissionRecordsResp.Record[];
                          total_amount?: number;
                          total?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("records" in data && data.records != undefined) {
                        this.records = data.records;
                    }
                    if ("total_amount" in data && data.total_amount != undefined) {
                        this.total_amount = data.total_amount;
                    }
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                }
            }
            get records() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterCommissionRecordsResp.Record,
                    1
                ) as PromoterCommissionRecordsResp.Record[];
            }
            set records(value: PromoterCommissionRecordsResp.Record[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get total_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set total_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                records?: ReturnType<
                    typeof PromoterCommissionRecordsResp.Record.prototype.toObject
                >[];
                total_amount?: number;
                total?: number;
            }): RespData {
                const message = new RespData({});
                if (data.records != null) {
                    message.records = data.records.map((item) =>
                        PromoterCommissionRecordsResp.Record.fromObject(item)
                    );
                }
                if (data.total_amount != null) {
                    message.total_amount = data.total_amount;
                }
                if (data.total != null) {
                    message.total = data.total;
                }
                return message;
            }
            toObject() {
                const data: {
                    records?: ReturnType<
                        typeof PromoterCommissionRecordsResp.Record.prototype.toObject
                    >[];
                    total_amount?: number;
                    total?: number;
                } = {};
                if (this.records != null) {
                    data.records = this.records.map((item: PromoterCommissionRecordsResp.Record) =>
                        item.toObject()
                    );
                }
                if (this.total_amount != null) {
                    data.total_amount = this.total_amount;
                }
                if (this.total != null) {
                    data.total = this.total;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.records.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.records,
                        (item: PromoterCommissionRecordsResp.Record) => item.serialize(writer)
                    );
                if (this.total_amount != 0) writer.writeInt64(2, this.total_amount);
                if (this.total != 0) writer.writeInt32(3, this.total);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.records, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    PromoterCommissionRecordsResp.Record.deserialize(reader),
                                    PromoterCommissionRecordsResp.Record
                                )
                            );
                            break;
                        case 2:
                            message.total_amount = reader.readInt64();
                            break;
                        case 3:
                            message.total = reader.readInt32();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      我的每日佣金数据
       promoter/commission/daily_stats/
       **/
    export class PromoterDailyCommissionReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page_no?: number;
                      page_size?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page_no?: number;
            page_size?: number;
        }): PromoterDailyCommissionReq {
            const message = new PromoterDailyCommissionReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page_no?: number;
                page_size?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.page_no != 0) writer.writeInt32(2, this.page_no);
            if (this.page_size != 0) writer.writeInt32(3, this.page_size);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyCommissionReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyCommissionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.page_no = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionReq {
            return PromoterDailyCommissionReq.deserialize(bytes);
        }
    }
    export class PromoterDailyCommissionResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterDailyCommissionResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterDailyCommissionResp.RespData,
                2
            ) as PromoterDailyCommissionResp.RespData;
        }
        set data(value: PromoterDailyCommissionResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterDailyCommissionResp.RespData.prototype.toObject>;
        }): PromoterDailyCommissionResp {
            const message = new PromoterDailyCommissionResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterDailyCommissionResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterDailyCommissionResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyCommissionResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyCommissionResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterDailyCommissionResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionResp {
            return PromoterDailyCommissionResp.deserialize(bytes);
        }
    }
    export namespace PromoterDailyCommissionResp {
        export class DailyStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          day?: number;
                          commission_amount?: number;
                          child_commission_amount?: number;
                          sub_commission_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("day" in data && data.day != undefined) {
                        this.day = data.day;
                    }
                    if ("commission_amount" in data && data.commission_amount != undefined) {
                        this.commission_amount = data.commission_amount;
                    }
                    if (
                        "child_commission_amount" in data &&
                        data.child_commission_amount != undefined
                    ) {
                        this.child_commission_amount = data.child_commission_amount;
                    }
                    if (
                        "sub_commission_amount" in data &&
                        data.sub_commission_amount != undefined
                    ) {
                        this.sub_commission_amount = data.sub_commission_amount;
                    }
                }
            }
            get day() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set day(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set commission_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get child_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set child_commission_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get sub_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set sub_commission_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                day?: number;
                commission_amount?: number;
                child_commission_amount?: number;
                sub_commission_amount?: number;
            }): DailyStat {
                const message = new DailyStat({});
                if (data.day != null) {
                    message.day = data.day;
                }
                if (data.commission_amount != null) {
                    message.commission_amount = data.commission_amount;
                }
                if (data.child_commission_amount != null) {
                    message.child_commission_amount = data.child_commission_amount;
                }
                if (data.sub_commission_amount != null) {
                    message.sub_commission_amount = data.sub_commission_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    day?: number;
                    commission_amount?: number;
                    child_commission_amount?: number;
                    sub_commission_amount?: number;
                } = {};
                if (this.day != null) {
                    data.day = this.day;
                }
                if (this.commission_amount != null) {
                    data.commission_amount = this.commission_amount;
                }
                if (this.child_commission_amount != null) {
                    data.child_commission_amount = this.child_commission_amount;
                }
                if (this.sub_commission_amount != null) {
                    data.sub_commission_amount = this.sub_commission_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.day != 0) writer.writeInt64(1, this.day);
                if (this.commission_amount != 0) writer.writeInt64(2, this.commission_amount);
                if (this.child_commission_amount != 0)
                    writer.writeInt64(3, this.child_commission_amount);
                if (this.sub_commission_amount != 0)
                    writer.writeInt64(4, this.sub_commission_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new DailyStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.day = reader.readInt64();
                            break;
                        case 2:
                            message.commission_amount = reader.readInt64();
                            break;
                        case 3:
                            message.child_commission_amount = reader.readInt64();
                            break;
                        case 4:
                            message.sub_commission_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DailyStat {
                return DailyStat.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          total_commission_amount?: number;
                          total_child_commission_amount?: number;
                          total_sub_commission_amount?: number;
                          daily_stats?: PromoterDailyCommissionResp.DailyStat[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [5],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if (
                        "total_commission_amount" in data &&
                        data.total_commission_amount != undefined
                    ) {
                        this.total_commission_amount = data.total_commission_amount;
                    }
                    if (
                        "total_child_commission_amount" in data &&
                        data.total_child_commission_amount != undefined
                    ) {
                        this.total_child_commission_amount = data.total_child_commission_amount;
                    }
                    if (
                        "total_sub_commission_amount" in data &&
                        data.total_sub_commission_amount != undefined
                    ) {
                        this.total_sub_commission_amount = data.total_sub_commission_amount;
                    }
                    if ("daily_stats" in data && data.daily_stats != undefined) {
                        this.daily_stats = data.daily_stats;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              总佣金
               **/
            get total_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              总佣金
               **/
            set total_commission_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              直属佣金
               **/
            get total_child_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              直属佣金
               **/
            set total_child_commission_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              下属佣金
               **/
            get total_sub_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              下属佣金
               **/
            set total_sub_commission_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }

            /** 
              length == consecutive_days_no
               **/
            get daily_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterDailyCommissionResp.DailyStat,
                    5
                ) as PromoterDailyCommissionResp.DailyStat[];
            }

            /** 
              length == consecutive_days_no
               **/
            set daily_stats(value: PromoterDailyCommissionResp.DailyStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 5, value);
            }
            static fromObject(data: {
                total?: number;
                total_commission_amount?: number;
                total_child_commission_amount?: number;
                total_sub_commission_amount?: number;
                daily_stats?: ReturnType<
                    typeof PromoterDailyCommissionResp.DailyStat.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.total_commission_amount != null) {
                    message.total_commission_amount = data.total_commission_amount;
                }
                if (data.total_child_commission_amount != null) {
                    message.total_child_commission_amount = data.total_child_commission_amount;
                }
                if (data.total_sub_commission_amount != null) {
                    message.total_sub_commission_amount = data.total_sub_commission_amount;
                }
                if (data.daily_stats != null) {
                    message.daily_stats = data.daily_stats.map((item) =>
                        PromoterDailyCommissionResp.DailyStat.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    total_commission_amount?: number;
                    total_child_commission_amount?: number;
                    total_sub_commission_amount?: number;
                    daily_stats?: ReturnType<
                        typeof PromoterDailyCommissionResp.DailyStat.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.total_commission_amount != null) {
                    data.total_commission_amount = this.total_commission_amount;
                }
                if (this.total_child_commission_amount != null) {
                    data.total_child_commission_amount = this.total_child_commission_amount;
                }
                if (this.total_sub_commission_amount != null) {
                    data.total_sub_commission_amount = this.total_sub_commission_amount;
                }
                if (this.daily_stats != null) {
                    data.daily_stats = this.daily_stats.map(
                        (item: PromoterDailyCommissionResp.DailyStat) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.total_commission_amount != 0)
                    writer.writeInt64(2, this.total_commission_amount);
                if (this.total_child_commission_amount != 0)
                    writer.writeInt64(3, this.total_child_commission_amount);
                if (this.total_sub_commission_amount != 0)
                    writer.writeInt64(4, this.total_sub_commission_amount);
                if (this.daily_stats.length)
                    writer.writeRepeatedMessage(
                        5,
                        this.daily_stats,
                        (item: PromoterDailyCommissionResp.DailyStat) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            message.total_commission_amount = reader.readInt64();
                            break;
                        case 3:
                            message.total_child_commission_amount = reader.readInt64();
                            break;
                        case 4:
                            message.total_sub_commission_amount = reader.readInt64();
                            break;
                        case 5:
                            reader.readMessage(message.daily_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    5,
                                    PromoterDailyCommissionResp.DailyStat.deserialize(reader),
                                    PromoterDailyCommissionResp.DailyStat
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      我的每日佣金详情数据
       promoter/commission/daily_stats_detail/
       **/
    export class PromoterDailyCommissionDetailReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page_no?: number;
                      page_size?: number;
                      order_by?: PromoterDailyCommissionDetailReq.OrderBy;
                      order_type?: PromoterDailyCommissionDetailReq.OrderType;
                      day?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("order_by" in data && data.order_by != undefined) {
                    this.order_by = data.order_by;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
                if ("day" in data && data.day != undefined) {
                    this.day = data.day;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get order_by() {
            return pb_1.Message.getFieldWithDefault(
                this,
                4,
                PromoterDailyCommissionDetailReq.OrderBy.ORDER_BY_UNSPECIFIED
            ) as PromoterDailyCommissionDetailReq.OrderBy;
        }
        set order_by(value: PromoterDailyCommissionDetailReq.OrderBy) {
            pb_1.Message.setField(this, 4, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                5,
                PromoterDailyCommissionDetailReq.OrderType.ASC
            ) as PromoterDailyCommissionDetailReq.OrderType;
        }
        set order_type(value: PromoterDailyCommissionDetailReq.OrderType) {
            pb_1.Message.setField(this, 5, value);
        }
        get day() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set day(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page_no?: number;
            page_size?: number;
            order_by?: PromoterDailyCommissionDetailReq.OrderBy;
            order_type?: PromoterDailyCommissionDetailReq.OrderType;
            day?: number;
        }): PromoterDailyCommissionDetailReq {
            const message = new PromoterDailyCommissionDetailReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.order_by != null) {
                message.order_by = data.order_by;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            if (data.day != null) {
                message.day = data.day;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page_no?: number;
                page_size?: number;
                order_by?: PromoterDailyCommissionDetailReq.OrderBy;
                order_type?: PromoterDailyCommissionDetailReq.OrderType;
                day?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.order_by != null) {
                data.order_by = this.order_by;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            if (this.day != null) {
                data.day = this.day;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.page_no != 0) writer.writeInt32(2, this.page_no);
            if (this.page_size != 0) writer.writeInt32(3, this.page_size);
            if (this.order_by != PromoterDailyCommissionDetailReq.OrderBy.ORDER_BY_UNSPECIFIED)
                writer.writeEnum(4, this.order_by);
            if (this.order_type != PromoterDailyCommissionDetailReq.OrderType.ASC)
                writer.writeEnum(5, this.order_type);
            if (this.day != 0) writer.writeInt64(6, this.day);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): PromoterDailyCommissionDetailReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyCommissionDetailReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.page_no = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        message.order_by = reader.readEnum();
                        break;
                    case 5:
                        message.order_type = reader.readEnum();
                        break;
                    case 6:
                        message.day = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionDetailReq {
            return PromoterDailyCommissionDetailReq.deserialize(bytes);
        }
    }
    export namespace PromoterDailyCommissionDetailReq {
        export enum OrderBy {
            ORDER_BY_UNSPECIFIED = 0,

            /** 
              直属下注金额
               **/
            ORDER_BY_CHILD_BET_AMOUNT = 1,

            /** 
              直属佣金金额
               **/
            ORDER_BY_CHILD_COMMISSION_AMOUNT = 2,

            /** 
              下属下注金额
               **/
            ORDER_BY_SUB_BET_AMOUNT = 3,

            /** 
              下属佣金金额
               **/
            ORDER_BY_SUB_COMMISSION_AMOUNT = 4,
        }
        export enum OrderType {
            ASC = 0,
            DESC = 1,
        }
    }
    export class PromoterDailyCommissionDetailResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterDailyCommissionDetailResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterDailyCommissionDetailResp.RespData,
                2
            ) as PromoterDailyCommissionDetailResp.RespData;
        }
        set data(value: PromoterDailyCommissionDetailResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterDailyCommissionDetailResp.RespData.prototype.toObject>;
        }): PromoterDailyCommissionDetailResp {
            const message = new PromoterDailyCommissionDetailResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterDailyCommissionDetailResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<
                    typeof PromoterDailyCommissionDetailResp.RespData.prototype.toObject
                >;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): PromoterDailyCommissionDetailResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyCommissionDetailResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterDailyCommissionDetailResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionDetailResp {
            return PromoterDailyCommissionDetailResp.deserialize(bytes);
        }
    }
    export namespace PromoterDailyCommissionDetailResp {
        export class Stat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          user_id?: number;
                          game_id?: number;
                          child_bet_amount?: number;
                          child_commission_amount?: number;
                          sub_bet_amount?: number;
                          sub_commission_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("game_id" in data && data.game_id != undefined) {
                        this.game_id = data.game_id;
                    }
                    if ("child_bet_amount" in data && data.child_bet_amount != undefined) {
                        this.child_bet_amount = data.child_bet_amount;
                    }
                    if (
                        "child_commission_amount" in data &&
                        data.child_commission_amount != undefined
                    ) {
                        this.child_commission_amount = data.child_commission_amount;
                    }
                    if ("sub_bet_amount" in data && data.sub_bet_amount != undefined) {
                        this.sub_bet_amount = data.sub_bet_amount;
                    }
                    if (
                        "sub_commission_amount" in data &&
                        data.sub_commission_amount != undefined
                    ) {
                        this.sub_commission_amount = data.sub_commission_amount;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get game_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set game_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get child_bet_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set child_bet_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get child_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set child_commission_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get sub_bet_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set sub_bet_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get sub_commission_amount() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set sub_commission_amount(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                user_id?: number;
                game_id?: number;
                child_bet_amount?: number;
                child_commission_amount?: number;
                sub_bet_amount?: number;
                sub_commission_amount?: number;
            }): Stat {
                const message = new Stat({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.game_id != null) {
                    message.game_id = data.game_id;
                }
                if (data.child_bet_amount != null) {
                    message.child_bet_amount = data.child_bet_amount;
                }
                if (data.child_commission_amount != null) {
                    message.child_commission_amount = data.child_commission_amount;
                }
                if (data.sub_bet_amount != null) {
                    message.sub_bet_amount = data.sub_bet_amount;
                }
                if (data.sub_commission_amount != null) {
                    message.sub_commission_amount = data.sub_commission_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: number;
                    game_id?: number;
                    child_bet_amount?: number;
                    child_commission_amount?: number;
                    sub_bet_amount?: number;
                    sub_commission_amount?: number;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.game_id != null) {
                    data.game_id = this.game_id;
                }
                if (this.child_bet_amount != null) {
                    data.child_bet_amount = this.child_bet_amount;
                }
                if (this.child_commission_amount != null) {
                    data.child_commission_amount = this.child_commission_amount;
                }
                if (this.sub_bet_amount != null) {
                    data.sub_bet_amount = this.sub_bet_amount;
                }
                if (this.sub_commission_amount != null) {
                    data.sub_commission_amount = this.sub_commission_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.user_id != 0) writer.writeInt64(1, this.user_id);
                if (this.game_id != 0) writer.writeInt32(2, this.game_id);
                if (this.child_bet_amount != 0) writer.writeInt64(3, this.child_bet_amount);
                if (this.child_commission_amount != 0)
                    writer.writeInt64(4, this.child_commission_amount);
                if (this.sub_bet_amount != 0) writer.writeInt64(5, this.sub_bet_amount);
                if (this.sub_commission_amount != 0)
                    writer.writeInt64(6, this.sub_commission_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new Stat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readInt64();
                            break;
                        case 2:
                            message.game_id = reader.readInt32();
                            break;
                        case 3:
                            message.child_bet_amount = reader.readInt64();
                            break;
                        case 4:
                            message.child_commission_amount = reader.readInt64();
                            break;
                        case 5:
                            message.sub_bet_amount = reader.readInt64();
                            break;
                        case 6:
                            message.sub_commission_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Stat {
                return Stat.deserialize(bytes);
            }
        }
        export class CommissionConf extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          level?: number;
                          group_name?: string;
                          rate?: string;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                    if ("group_name" in data && data.group_name != undefined) {
                        this.group_name = data.group_name;
                    }
                    if ("rate" in data && data.rate != undefined) {
                        this.rate = data.rate;
                    }
                }
            }

            /** 
              用户推广员等级
               **/
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              用户推广员等级
               **/
            set level(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              游戏分组
               **/
            get group_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }

            /** 
              游戏分组
               **/
            set group_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              返利比例
               **/
            get rate() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }

            /** 
              返利比例
               **/
            set rate(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                level?: number;
                group_name?: string;
                rate?: string;
            }): CommissionConf {
                const message = new CommissionConf({});
                if (data.level != null) {
                    message.level = data.level;
                }
                if (data.group_name != null) {
                    message.group_name = data.group_name;
                }
                if (data.rate != null) {
                    message.rate = data.rate;
                }
                return message;
            }
            toObject() {
                const data: {
                    level?: number;
                    group_name?: string;
                    rate?: string;
                } = {};
                if (this.level != null) {
                    data.level = this.level;
                }
                if (this.group_name != null) {
                    data.group_name = this.group_name;
                }
                if (this.rate != null) {
                    data.rate = this.rate;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.level != 0) writer.writeInt32(1, this.level);
                if (this.group_name.length) writer.writeString(2, this.group_name);
                if (this.rate.length) writer.writeString(3, this.rate);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionConf {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new CommissionConf();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.level = reader.readInt32();
                            break;
                        case 2:
                            message.group_name = reader.readString();
                            break;
                        case 3:
                            message.rate = reader.readString();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CommissionConf {
                return CommissionConf.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          stats?: PromoterDailyCommissionDetailResp.Stat[];
                          commission_confs?: PromoterDailyCommissionDetailResp.CommissionConf[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [1, 2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("stats" in data && data.stats != undefined) {
                        this.stats = data.stats;
                    }
                    if ("commission_confs" in data && data.commission_confs != undefined) {
                        this.commission_confs = data.commission_confs;
                    }
                }
            }
            get stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterDailyCommissionDetailResp.Stat,
                    1
                ) as PromoterDailyCommissionDetailResp.Stat[];
            }
            set stats(value: PromoterDailyCommissionDetailResp.Stat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get commission_confs() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterDailyCommissionDetailResp.CommissionConf,
                    2
                ) as PromoterDailyCommissionDetailResp.CommissionConf[];
            }
            set commission_confs(value: PromoterDailyCommissionDetailResp.CommissionConf[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                stats?: ReturnType<
                    typeof PromoterDailyCommissionDetailResp.Stat.prototype.toObject
                >[];
                commission_confs?: ReturnType<
                    typeof PromoterDailyCommissionDetailResp.CommissionConf.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.stats != null) {
                    message.stats = data.stats.map((item) =>
                        PromoterDailyCommissionDetailResp.Stat.fromObject(item)
                    );
                }
                if (data.commission_confs != null) {
                    message.commission_confs = data.commission_confs.map((item) =>
                        PromoterDailyCommissionDetailResp.CommissionConf.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    stats?: ReturnType<
                        typeof PromoterDailyCommissionDetailResp.Stat.prototype.toObject
                    >[];
                    commission_confs?: ReturnType<
                        typeof PromoterDailyCommissionDetailResp.CommissionConf.prototype.toObject
                    >[];
                } = {};
                if (this.stats != null) {
                    data.stats = this.stats.map((item: PromoterDailyCommissionDetailResp.Stat) =>
                        item.toObject()
                    );
                }
                if (this.commission_confs != null) {
                    data.commission_confs = this.commission_confs.map(
                        (item: PromoterDailyCommissionDetailResp.CommissionConf) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.stats.length)
                    writer.writeRepeatedMessage(
                        1,
                        this.stats,
                        (item: PromoterDailyCommissionDetailResp.Stat) => item.serialize(writer)
                    );
                if (this.commission_confs.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.commission_confs,
                        (item: PromoterDailyCommissionDetailResp.CommissionConf) =>
                            item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    1,
                                    PromoterDailyCommissionDetailResp.Stat.deserialize(reader),
                                    PromoterDailyCommissionDetailResp.Stat
                                )
                            );
                            break;
                        case 2:
                            reader.readMessage(message.commission_confs, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PromoterDailyCommissionDetailResp.CommissionConf.deserialize(
                                        reader
                                    ),
                                    PromoterDailyCommissionDetailResp.CommissionConf
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      昨日下级佣金贡献
       promoter/commission/sub_stats/
       **/
    export class PromoterSubCommissionReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page_no?: number;
                      page_size?: number;
                      order_by?: PromoterSubCommissionReq.OrderBy;
                      order_type?: PromoterSubCommissionReq.OrderType;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("order_by" in data && data.order_by != undefined) {
                    this.order_by = data.order_by;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get order_by() {
            return pb_1.Message.getFieldWithDefault(
                this,
                4,
                PromoterSubCommissionReq.OrderBy.ORDER_BY_UNSPECIFIED
            ) as PromoterSubCommissionReq.OrderBy;
        }
        set order_by(value: PromoterSubCommissionReq.OrderBy) {
            pb_1.Message.setField(this, 4, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(
                this,
                5,
                PromoterSubCommissionReq.OrderType.ASC
            ) as PromoterSubCommissionReq.OrderType;
        }
        set order_type(value: PromoterSubCommissionReq.OrderType) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page_no?: number;
            page_size?: number;
            order_by?: PromoterSubCommissionReq.OrderBy;
            order_type?: PromoterSubCommissionReq.OrderType;
        }): PromoterSubCommissionReq {
            const message = new PromoterSubCommissionReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.order_by != null) {
                message.order_by = data.order_by;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page_no?: number;
                page_size?: number;
                order_by?: PromoterSubCommissionReq.OrderBy;
                order_type?: PromoterSubCommissionReq.OrderType;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.order_by != null) {
                data.order_by = this.order_by;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.page_no != 0) writer.writeInt32(2, this.page_no);
            if (this.page_size != 0) writer.writeInt32(3, this.page_size);
            if (this.order_by != PromoterSubCommissionReq.OrderBy.ORDER_BY_UNSPECIFIED)
                writer.writeEnum(4, this.order_by);
            if (this.order_type != PromoterSubCommissionReq.OrderType.ASC)
                writer.writeEnum(5, this.order_type);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterSubCommissionReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterSubCommissionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.page_no = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        message.order_by = reader.readEnum();
                        break;
                    case 5:
                        message.order_type = reader.readEnum();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterSubCommissionReq {
            return PromoterSubCommissionReq.deserialize(bytes);
        }
    }
    export namespace PromoterSubCommissionReq {
        export enum OrderBy {
            ORDER_BY_UNSPECIFIED = 0,

            /** 
              直属贡献(昨日自己为上级提供的佣金贡献)
               **/
            ORDER_BY_SELF = 1,

            /** 
              团队贡献(昨日自己的团队为上级提供的佣金贡献)
               **/
            ORDER_BY_SUB = 2,

            /** 
              默认按照bind_at倒序
               **/
            ORDER_BY_BIND_AT = 3,
        }
        export enum OrderType {
            ASC = 0,
            DESC = 1,
        }
    }
    export class PromoterSubCommissionResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterSubCommissionResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterSubCommissionResp.RespData,
                2
            ) as PromoterSubCommissionResp.RespData;
        }
        set data(value: PromoterSubCommissionResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterSubCommissionResp.RespData.prototype.toObject>;
        }): PromoterSubCommissionResp {
            const message = new PromoterSubCommissionResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterSubCommissionResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterSubCommissionResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterSubCommissionResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterSubCommissionResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterSubCommissionResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterSubCommissionResp {
            return PromoterSubCommissionResp.deserialize(bytes);
        }
    }
    export namespace PromoterSubCommissionResp {
        export class SubCommission extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          user_id?: number;
                          self_amount?: number;
                          sub_amount?: number;
                          bind_at?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("self_amount" in data && data.self_amount != undefined) {
                        this.self_amount = data.self_amount;
                    }
                    if ("sub_amount" in data && data.sub_amount != undefined) {
                        this.sub_amount = data.sub_amount;
                    }
                    if ("bind_at" in data && data.bind_at != undefined) {
                        this.bind_at = data.bind_at;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              直属贡献(昨日自己为上级提供的佣金贡献)
               **/
            get self_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              直属贡献(昨日自己为上级提供的佣金贡献)
               **/
            set self_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              团队贡献(昨日自己的团队为上级提供的佣金贡献)
               **/
            get sub_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              团队贡献(昨日自己的团队为上级提供的佣金贡献)
               **/
            set sub_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              直属绑定时间
               **/
            get bind_at() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              直属绑定时间
               **/
            set bind_at(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                user_id?: number;
                self_amount?: number;
                sub_amount?: number;
                bind_at?: number;
            }): SubCommission {
                const message = new SubCommission({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.self_amount != null) {
                    message.self_amount = data.self_amount;
                }
                if (data.sub_amount != null) {
                    message.sub_amount = data.sub_amount;
                }
                if (data.bind_at != null) {
                    message.bind_at = data.bind_at;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: number;
                    self_amount?: number;
                    sub_amount?: number;
                    bind_at?: number;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.self_amount != null) {
                    data.self_amount = this.self_amount;
                }
                if (this.sub_amount != null) {
                    data.sub_amount = this.sub_amount;
                }
                if (this.bind_at != null) {
                    data.bind_at = this.bind_at;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.user_id != 0) writer.writeInt64(1, this.user_id);
                if (this.self_amount != 0) writer.writeInt64(2, this.self_amount);
                if (this.sub_amount != 0) writer.writeInt64(3, this.sub_amount);
                if (this.bind_at != 0) writer.writeInt64(4, this.bind_at);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubCommission {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new SubCommission();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readInt64();
                            break;
                        case 2:
                            message.self_amount = reader.readInt64();
                            break;
                        case 3:
                            message.sub_amount = reader.readInt64();
                            break;
                        case 4:
                            message.bind_at = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SubCommission {
                return SubCommission.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          sub_commissions?: PromoterSubCommissionResp.SubCommission[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("sub_commissions" in data && data.sub_commissions != undefined) {
                        this.sub_commissions = data.sub_commissions;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get sub_commissions() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterSubCommissionResp.SubCommission,
                    2
                ) as PromoterSubCommissionResp.SubCommission[];
            }
            set sub_commissions(value: PromoterSubCommissionResp.SubCommission[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                sub_commissions?: ReturnType<
                    typeof PromoterSubCommissionResp.SubCommission.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.sub_commissions != null) {
                    message.sub_commissions = data.sub_commissions.map((item) =>
                        PromoterSubCommissionResp.SubCommission.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    sub_commissions?: ReturnType<
                        typeof PromoterSubCommissionResp.SubCommission.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.sub_commissions != null) {
                    data.sub_commissions = this.sub_commissions.map(
                        (item: PromoterSubCommissionResp.SubCommission) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.sub_commissions.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.sub_commissions,
                        (item: PromoterSubCommissionResp.SubCommission) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.sub_commissions, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PromoterSubCommissionResp.SubCommission.deserialize(reader),
                                    PromoterSubCommissionResp.SubCommission
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      我的每日业绩
       promoter/contribution/daily_stats/
       **/
    export class PromoterDailyContributionReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page_no?: number;
                      page_size?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page_no?: number;
            page_size?: number;
        }): PromoterDailyContributionReq {
            const message = new PromoterDailyContributionReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page_no?: number;
                page_size?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.page_no != 0) writer.writeInt32(2, this.page_no);
            if (this.page_size != 0) writer.writeInt32(3, this.page_size);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyContributionReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyContributionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.page_no = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyContributionReq {
            return PromoterDailyContributionReq.deserialize(bytes);
        }
    }
    export class PromoterDailyContributionResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterDailyContributionResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterDailyContributionResp.RespData,
                2
            ) as PromoterDailyContributionResp.RespData;
        }
        set data(value: PromoterDailyContributionResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterDailyContributionResp.RespData.prototype.toObject>;
        }): PromoterDailyContributionResp {
            const message = new PromoterDailyContributionResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterDailyContributionResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<typeof PromoterDailyContributionResp.RespData.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyContributionResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterDailyContributionResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterDailyContributionResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterDailyContributionResp {
            return PromoterDailyContributionResp.deserialize(bytes);
        }
    }
    export namespace PromoterDailyContributionResp {
        export class DailyStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          day?: number;
                          child_contribution_amount?: number;
                          sub_contribution_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("day" in data && data.day != undefined) {
                        this.day = data.day;
                    }
                    if (
                        "child_contribution_amount" in data &&
                        data.child_contribution_amount != undefined
                    ) {
                        this.child_contribution_amount = data.child_contribution_amount;
                    }
                    if (
                        "sub_contribution_amount" in data &&
                        data.sub_contribution_amount != undefined
                    ) {
                        this.sub_contribution_amount = data.sub_contribution_amount;
                    }
                }
            }
            get day() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set day(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              直属业绩
               **/
            get child_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              直属业绩
               **/
            set child_contribution_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              总业绩 注: 下属业绩 = 总业绩 - 直属业绩
               **/
            get sub_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              总业绩 注: 下属业绩 = 总业绩 - 直属业绩
               **/
            set sub_contribution_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                day?: number;
                child_contribution_amount?: number;
                sub_contribution_amount?: number;
            }): DailyStat {
                const message = new DailyStat({});
                if (data.day != null) {
                    message.day = data.day;
                }
                if (data.child_contribution_amount != null) {
                    message.child_contribution_amount = data.child_contribution_amount;
                }
                if (data.sub_contribution_amount != null) {
                    message.sub_contribution_amount = data.sub_contribution_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    day?: number;
                    child_contribution_amount?: number;
                    sub_contribution_amount?: number;
                } = {};
                if (this.day != null) {
                    data.day = this.day;
                }
                if (this.child_contribution_amount != null) {
                    data.child_contribution_amount = this.child_contribution_amount;
                }
                if (this.sub_contribution_amount != null) {
                    data.sub_contribution_amount = this.sub_contribution_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.day != 0) writer.writeInt64(1, this.day);
                if (this.child_contribution_amount != 0)
                    writer.writeInt64(2, this.child_contribution_amount);
                if (this.sub_contribution_amount != 0)
                    writer.writeInt64(3, this.sub_contribution_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new DailyStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.day = reader.readInt64();
                            break;
                        case 2:
                            message.child_contribution_amount = reader.readInt64();
                            break;
                        case 3:
                            message.sub_contribution_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DailyStat {
                return DailyStat.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          daily_stats?: PromoterDailyContributionResp.DailyStat[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("daily_stats" in data && data.daily_stats != undefined) {
                        this.daily_stats = data.daily_stats;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              length == consecutive_days_no
               **/
            get daily_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterDailyContributionResp.DailyStat,
                    2
                ) as PromoterDailyContributionResp.DailyStat[];
            }

            /** 
              length == consecutive_days_no
               **/
            set daily_stats(value: PromoterDailyContributionResp.DailyStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                daily_stats?: ReturnType<
                    typeof PromoterDailyContributionResp.DailyStat.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.daily_stats != null) {
                    message.daily_stats = data.daily_stats.map((item) =>
                        PromoterDailyContributionResp.DailyStat.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    daily_stats?: ReturnType<
                        typeof PromoterDailyContributionResp.DailyStat.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.daily_stats != null) {
                    data.daily_stats = this.daily_stats.map(
                        (item: PromoterDailyContributionResp.DailyStat) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.daily_stats.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.daily_stats,
                        (item: PromoterDailyContributionResp.DailyStat) => item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.daily_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PromoterDailyContributionResp.DailyStat.deserialize(reader),
                                    PromoterDailyContributionResp.DailyStat
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }

    /** 
      我的下级业绩详情
       promoter/contribution/sub_detail_stats/
       **/
    export class PromoterSubDetailContributionReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      page_no?: number;
                      page_size?: number;
                      start_time?: number;
                      end_time?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("page_no" in data && data.page_no != undefined) {
                    this.page_no = data.page_no;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }

        /** 
          开始时间
           **/
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }

        /** 
          开始时间
           **/
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }

        /** 
          结束时间
           **/
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }

        /** 
          结束时间
           **/
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            page_no?: number;
            page_size?: number;
            start_time?: number;
            end_time?: number;
        }): PromoterSubDetailContributionReq {
            const message = new PromoterSubDetailContributionReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.page_no != null) {
                message.page_no = data.page_no;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                page_no?: number;
                page_size?: number;
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.page_no != null) {
                data.page_no = this.page_no;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.page_no != 0) writer.writeInt32(2, this.page_no);
            if (this.page_size != 0) writer.writeInt32(3, this.page_size);
            if (this.start_time != 0) writer.writeInt64(4, this.start_time);
            if (this.end_time != 0) writer.writeInt64(5, this.end_time);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): PromoterSubDetailContributionReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterSubDetailContributionReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.page_no = reader.readInt32();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        message.start_time = reader.readInt64();
                        break;
                    case 5:
                        message.end_time = reader.readInt64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterSubDetailContributionReq {
            return PromoterSubDetailContributionReq.deserialize(bytes);
        }
    }
    export class PromoterSubDetailContributionResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                      data?: PromoterSubDetailContributionResp.RespData;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(
                this,
                PromoterSubDetailContributionResp.RespData,
                2
            ) as PromoterSubDetailContributionResp.RespData;
        }
        set data(value: PromoterSubDetailContributionResp.RespData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
            data?: ReturnType<typeof PromoterSubDetailContributionResp.RespData.prototype.toObject>;
        }): PromoterSubDetailContributionResp {
            const message = new PromoterSubDetailContributionResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = PromoterSubDetailContributionResp.RespData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
                data?: ReturnType<
                    typeof PromoterSubDetailContributionResp.RespData.prototype.toObject
                >;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(
            bytes: Uint8Array | pb_1.BinaryReader
        ): PromoterSubDetailContributionResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new PromoterSubDetailContributionResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.data,
                            () =>
                                (message.data =
                                    PromoterSubDetailContributionResp.RespData.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PromoterSubDetailContributionResp {
            return PromoterSubDetailContributionResp.deserialize(bytes);
        }
    }
    export namespace PromoterSubDetailContributionResp {
        export class GameDetailStat extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          game_id?: number;
                          self_contribution_amount?: number;
                          sub_contribution_amount?: number;
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("game_id" in data && data.game_id != undefined) {
                        this.game_id = data.game_id;
                    }
                    if (
                        "self_contribution_amount" in data &&
                        data.self_contribution_amount != undefined
                    ) {
                        this.self_contribution_amount = data.self_contribution_amount;
                    }
                    if (
                        "sub_contribution_amount" in data &&
                        data.sub_contribution_amount != undefined
                    ) {
                        this.sub_contribution_amount = data.sub_contribution_amount;
                    }
                }
            }
            get game_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set game_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }

            /** 
              业绩(自己为上级提供的业绩)
               **/
            get self_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }

            /** 
              业绩(自己为上级提供的业绩)
               **/
            set self_contribution_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              团队业绩(自己的团队为上级提供的业绩)
               **/
            get sub_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              团队业绩(自己的团队为上级提供的业绩)
               **/
            set sub_contribution_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                game_id?: number;
                self_contribution_amount?: number;
                sub_contribution_amount?: number;
            }): GameDetailStat {
                const message = new GameDetailStat({});
                if (data.game_id != null) {
                    message.game_id = data.game_id;
                }
                if (data.self_contribution_amount != null) {
                    message.self_contribution_amount = data.self_contribution_amount;
                }
                if (data.sub_contribution_amount != null) {
                    message.sub_contribution_amount = data.sub_contribution_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    game_id?: number;
                    self_contribution_amount?: number;
                    sub_contribution_amount?: number;
                } = {};
                if (this.game_id != null) {
                    data.game_id = this.game_id;
                }
                if (this.self_contribution_amount != null) {
                    data.self_contribution_amount = this.self_contribution_amount;
                }
                if (this.sub_contribution_amount != null) {
                    data.sub_contribution_amount = this.sub_contribution_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.game_id != 0) writer.writeInt32(1, this.game_id);
                if (this.self_contribution_amount != 0)
                    writer.writeInt64(2, this.self_contribution_amount);
                if (this.sub_contribution_amount != 0)
                    writer.writeInt64(3, this.sub_contribution_amount);
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameDetailStat {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new GameDetailStat();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.game_id = reader.readInt32();
                            break;
                        case 2:
                            message.self_contribution_amount = reader.readInt64();
                            break;
                        case 3:
                            message.sub_contribution_amount = reader.readInt64();
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GameDetailStat {
                return GameDetailStat.deserialize(bytes);
            }
        }
        export class SubContribution extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          day?: number;
                          user_id?: number;
                          self_contribution_amount?: number;
                          sub_contribution_amount?: number;
                          game_stats?: PromoterSubDetailContributionResp.GameDetailStat[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [5],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("day" in data && data.day != undefined) {
                        this.day = data.day;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if (
                        "self_contribution_amount" in data &&
                        data.self_contribution_amount != undefined
                    ) {
                        this.self_contribution_amount = data.self_contribution_amount;
                    }
                    if (
                        "sub_contribution_amount" in data &&
                        data.sub_contribution_amount != undefined
                    ) {
                        this.sub_contribution_amount = data.sub_contribution_amount;
                    }
                    if ("game_stats" in data && data.game_stats != undefined) {
                        this.game_stats = data.game_stats;
                    }
                }
            }
            get day() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set day(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }

            /** 
              业绩(自己为上级提供的业绩)
               **/
            get self_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }

            /** 
              业绩(自己为上级提供的业绩)
               **/
            set self_contribution_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }

            /** 
              团队业绩(自己的团队为上级提供的业绩)
               **/
            get sub_contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }

            /** 
              团队业绩(自己的团队为上级提供的业绩)
               **/
            set sub_contribution_amount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get game_stats() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterSubDetailContributionResp.GameDetailStat,
                    5
                ) as PromoterSubDetailContributionResp.GameDetailStat[];
            }
            set game_stats(value: PromoterSubDetailContributionResp.GameDetailStat[]) {
                pb_1.Message.setRepeatedWrapperField(this, 5, value);
            }
            static fromObject(data: {
                day?: number;
                user_id?: number;
                self_contribution_amount?: number;
                sub_contribution_amount?: number;
                game_stats?: ReturnType<
                    typeof PromoterSubDetailContributionResp.GameDetailStat.prototype.toObject
                >[];
            }): SubContribution {
                const message = new SubContribution({});
                if (data.day != null) {
                    message.day = data.day;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.self_contribution_amount != null) {
                    message.self_contribution_amount = data.self_contribution_amount;
                }
                if (data.sub_contribution_amount != null) {
                    message.sub_contribution_amount = data.sub_contribution_amount;
                }
                if (data.game_stats != null) {
                    message.game_stats = data.game_stats.map((item) =>
                        PromoterSubDetailContributionResp.GameDetailStat.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    day?: number;
                    user_id?: number;
                    self_contribution_amount?: number;
                    sub_contribution_amount?: number;
                    game_stats?: ReturnType<
                        typeof PromoterSubDetailContributionResp.GameDetailStat.prototype.toObject
                    >[];
                } = {};
                if (this.day != null) {
                    data.day = this.day;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.self_contribution_amount != null) {
                    data.self_contribution_amount = this.self_contribution_amount;
                }
                if (this.sub_contribution_amount != null) {
                    data.sub_contribution_amount = this.sub_contribution_amount;
                }
                if (this.game_stats != null) {
                    data.game_stats = this.game_stats.map(
                        (item: PromoterSubDetailContributionResp.GameDetailStat) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.day != 0) writer.writeInt64(1, this.day);
                if (this.user_id != 0) writer.writeInt64(2, this.user_id);
                if (this.self_contribution_amount != 0)
                    writer.writeInt64(3, this.self_contribution_amount);
                if (this.sub_contribution_amount != 0)
                    writer.writeInt64(4, this.sub_contribution_amount);
                if (this.game_stats.length)
                    writer.writeRepeatedMessage(
                        5,
                        this.game_stats,
                        (item: PromoterSubDetailContributionResp.GameDetailStat) =>
                            item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubContribution {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new SubContribution();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.day = reader.readInt64();
                            break;
                        case 2:
                            message.user_id = reader.readInt64();
                            break;
                        case 3:
                            message.self_contribution_amount = reader.readInt64();
                            break;
                        case 4:
                            message.sub_contribution_amount = reader.readInt64();
                            break;
                        case 5:
                            reader.readMessage(message.game_stats, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    5,
                                    PromoterSubDetailContributionResp.GameDetailStat.deserialize(
                                        reader
                                    ),
                                    PromoterSubDetailContributionResp.GameDetailStat
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SubContribution {
                return SubContribution.deserialize(bytes);
            }
        }
        export class RespData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(
                data?:
                    | any[]
                    | {
                          total?: number;
                          sub_contributions?: PromoterSubDetailContributionResp.SubContribution[];
                      }
            ) {
                super();
                pb_1.Message.initialize(
                    this,
                    Array.isArray(data) ? data : [],
                    0,
                    -1,
                    [2],
                    this.#one_of_decls
                );
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("total" in data && data.total != undefined) {
                        this.total = data.total;
                    }
                    if ("sub_contributions" in data && data.sub_contributions != undefined) {
                        this.sub_contributions = data.sub_contributions;
                    }
                }
            }

            /** 
              数据数量
               **/
            get total() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }

            /** 
              数据数量
               **/
            set total(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get sub_contributions() {
                return pb_1.Message.getRepeatedWrapperField(
                    this,
                    PromoterSubDetailContributionResp.SubContribution,
                    2
                ) as PromoterSubDetailContributionResp.SubContribution[];
            }
            set sub_contributions(value: PromoterSubDetailContributionResp.SubContribution[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                total?: number;
                sub_contributions?: ReturnType<
                    typeof PromoterSubDetailContributionResp.SubContribution.prototype.toObject
                >[];
            }): RespData {
                const message = new RespData({});
                if (data.total != null) {
                    message.total = data.total;
                }
                if (data.sub_contributions != null) {
                    message.sub_contributions = data.sub_contributions.map((item) =>
                        PromoterSubDetailContributionResp.SubContribution.fromObject(item)
                    );
                }
                return message;
            }
            toObject() {
                const data: {
                    total?: number;
                    sub_contributions?: ReturnType<
                        typeof PromoterSubDetailContributionResp.SubContribution.prototype.toObject
                    >[];
                } = {};
                if (this.total != null) {
                    data.total = this.total;
                }
                if (this.sub_contributions != null) {
                    data.sub_contributions = this.sub_contributions.map(
                        (item: PromoterSubDetailContributionResp.SubContribution) => item.toObject()
                    );
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.total != 0) writer.writeInt32(1, this.total);
                if (this.sub_contributions.length)
                    writer.writeRepeatedMessage(
                        2,
                        this.sub_contributions,
                        (item: PromoterSubDetailContributionResp.SubContribution) =>
                            item.serialize(writer)
                    );
                if (!w) return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {
                const reader =
                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                    message = new RespData();
                while (reader.nextField()) {
                    if (reader.isEndGroup()) break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.total = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.sub_contributions, () =>
                                pb_1.Message.addToRepeatedWrapperField(
                                    message,
                                    2,
                                    PromoterSubDetailContributionResp.SubContribution.deserialize(
                                        reader
                                    ),
                                    PromoterSubDetailContributionResp.SubContribution
                                )
                            );
                            break;
                        default:
                            reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RespData {
                return RespData.deserialize(bytes);
            }
        }
    }
    export class UserDeviceReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: ReqHeader;
                      adia?: string;
                      idfa?: string;
                      gps_adid?: string;
                      adjust_app_id?: string;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("adia" in data && data.adia != undefined) {
                    this.adia = data.adia;
                }
                if ("idfa" in data && data.idfa != undefined) {
                    this.idfa = data.idfa;
                }
                if ("gps_adid" in data && data.gps_adid != undefined) {
                    this.gps_adid = data.gps_adid;
                }
                if ("adjust_app_id" in data && data.adjust_app_id != undefined) {
                    this.adjust_app_id = data.adjust_app_id;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;
        }
        set header(value: ReqHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get adia() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set adia(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get idfa() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set idfa(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gps_adid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set gps_adid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get adjust_app_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set adjust_app_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof ReqHeader.prototype.toObject>;
            adia?: string;
            idfa?: string;
            gps_adid?: string;
            adjust_app_id?: string;
        }): UserDeviceReq {
            const message = new UserDeviceReq({});
            if (data.header != null) {
                message.header = ReqHeader.fromObject(data.header);
            }
            if (data.adia != null) {
                message.adia = data.adia;
            }
            if (data.idfa != null) {
                message.idfa = data.idfa;
            }
            if (data.gps_adid != null) {
                message.gps_adid = data.gps_adid;
            }
            if (data.adjust_app_id != null) {
                message.adjust_app_id = data.adjust_app_id;
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof ReqHeader.prototype.toObject>;
                adia?: string;
                idfa?: string;
                gps_adid?: string;
                adjust_app_id?: string;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.adia != null) {
                data.adia = this.adia;
            }
            if (this.idfa != null) {
                data.idfa = this.idfa;
            }
            if (this.gps_adid != null) {
                data.gps_adid = this.gps_adid;
            }
            if (this.adjust_app_id != null) {
                data.adjust_app_id = this.adjust_app_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.adia.length) writer.writeString(2, this.adia);
            if (this.idfa.length) writer.writeString(3, this.idfa);
            if (this.gps_adid.length) writer.writeString(4, this.gps_adid);
            if (this.adjust_app_id.length) writer.writeString(5, this.adjust_app_id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDeviceReq {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserDeviceReq();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = ReqHeader.deserialize(reader))
                        );
                        break;
                    case 2:
                        message.adia = reader.readString();
                        break;
                    case 3:
                        message.idfa = reader.readString();
                        break;
                    case 4:
                        message.gps_adid = reader.readString();
                        break;
                    case 5:
                        message.adjust_app_id = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDeviceReq {
            return UserDeviceReq.deserialize(bytes);
        }
    }
    export class UserDeviceResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      header?: RespHeader;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;
        }
        set header(value: RespHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof RespHeader.prototype.toObject>;
        }): UserDeviceResp {
            const message = new UserDeviceResp({});
            if (data.header != null) {
                message.header = RespHeader.fromObject(data.header);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof RespHeader.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDeviceResp {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UserDeviceResp();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.header,
                            () => (message.header = RespHeader.deserialize(reader))
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDeviceResp {
            return UserDeviceResp.deserialize(bytes);
        }
    }
}
